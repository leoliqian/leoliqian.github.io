<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaSpring4.1.1 Spring入门</title>
    <url>/posts/2125400111/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li></li>
<li></li>
</ul>
<a id="more"></a>

</body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JavaSpring4.1.1 Spring入门</title>
    <url>/posts/2125400112/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>Spring的概述</li>
<li>Spring的入门</li>
</ul>
<a id="more"></a>

<h3 id="Spring的概述"><a href="#Spring的概述" class="headerlink" title="Spring的概述"></a>Spring的概述</h3><p><strong>什么是Spring：</strong></p>
<ul>
<li>Spring 是一个开源框架。</li>
<li>Spring 为简化企业级应用开发而生。使用Spring可以使简单的JavaBean实现以前只有EJB才能实现的功能。</li>
<li>Spring是JavaSE/EE的一站式框架。</li>
</ul>
<p><strong>Spring的优点：</strong></p>
<ul>
<li>方便解耦，简化开发。<ul>
<li>Spring就是一个大工厂，可以将所有对象创建和依赖关系维护，交给Spring管理。</li>
</ul>
</li>
<li>Aop编程的支持。<ul>
<li>Spring提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能。</li>
</ul>
</li>
<li>声明式事务的支持。<ul>
<li>只需要通过配置就可以完成对事物的管理，而无需手动编程。</li>
</ul>
</li>
<li>方便程序的测试。<ul>
<li>Spring对Junit4支持，可以通过注解方便的测试Spring程序。</li>
</ul>
</li>
<li>方便集成各种优秀框架。<ul>
<li>Spring不排除各种优秀的开源框架，其内部提供了对各种优秀框架（如：Strusts、Hibernate、MyBatis等）的直接支持。</li>
</ul>
</li>
<li>降低JavaEE API的使用难度。<br>  Spring对JavaEE开发中非常难用的一些API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低。<br><img src="en-resource://database/6238:1" alt="061d89ae2f4a413b13f813898fbe86a7.png"></li>
</ul>
<h4 id="Spring-IOC的底层原理实现"><a href="#Spring-IOC的底层原理实现" class="headerlink" title="Spring IOC的底层原理实现"></a>Spring IOC的底层原理实现</h4><p><img src="en-resource://database/6240:1" alt="080afd35f64f80c43d71cb5efae319bf.png"></p>
<h4 id="选择练习"><a href="#选择练习" class="headerlink" title="选择练习"></a>选择练习</h4><p>多选题<br>下面关于IOC的理解正确的是（）（选择两项）</p>
<p>A控制反转<br>B对象被动的接受依赖类<br>C对象主动的去找依赖类<br>D一定要用接口</p>
<p>正确答案： A,B</p>
<h4 id="选择练习-1"><a href="#选择练习-1" class="headerlink" title="选择练习"></a>选择练习</h4><p>多选题<br>SpringIOC的底层是用哪种设计模式来完成的（选择两项）</p>
<p>A单例模式<br>B工厂模式<br>C反射机制<br>D观察者模式</p>
<p>正确答案： A,B</p>
<h3 id="Spring-IOC快速入门"><a href="#Spring-IOC快速入门" class="headerlink" title="Spring IOC快速入门"></a>Spring IOC快速入门</h3><h4 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h4><p><strong>Spring IOC的快速入门案例</strong></p>
<ul>
<li>下载Spring开发包。</li>
<li>赋值Spring开发部jar包到工程。</li>
<li>理解IOC控制反转和DI依赖注入。</li>
<li>编写Spring核心配置文件。</li>
<li>在程序中读取Spring配置文件，通过Spring框架获得Bean，完成相应操作。</li>
</ul>
<h4 id="引入jar包"><a href="#引入jar包" class="headerlink" title="引入jar包"></a>引入jar包</h4><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h3 id="概念总结"><a href="#概念总结" class="headerlink" title="概念总结"></a>概念总结</h3><h4 id="IOC和DI的概念"><a href="#IOC和DI的概念" class="headerlink" title="IOC和DI的概念"></a>IOC和DI的概念</h4><ul>
<li>IOC Inverse of Control 反转控制的概念，就是将原本在程序中手动创建UserService对象的控制权，交由Spring框架管理。</li>
<li>简单说，就是创建UserService对象控制权被反转到了Spring框架。</li>
<li>DI Dependency Injection 依赖注入的概念，就是在Spring创建这个对象的过程中，将这个对象所依赖的属性注入进去。<ul>
<li>DI依赖于AOC</li>
</ul>
</li>
</ul>
<h4 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a>单选题</h4><p>在Spring中，下列关于依赖注入的说法正确的是（）（选择一项）</p>
<p>A依赖注入的目的是在代码之外管理程序间组件的依赖关系<br>BSpring框架中不涉及依赖注入<br>C依赖注入的使用会增大程序的规模<br>D依赖注入是面向对象的替代品</p>
<p>正确答案： A</p>
<h4 id="自由编程"><a href="#自由编程" class="headerlink" title="自由编程"></a>自由编程</h4><p>通过Spring配置文件的方式，设置对象属性值。</p>
<p>效果图：</p>
<p><img src="https://img.mukewang.com/climg/5ab238f00001458f03690057.jpg" alt="//img.mukewang.com/climg/5ab238f00001458f03690057.jpg"></p>
<p>步骤：</p>
<p>1、    定义实体类为Food</p>
<p>​    以下为类的属性信息:</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>name</td>
<td>String</td>
<td>食品名称</td>
</tr>
<tr>
<td>taste</td>
<td>String</td>
<td>食品口味</td>
</tr>
<tr>
<td>kind</td>
<td>String</td>
<td>食品种类</td>
</tr>
</tbody></table>
<p>2、定义测试类，先创建工厂类，然后通过工厂获得Food类的对象；再完成信息的输出。</p>
<p>   提示：需要重写toString()方法，完成对属性信息的输出，输出形式见效果图</p>
</body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JavaSpring4.1.3 AOP</title>
    <url>/posts/446072379/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>AOP的概述</li>
<li>AOP的底层实现</li>
<li>Spring的一般切面编程案例</li>
<li>Spring的传统AOP的动态代理</li>
</ul>
<a id="more"></a>

<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="AOP的概述"><a href="#AOP的概述" class="headerlink" title="AOP的概述"></a>AOP的概述</h4><ul>
<li>AOP Aspect Oriented Programming 面向切面编程</li>
<li>AOP采用横向抽取机制，取代了传统纵向继承体系重复性代码（性能监视、事务管理、安全检查、缓存）</li>
<li>Spring AOP使用纯Java实现，不需要专门的编译过程和类加载器，在运行期通过代理方式向目标类植入增强代码，</li>
</ul>
<h5 id="多选题"><a href="#多选题" class="headerlink" title="多选题"></a>多选题</h5><p>以下关于Spring AOP的说法正确的是（）（选择两项）</p>
<p><strong>A、</strong>Spring AOP指的是面向对象编程</p>
<p><strong>B、</strong>AOP采取纵向抽取机制，取代了传统的横向继承体系重复代码</p>
<p><strong>C、</strong>AOP是Aspect Oriented Programming的英文缩写</p>
<p><strong>D、</strong>AOP编程技术可以完成的功能：性能监视、事务管理以及安全检查、缓存</p>
<p><strong>正确答案：</strong> <strong>C,D</strong></p>
<h4 id="AOP的相关术语"><a href="#AOP的相关术语" class="headerlink" title="AOP的相关术语"></a>AOP的相关术语</h4><ul>
<li>Joinpoint ( 连接点 ) : 指那些可以被拦截到的点。在spring中，这些点指的是方法，因为spring只支持方法类型的连接点。<ul>
<li>增删改查的方法都可以被增强，这些方法称为连接点。</li>
</ul>
</li>
<li>Pointcut ( 切入点 ) : 指我们要对哪些Joinpoint进行拦截的定义。又可以理解为真正被拦截到的点。<ul>
<li>比如我们只想对save方法进行增强（做权限校验），save方法就被称为是切入点。</li>
</ul>
</li>
<li>Advice（通知/增强）：指拦截到Joinpoint之后所要做的事情就是通知。<ul>
<li>通知分为前置通知，后置通知，异常通知，最终通知，环绕通知（切面要完成的功能）。</li>
<li>例如：对save方法要进行权限校验，权限校验的方法称为是通知。<ul>
<li>save方法执行之前进行校验，叫前置通知；在删除方法执行之后进行日志记录，日志记录叫后置通知。之前之后都做一些事情叫环绕通知。</li>
</ul>
</li>
</ul>
</li>
<li>Introduction（引介）：引介是一种特殊的通知，在不修改类代码的前提下，Introduction可以在运行期为类动态地添加一些方法或Field。</li>
<li>Target（目标对象）：代理的目标对象。</li>
<li>Weaving（织入）：是指把增强应用到目标对象来创建新的代理对象的过程。<ul>
<li>spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入。</li>
</ul>
</li>
<li>Proxy（代理）：一个类被AOP织入增强后，就产生一个结果代理类。</li>
<li>Aspect（切面）：是切入点（可以是多个）和通知（引介）的结合。</li>
</ul>
<h5 id="选择练习"><a href="#选择练习" class="headerlink" title="选择练习"></a>选择练习</h5><p>多选题</p>
<p>以下关于Spring AOP的术语说法正确的是（）（选择两项）</p>
<p><strong>A、</strong>Joinpoint指的是可以被拦截的点，例如增删改查这些方法</p>
<p><strong>B、</strong>如果只想对某一个方法做增强，那么该方法就是Joinpoint</p>
<p><strong>C、</strong>如果只想对update()方法做增强，那么update()方法就是Pointcut</p>
<p><strong>D、</strong>其余说法均不正确</p>
<p><strong>正确答案：</strong> <strong>A,C</strong></p>
<h5 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a>单选题</h5><p>在Spring AOP中，关于Introduction（引介）的说法正确的是（）（选择一项）</p>
<p><strong>A</strong>引介是一种特殊的通知在不修改类代码的前提下，引介可以在运行期为类动态的添加一些方法或者Field。</p>
<p><strong>B</strong>引介是一种特殊的通知在不修改类代码的前提下，引介可以在编译期为类动态的添加一些方法或者Field。</p>
<p><strong>C</strong>引介是一种特殊的通知在不修改类代码的前提下，引介可以在加载期为类动态的添加一些方法或者Field。</p>
<p><strong>D</strong>引介是一种特殊的通知在修改类代码的同时，引介可以在编译期为类动态的添加一些方法或者Field。</p>
<p><strong>正确答案：</strong> <strong>A</strong></p>
<h5 id="选择练习-1"><a href="#选择练习-1" class="headerlink" title="选择练习"></a>选择练习</h5><p>多选题</p>
<p>在Spring AOP中，关于Target（目标对象）和Weaving（织入）的说法错误的是（）（选择两项）</p>
<p><strong>A、</strong>代理的需要增强的目标对象成为Target</p>
<p><strong>B、</strong>织入是把增强应用到目标对象来创建新的代理对象的过程</p>
<p><strong>C、</strong>Spring采用编译器织入和类装载区织入的方式</p>
<p><strong>D、</strong>AspectJ采用动态代理方式织入</p>
<p><strong>正确答案：</strong> <strong>C,D</strong></p>
<h3 id="AOP的底层实现"><a href="#AOP的底层实现" class="headerlink" title="AOP的底层实现"></a>AOP的底层实现</h3><h4 id="JDK的动态代理"><a href="#JDK的动态代理" class="headerlink" title="JDK的动态代理"></a>JDK的动态代理</h4><p>UserDao.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.aop.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>UserDaoImpl.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.aop.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"保存用户。。。"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"修改用户。。。"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"删除用户。。。"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"查询用户。。。"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>MyJdkProxy.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.aop.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJdkProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyJdkProxy</span><span class="params">(UserDao userDao)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.userDao=userDao;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">createProxy</span><span class="params">()</span></span>{</span><br><span class="line">        Object proxy = Proxy.newProxyInstance(userDao.getClass().getClassLoader(), userDao.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"save"</span>.equals(method.getName())){</span><br><span class="line">            System.out.println(<span class="string">"权限校验"</span>);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(userDao,args);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> method.invoke(userDao,args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>SpringDemo1.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.aop.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDemo1</span> </span>{</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span></span>{</span><br><span class="line">        UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line"></span><br><span class="line">        UserDao proxy = (UserDao) <span class="keyword">new</span> MyJdkProxy(userDao).createProxy();</span><br><span class="line">        proxy.save();</span><br><span class="line">        proxy.delete();</span><br><span class="line">        proxy.find();</span><br><span class="line">        proxy.update();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<h4 id="CGLIB的动态代理"><a href="#CGLIB的动态代理" class="headerlink" title="CGLIB的动态代理"></a>CGLIB的动态代理</h4><ul>
<li>对于不使用接口的业务，无法使用JDK动态代理。</li>
<li>CGlib采用非常底层字节码技术，可以为一个类创建子类，解决无接口代理问题</li>
</ul>
<p>代码复现出现问题，没有复现成功。</p>
<h4 id="代理知识的总结"><a href="#代理知识的总结" class="headerlink" title="代理知识的总结"></a>代理知识的总结</h4><ul>
<li>Spring在运行期，生成动态代理对象，不需要特殊的编译器。</li>
<li>Spring AOP的底层就是通过JDK动态代理或CGLib动态代理技术，为目标Bean执行横向织入。<ul>
<li>若目标对象实现了若干接口，spring使用JDK的java.lang.reflect.Proxy类代理。</li>
<li>若目标对象没有实现任何接口，spring使用CGLib库生成目标对象子类。</li>
</ul>
</li>
<li>程序中应优先对接口创建代理，便于程序解耦维护。</li>
<li>标记为final方法，不能被代理，因为无法进行覆盖。<ul>
<li>JDK动态代理，是针对目标类生产子类，因此类或方法不能使final的。</li>
</ul>
</li>
<li>Spring只支持方法连接点，不提供属性连接点。</li>
</ul>
<h3 id="Spring的一般切面编程案例"><a href="#Spring的一般切面编程案例" class="headerlink" title="Spring的一般切面编程案例"></a>Spring的一般切面编程案例</h3><h4 id="Spring的AOP的通知类型的介绍"><a href="#Spring的AOP的通知类型的介绍" class="headerlink" title="Spring的AOP的通知类型的介绍"></a>Spring的AOP的通知类型的介绍</h4><p><strong>Spring AOP增强类型</strong></p>
<ul>
<li>AOP联盟为通知Advice定义了org.aopalliance.aop.Interface.Advice</li>
<li>Spring按照通知Advice在目标方法的连接点位置，可以分为5类：<ul>
<li>前置通知：org.springframework.aop.MethodBeforeAdvice<ul>
<li>在目标方法执行前实施增强。</li>
</ul>
</li>
<li>后置通知：org.springframework.aop.AfterReturningAdvice<ul>
<li>在目标方法执行后实施增强。</li>
</ul>
</li>
<li>环绕通知：org.aoppalliance.intercept.MethodInterceptor<ul>
<li>在目标方法执行前后实施增强。</li>
</ul>
</li>
<li>异常抛出通知：org.springframework.aop.ThrowsAdvice<ul>
<li>在目标方法抛出异常后实施增强。</li>
</ul>
</li>
<li>引介通知：org.springframework.aop.IntroductionInterceptor<ul>
<li>在目标类中添加一些新的方法和属性。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="单选题-1"><a href="#单选题-1" class="headerlink" title="单选题"></a>单选题</h5><p>以下关于SpringAOP增强类型的说法错误的是（）（选择一项）</p>
<p><strong>A、</strong>SpringAOP的通知类型又称为增强类型</p>
<p><strong>B、</strong>SpringAOP按照通知Advice在目标类方法的连接点位置，可以分为4种通知类型，分别是前置通知，后置通知，异常抛出通知，引介通知</p>
<p><strong>C、</strong>前置通知是在目标方法执行之前实施增强</p>
<p><strong>D、</strong>后置通知是在目标方法执行之后实施增强</p>
<p><strong>正确答案：</strong> <strong>B</strong></p>
<h4 id="Spring的AOP的切面类型的介绍"><a href="#Spring的AOP的切面类型的介绍" class="headerlink" title="Spring的AOP的切面类型的介绍"></a>Spring的AOP的切面类型的介绍</h4><ul>
<li>Adivisor：代表一般切面，Advice本身就是一个切面，对目标所有方法进行拦截。</li>
<li>PointcutAdivisor：代表具有切点的切面，可以指定拦截目标类哪些方法。</li>
<li>IntroductionAdivisor：代表引介切面，针对引介通知而使用切面（不要求掌握）</li>
</ul>
<h4 id="Spring的一般切面案例的准备工作"><a href="#Spring的一般切面案例的准备工作" class="headerlink" title="Spring的一般切面案例的准备工作"></a>Spring的一般切面案例的准备工作</h4><h4 id="Spring的一般切面案例的代码实现"><a href="#Spring的一般切面案例的代码实现" class="headerlink" title="Spring的一般切面案例的代码实现"></a>Spring的一般切面案例的代码实现</h4><p><strong>Advisor且米娜案例</strong></p>
<ul>
<li><p>ProxyFactoryBean常用可配置属性</p>
<ul>
<li><p>target：代理的目标对象。</p>
</li>
<li><p>proxyInterfaces：代理要实现的接口。</p>
<ul>
<li><p>如果多个接口可以使用以下格式赋值。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>


</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Spring的一般切面案例的其他属性的设置"><a href="#Spring的一般切面案例的其他属性的设置" class="headerlink" title="Spring的一般切面案例的其他属性的设置"></a>Spring的一般切面案例的其他属性的设置</h4><ul>
<li>proxyTargetClass：是否对类代理而不是接口，设置为true时，使用CGLib代理。</li>
<li>interceptorNames：需要织入目标的Advice。</li>
<li>singleton：返回代理是否为单实例，默认为单例。</li>
<li>optimize：当设置为true时，强制使用CGLib。</li>
</ul>
<h5 id="选择练习-2"><a href="#选择练习-2" class="headerlink" title="选择练习"></a>选择练习</h5><p>多选题</p>
<p>以下关于SpringAOP中对Advisor切面中属性的描述正确是（）（选择两项）</p>
<p><strong>A、</strong>singleton返回代理是否为单例模式，默认是多例的</p>
<p><strong>B、</strong>interceptorNames：需要织入目标的Advice</p>
<p><strong>C、</strong>optimize：当设置为TRUE时，强制使用Cglib</p>
<p><strong>D、</strong>optimize：当设置为FALSE时，强制使用Cglib</p>
<p><strong>正确答案：</strong> <strong>B,C</strong></p>
<h4 id="Spring的带有切入点的切面的配置案例"><a href="#Spring的带有切入点的切面的配置案例" class="headerlink" title="Spring的带有切入点的切面的配置案例"></a>Spring的带有切入点的切面的配置案例</h4><p><strong>PointcutAdvisor切点切面：</strong></p>
<ul>
<li><p>使用普通Advice作为切面，将对目标类所有方法进行拦截，不够灵活，在实际开发中常采用带有切点的切面。</p>
</li>
<li><p>常用PointcutAdvisor实现类</p>
<ul>
<li><p>DefaultPointcutAdvisor最常用的切面类型，它可以通过任意Pointcut和Advice组合定义切面。</p>
</li>
<li><p><strong>JdkRegexpMethodPointcut 构造正则表达式切点</strong></p>
</li>
</ul>
</li>
</ul>
<h3 id="Spring的传统AOP的动态代理"><a href="#Spring的传统AOP的动态代理" class="headerlink" title="Spring的传统AOP的动态代理"></a>Spring的传统AOP的动态代理</h3><h4 id="Spring的传统AOP的自动代理的方式的介绍"><a href="#Spring的传统AOP的自动代理的方式的介绍" class="headerlink" title="Spring的传统AOP的自动代理的方式的介绍"></a>Spring的传统AOP的自动代理的方式的介绍</h4><ul>
<li>前面的案例中，每个代理都是通过ProxyFactoryBean织入切面代理，在实例开发中，非常多的Bean每个都配置ProxyFactoryBean开发维护量巨大</li>
<li>解决方案：自动创建代理<ul>
<li>BeanNameAutoProxyCreator 根据Bean名称创建代理</li>
<li>DefaultAdvisorAutoProxyCreator 根据Advisor本身包含信息创建代理</li>
<li>AnnotationAwareAspectJAutoProxyCreator 基于Bean中的AspectJ注解进行自动代理。</li>
</ul>
</li>
</ul>
<p>BeanNameAutoProxyCreator</p>
<h4 id="Spring的传统AOP的基于Bean名称的自动代理"><a href="#Spring的传统AOP的基于Bean名称的自动代理" class="headerlink" title="Spring的传统AOP的基于Bean名称的自动代理"></a>Spring的传统AOP的基于Bean名称的自动代理</h4><h4 id="Spring的传统AOP的基于切面信息的自动代理"><a href="#Spring的传统AOP的基于切面信息的自动代理" class="headerlink" title="Spring的传统AOP的基于切面信息的自动代理"></a>Spring的传统AOP的基于切面信息的自动代理</h4></body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JavaSpring4.1.4 基于AspectJ的AOP开发</title>
    <url>/posts/3229689219/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>Spring的概述</li>
<li>Spring的入门</li>
</ul>
<a id="more"></a>

<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="AspectJ的简介"><a href="#AspectJ的简介" class="headerlink" title="AspectJ的简介"></a>AspectJ的简介</h4><ul>
<li>AspectJ是一个基于Java语言的AOP框架。</li>
<li>Spring2.0以后新增了对AspectJ切点表达式支持</li>
<li>@AspectJ是AspectJ1.5新增功能，通过JDK5注解技术，允许直接在Bean类中定义切面。</li>
<li>新版本Spring框架，建议使用AspectJ方式来开发AOP。</li>
<li>使用AspectJ需要导入Spring AOP和AspectJ相关jar包。<ul>
<li>spring-aop-4.2.4.RELEASE.jar</li>
<li>com.springsource.org.aopalliance-1.0.0.jar</li>
<li>spring-aspects-4.2.4.RELEASE.jar</li>
<li>com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar</li>
</ul>
</li>
</ul>
<h3 id="AspectJ的注解开发AOP（上）"><a href="#AspectJ的注解开发AOP（上）" class="headerlink" title="AspectJ的注解开发AOP（上）"></a>AspectJ的注解开发AOP（上）</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><h4 id="通知的类型介绍"><a href="#通知的类型介绍" class="headerlink" title="通知的类型介绍"></a>通知的类型介绍</h4><ul>
<li>@Before 前置通知，相当于BeforeAdvice。</li>
<li>@AfterReturning 后置通知，相当于AfterReturningAdvice。</li>
<li>@Around 环绕通知，相当于MethodInterceptor。</li>
<li>@AfterThrowing 异常抛出通知，相当于ThrowAdvice。</li>
<li>@After 最终final通知，不管是否异常，该通知都会执行。</li>
<li>@DeclareParents 引介通知，相当于IntroductionInterceptor（不要求掌握）</li>
</ul>
<h4 id="切入点表达式的定义"><a href="#切入点表达式的定义" class="headerlink" title="切入点表达式的定义"></a>切入点表达式的定义</h4><ul>
<li><p>通过execution函数，可以定义切点的方法切入</p>
</li>
<li><p>语法：</p>
<ul>
<li>execution ( &lt;访问修饰符&gt; ? &lt; 返回类型 &gt; &lt; 方法名 &gt; ( &lt; 参数 &gt; ) &lt; 异常 &gt; )</li>
</ul>
</li>
<li><p>例如：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="code"><pre><span class="line">匹配所有类public方法 execution(public * * (..))</span><br><span class="line">匹配指定包下所有类方法 execution(* com.imooc.dao.*(..)) 不包含子包</span><br><span class="line">execution (* com.imooc.dao..*(..))   表示包、子包下所有类可以用..*来表示</span><br><span class="line">匹配指定类所有方法 execution(* com.imooc.service.UserService.*(..))</span><br><span class="line">匹配实现特定接口所有类方法 execution(* com.imooc.dao.GenericDAO+.*(..))</span><br><span class="line">匹配所有save开头的方法 execution(* save*(..))</span><br></pre></td></tr></tbody></table></figure></div>


</li>
</ul>
<h3 id="第3章-AspectJ的注解开发AOP（下）"><a href="#第3章-AspectJ的注解开发AOP（下）" class="headerlink" title="第3章 AspectJ的注解开发AOP（下）"></a>第3章 AspectJ的注解开发AOP（下）</h3><h4 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h4><h4 id="Before前置通知"><a href="#Before前置通知" class="headerlink" title="@Before前置通知"></a>@Before前置通知</h4><ul>
<li>可以在方法中传入JoinPoint对象，用来获得切点信息</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspectAnno</span> </span>{</span><br><span class="line">   <span class="meta">@Before(value = "execution(* com.imooc.aspectJ.demo1.ProductDao.save(..))")</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>{</span><br><span class="line">       System.out.println(<span class="string">"前置通知==========="</span>+joinPoint);</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure></div>


<h4 id="AfterReturing后置通知"><a href="#AfterReturing后置通知" class="headerlink" title="@AfterReturing后置通知"></a>@AfterReturing后置通知</h4><ul>
<li>通过returning属性，可以定义方法返回值，作为参数。</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(value = "execution(* com.imooc.aspectJ.demo1.ProductDao.update(..))",returning = "result")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturing</span><span class="params">(Object result)</span></span>{</span><br><span class="line">    System.out.println(<span class="string">"后置通知==========="</span>+result);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<h4 id="Around环绕通知"><a href="#Around环绕通知" class="headerlink" title="@Around环绕通知"></a>@Around环绕通知</h4><ul>
<li>around方法的返回值就是目标代理方法执行返回值。</li>
<li>参数为ProceedingJoinPoint可以调用拦截目标方法执行。</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Around(value = "execution(* com.imooc.aspectJ.demo1.ProductDao.delete(..))")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">    System.out.println(<span class="string">"环绕前通知"</span>);</span><br><span class="line">    Object obj = joinPoint.proceed();<span class="comment">//执行目标方法</span></span><br><span class="line">    System.out.println(<span class="string">"环绕后通知"</span>);</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<ul>
<li>重点：如果不调用ProceedingJoinPoint的proceed方法，那么目标方法就被拦截了。</li>
</ul>
<h4 id="AfterThrowing异常抛出通知"><a href="#AfterThrowing异常抛出通知" class="headerlink" title="@AfterThrowing异常抛出通知"></a>@AfterThrowing异常抛出通知</h4><ul>
<li>通过设置throwing属性，可以设置发生异常对象参数</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(value = "execution(* com.imooc.aspectJ.demo1.ProductDao.findOne(..))",throwing = "e")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(Throwable e)</span></span>{</span><br><span class="line">    System.out.println(<span class="string">"异常抛出通知"</span>+e.getMessage());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<h4 id="After最终通知"><a href="#After最终通知" class="headerlink" title="@After最终通知"></a>@After最终通知</h4><ul>
<li>无论是否出现异常，最终通知总是会被执行的</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@After(value = "execution(* com.imooc.aspectJ.demo1.ProductDao.findAll(..))")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>{</span><br><span class="line">    System.out.println(<span class="string">"最终通知"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<h4 id="切点命名"><a href="#切点命名" class="headerlink" title="切点命名"></a>切点命名</h4><ul>
<li>在每个通知内定义切点，会造成工作量大，不易维护，对于重复的切点，可以使用@Pointcut进行定义。</li>
<li>切点方法：private void 无参数方法，方法名为切点名</li>
<li>当通知多个切点时，可以使用 || 进行连接。</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.aspectJ.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspectAnno</span> </span>{</span><br><span class="line">    <span class="meta">@Before(value = "myPointcut1()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"前置通知==========="</span>+joinPoint);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = "myPointcut2()",returning = "result")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturing</span><span class="params">(Object result)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"后置通知==========="</span>+result);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(value = "myPointcut3()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        System.out.println(<span class="string">"环绕前通知"</span>);</span><br><span class="line">        Object obj = joinPoint.proceed();<span class="comment">//执行目标方法</span></span><br><span class="line">        System.out.println(<span class="string">"环绕后通知"</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = "myPointcut4()",throwing = "e")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(Throwable e)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"异常抛出通知"</span>+e.getMessage());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(value = "myPointcut5()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"最终通知"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(value = "execution(* com.imooc.aspectJ.demo1.ProductDao.save(..))")</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">myPointcut1</span><span class="params">()</span></span>{}</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(value = "execution(* com.imooc.aspectJ.demo1.ProductDao.update(..))")</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">myPointcut2</span><span class="params">()</span></span>{}</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(value = "execution(* com.imooc.aspectJ.demo1.ProductDao.findOne(..))")</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">myPointcut3</span><span class="params">()</span></span>{}</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(value = "execution(* com.imooc.aspectJ.demo1.ProductDao.delete(..))")</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">myPointcut4</span><span class="params">()</span></span>{}</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(value = "execution(* com.imooc.aspectJ.demo1.ProductDao.findAll(..))")</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">myPointcut5</span><span class="params">()</span></span>{}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<h3 id="AspectJ的XML方式开发AOP"><a href="#AspectJ的XML方式开发AOP" class="headerlink" title="AspectJ的XML方式开发AOP"></a>AspectJ的XML方式开发AOP</h3><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><h4 id="入门案例-1"><a href="#入门案例-1" class="headerlink" title="入门案例"></a>入门案例</h4><h4 id="各种通知类型的配置"><a href="#各种通知类型的配置" class="headerlink" title="各种通知类型的配置"></a>各种通知类型的配置</h4></body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JavaSpring4.1.5 JDBC Template</title>
    <url>/posts/4075042915/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li></li>
<li></li>
</ul>
<a id="more"></a>

<h3 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h3><h4 id="课程介绍-1"><a href="#课程介绍-1" class="headerlink" title="课程介绍"></a>课程介绍</h4><h3 id="JDBC-Template概念及案例准备"><a href="#JDBC-Template概念及案例准备" class="headerlink" title="JDBC Template概念及案例准备"></a>JDBC Template概念及案例准备</h3><h4 id="JDBCTemplate概念"><a href="#JDBCTemplate概念" class="headerlink" title="JDBCTemplate概念"></a>JDBCTemplate概念</h4><ul>
<li><p>为了简化持久化操作，Spring在JDBC API之上提供了JDBC Template组件</p>
</li>
<li><p>JDBC Template提供统一的模板方法，在保留代码灵活性的基础上，尽量减少持久化代码。</p>
</li>
</ul>
<h4 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a>单选题</h4><p>以下关于JDBC Template的说法正确的是（）（选择一项）</p>
<p><strong>A、</strong>为了简化持久化的操作，MyBatis提供了JDBC Template组件</p>
<p><strong>B、</strong>为了简化持久化的操作，Spring提供了JDBC Template组件</p>
<p><strong>C、</strong>JDBC Template相对于JDBC API，代码更加复杂，因此不推荐使用JDBC Template</p>
<p><strong>D、</strong>JDBC API是在JDBC Template基础上完成的</p>
<p><strong>正确答案：</strong> <strong>B</strong></p>
<h4 id="示例数据库"><a href="#示例数据库" class="headerlink" title="示例数据库"></a>示例数据库</h4><h4 id="搭建项目"><a href="#搭建项目" class="headerlink" title="搭建项目"></a>搭建项目</h4><ul>
<li>Maven<ul>
<li>Mysql驱动</li>
<li>Spring组件（core、beans、context、aop）</li>
<li>JDBC Template（jdbc、tx）</li>
</ul>
</li>
</ul>
<ul>
<li>Spring配置<ul>
<li>数据源</li>
<li>JDBC Template</li>
</ul>
</li>
</ul>
<h3 id="JDBC-Template基本使用及持久化案例"><a href="#JDBC-Template基本使用及持久化案例" class="headerlink" title="JDBC Template基本使用及持久化案例"></a>JDBC Template基本使用及持久化案例</h3><h4 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h4><ul>
<li>execute方法 <ul>
<li>可以执行任何sql，但是在实际应用中，通常我们用于执行DDL语句，“我建个表，修改下表结构等等。。。”</li>
<li>所以在实际应用中用的并不多。</li>
</ul>
</li>
<li>update与batchUpdate方法<ul>
<li>用于执行新增、修改、删除等语句</li>
</ul>
</li>
<li>query与queryXXX方法<ul>
<li>用于执行查询相关语句。</li>
</ul>
</li>
<li>call方法<ul>
<li>用于执行存储过程、函数相关语句。</li>
</ul>
</li>
</ul>
<h4 id="单选题-1"><a href="#单选题-1" class="headerlink" title="单选题"></a>单选题</h4><p>在JDBCTemlate中，创建table的sql语句应该写到哪个方法中（选择一项）</p>
<p><strong>A</strong>execute()</p>
<p><strong>B</strong>update()</p>
<p><strong>C</strong>query()</p>
<p><strong>D</strong>batchUpdate()</p>
<p><strong>正确答案：</strong> <strong>A</strong></p>
<h4 id="update和batchUpdate"><a href="#update和batchUpdate" class="headerlink" title="update和batchUpdate"></a>update和batchUpdate</h4><ul>
<li>update方法<ul>
<li>对数据进行增删改操作</li>
</ul>
</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(String sql,Object[] args)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(String sql,Object... args)</span></span></span><br></pre></td></tr></tbody></table></figure></div>


<ul>
<li>batchUpdate方法<ul>
<li>批量增删改操作</li>
</ul>
</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] batchUpdate(String[] sql)</span><br><span class="line"><span class="keyword">int</span>[] batchUpdate(String sql,List&lt;Object[] args) <span class="comment">// 执行同构sql，向一个表插入多条记录</span></span><br></pre></td></tr></tbody></table></figure></div>


<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    {</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring.xml"</span>);</span><br><span class="line">         jdbcTemplate = (JdbcTemplate)context.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExecute</span><span class="params">()</span></span>{</span><br><span class="line">        jdbcTemplate.execute(<span class="string">"create table user1(id int,name varchar(20))"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// int update(String sql,Object[] args) 实例演示</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>{</span><br><span class="line">        String sql = <span class="string">"insert into student(name,sex) values(?,?)"</span>;</span><br><span class="line">        jdbcTemplate.update(sql,<span class="keyword">new</span> Object[]{<span class="string">"张飞"</span>,<span class="string">"男"</span>});</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// int update(String sql,Object... args) 实例演示</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate2</span><span class="params">()</span></span>{</span><br><span class="line">        String sql = <span class="string">"update student set sex=? where id=?"</span>;</span><br><span class="line">        jdbcTemplate.update(sql,<span class="string">"女"</span>,<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// int update(String sql,Object... args) 实例演示</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatchUpdate</span><span class="params">()</span></span>{</span><br><span class="line">        String[] sqls={</span><br><span class="line">            <span class="string">"insert into student(name,sex) values('关羽','男')"</span>,</span><br><span class="line">            <span class="string">"insert into student(name,sex) values('刘备','男')"</span>,</span><br><span class="line">                <span class="string">"update student set sex='女' where id=1"</span></span><br><span class="line">        };</span><br><span class="line">        jdbcTemplate.batchUpdate(sqls);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// int[] batchUpdate(String sql,List&lt;Object[] args) 实例演示</span></span><br><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatchUpdate2</span><span class="params">()</span></span>{</span><br><span class="line">        String sql = <span class="string">"insert into selection(student,course) values(?,?)"</span>;</span><br><span class="line">        List&lt;Object[]&gt; list = <span class="keyword">new</span> ArrayList&lt;Object[]&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Object[]{<span class="number">5</span>,<span class="number">1001</span>});</span><br><span class="line">        list.add(<span class="keyword">new</span> Object[]{<span class="number">5</span>,<span class="number">1003</span>});</span><br><span class="line">        jdbcTemplate.batchUpdate(sql,list);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<h4 id="单选题-2"><a href="#单选题-2" class="headerlink" title="单选题"></a>单选题</h4><p>使用JDBCTemplate对表内进行数据的插入，以下写法正确的是（）（选择一项）</p>
<p><strong>A</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">String sql = <span class="string">"insert into course(name,teacher) values(?,?)"</span>;</span><br><span class="line">jdbcTemplate.update(sql,<span class="keyword">new</span> Object[]{<span class="string">"大学物理"</span>，<span class="string">"胡老师"</span>});</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>B</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">String sql = <span class="string">"insert into course(name,teacher) values(?,?)"</span>;</span><br><span class="line">jdbcTemplate.execute(sql,<span class="keyword">new</span> Object[]{<span class="string">"大学物理"</span>，<span class="string">"胡老师"</span>});</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>C</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">String sql = <span class="string">"insert into course(name,teacher) values(?,?)"</span>;</span><br><span class="line">jdbcTemplate.execute(sql);</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>D</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">String sql = <span class="string">"insert into course(name,teacher) values(?,?)"</span>;</span><br><span class="line">jdbcTemplate.batchUpdate(sql);</span><br></pre></td></tr></tbody></table></figure></div>


<p><strong>正确答案：</strong> <strong>A</strong></p>
<h4 id="查询1"><a href="#查询1" class="headerlink" title="查询1"></a>查询1</h4><ul>
<li><p>查询简单数据项</p>
<ul>
<li>获取一个</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function">T <span class="title">queryForObject</span><span class="params">(String sql, Class&lt;T&gt; type)</span></span></span><br><span class="line"><span class="function">T <span class="title">queryForObject</span><span class="params">(String sql, Object[] args, Class&lt;T&gt; type)</span></span></span><br><span class="line"><span class="function">T <span class="title">queryForObject</span><span class="params">(String sql, Class&lt;T&gt; type, Object... arg)</span></span></span><br></pre></td></tr></tbody></table></figure></div>


<ul>
<li>获取多个</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function">List&lt;T&gt; <span class="title">queryForObject</span><span class="params">(String sql, Class&lt;T&gt; type)</span></span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">queryForObject</span><span class="params">(String sql, Object[] args, Class&lt;T&gt; type)</span></span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">queryForObject</span><span class="params">(String sql, Class&lt;T&gt; type, Object... arg)</span></span></span><br></pre></td></tr></tbody></table></figure></div>


</li>
</ul>
<ul>
<li><p>查询复杂对象（封装为Map）</p>
<ul>
<li>获取一个</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function">Map <span class="title">queryForObject</span><span class="params">(String sql)</span></span></span><br><span class="line"><span class="function">Map <span class="title">queryForObject</span><span class="params">(String sql, Object[] args)</span></span></span><br><span class="line"><span class="function">Map <span class="title">queryForObject</span><span class="params">(String sql, Object... arg)</span></span></span><br></pre></td></tr></tbody></table></figure></div>


<ul>
<li>获取多个</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;Map&lt;String,Object&gt;&gt; queryForObject(String sql)</span><br><span class="line">List&lt;Map&lt;String,Object&gt;&gt; queryForObject(String sql, Object[] args)</span><br><span class="line">List&lt;Map&lt;String,Object&gt;&gt; queryForObject(String sql, Object... arg)</span><br></pre></td></tr></tbody></table></figure></div>


</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.imooc.sc.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    {</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring.xml"</span>);</span><br><span class="line">         jdbcTemplate = (JdbcTemplate)context.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExecute</span><span class="params">()</span></span>{</span><br><span class="line">        jdbcTemplate.execute(<span class="string">"create table user1(id int,name varchar(20))"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// T queryForObject(String sql, Class&lt;T&gt; type) 查询一个对象实例演示</span></span><br><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuerySimple1</span><span class="params">()</span></span>{</span><br><span class="line">        String sql = <span class="string">"select count(*) from student"</span>;</span><br><span class="line">        <span class="keyword">int</span> count=jdbcTemplate.queryForObject(sql,Integer.class);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// List&lt;T&gt; queryForObject(String sql, Class&lt;T&gt; type) 查询复杂对象实例演示</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuerySimple2</span><span class="params">()</span></span>{</span><br><span class="line">        String sql = <span class="string">"select name from student where sex=?"</span>;</span><br><span class="line">        List&lt;String&gt; names = jdbcTemplate.queryForList(sql,String.class,<span class="string">"男"</span>);</span><br><span class="line">        System.out.println(names);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Map queryForObject(String sql) 查询一个对象实例演示</span></span><br><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryMap1</span><span class="params">()</span></span>{</span><br><span class="line">        String sql = <span class="string">"select * from student where id = ?"</span>;</span><br><span class="line">        Map&lt;String,Object&gt; stu = jdbcTemplate.queryForMap(sql,<span class="number">3</span>);</span><br><span class="line">        System.out.println(stu);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// List&lt;Map&lt;String,Object&gt;&gt; queryForObject(String sql) 查询复杂对象实例演示</span></span><br><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryMap2</span><span class="params">()</span></span>{</span><br><span class="line">        String sql = <span class="string">"select * from student"</span>;</span><br><span class="line">        List&lt;Map&lt;String,Object&gt;&gt; stus = jdbcTemplate.queryForList(sql);</span><br><span class="line">        System.out.println(stus);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<h4 id="查询2"><a href="#查询2" class="headerlink" title="查询2"></a>查询2</h4><ul>
<li><p>查询复杂对象（封装为实体对象）</p>
<ul>
<li>RowMapper接口</li>
<li>获取一个</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function">T <span class="title">queryForObject</span><span class="params">(String sql, RowMapper&lt;T&gt; mapper)</span></span></span><br><span class="line"><span class="function">T <span class="title">queryForObject</span><span class="params">(String sql, Object[] args, RowMapper&lt;T&gt; mapper)</span></span></span><br><span class="line"><span class="function">T <span class="title">queryForObject</span><span class="params">(String sql, RowMapper&lt;T&gt; mapper, Object... arg)</span></span></span><br></pre></td></tr></tbody></table></figure></div>


<ul>
<li>获取多个</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function">List&lt;T&gt; <span class="title">query</span><span class="params">(String sql, RowMapper&lt;T&gt; mapper)</span></span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">query</span><span class="params">(String sql, Object[] args, Class&lt;T&gt; mapper)</span></span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">query</span><span class="params">(String sql, RowMapper&lt;T&gt; mapper, Object... arg)</span></span></span><br></pre></td></tr></tbody></table></figure></div>


</li>
</ul>
<ul>
<li><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.imooc.sc.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    {</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring.xml"</span>);</span><br><span class="line">         jdbcTemplate = (JdbcTemplate)context.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExecute</span><span class="params">()</span></span>{</span><br><span class="line">        jdbcTemplate.execute(<span class="string">"create table user1(id int,name varchar(20))"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryEntity1</span><span class="params">()</span></span>{</span><br><span class="line">        String sql = <span class="string">"select * from student where id = ?"</span>;</span><br><span class="line">        Student stu = jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> RowMapper&lt;Student&gt;() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Student <span class="title">mapRow</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>{</span><br><span class="line">                Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">                stu.setId(resultSet.getInt(<span class="string">"id"</span>));</span><br><span class="line">                stu.setName(resultSet.getString(<span class="string">"name"</span>));</span><br><span class="line">                stu.setSex(resultSet.getString(<span class="string">"sex"</span>));</span><br><span class="line">                stu.setBorn(resultSet.getDate(<span class="string">"born"</span>));</span><br><span class="line">                <span class="keyword">return</span> stu;</span><br><span class="line">            }</span><br><span class="line">        }, <span class="number">4</span>);</span><br><span class="line">        System.out.println(stu);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryEntity2</span><span class="params">()</span></span>{</span><br><span class="line">        String sql = <span class="string">"select * from student"</span>;</span><br><span class="line">        List&lt;Student&gt; stus = jdbcTemplate.query(sql, <span class="keyword">new</span> RowMapper&lt;Student&gt;() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Student <span class="title">mapRow</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>{</span><br><span class="line">                Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">                stu.setId(resultSet.getInt(<span class="string">"id"</span>));</span><br><span class="line">                stu.setName(resultSet.getString(<span class="string">"name"</span>));</span><br><span class="line">                stu.setSex(resultSet.getString(<span class="string">"sex"</span>));</span><br><span class="line">                stu.setBorn(resultSet.getDate(<span class="string">"born"</span>));</span><br><span class="line">                <span class="keyword">return</span> stu;</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        System.out.println(stus);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 优化匿名内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentRowMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">Student</span>&gt;</span>{</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Student <span class="title">mapRow</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>{</span><br><span class="line">            Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">            stu.setId(resultSet.getInt(<span class="string">"id"</span>));</span><br><span class="line">            stu.setName(resultSet.getString(<span class="string">"name"</span>));</span><br><span class="line">            stu.setSex(resultSet.getString(<span class="string">"sex"</span>));</span><br><span class="line">            stu.setBorn(resultSet.getDate(<span class="string">"born"</span>));</span><br><span class="line">            <span class="keyword">return</span> stu;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryEntity3</span><span class="params">()</span></span>{</span><br><span class="line">        String sql = <span class="string">"select * from student where id = ?"</span>;</span><br><span class="line">        Student stu = jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> StudentRowMapper() {}, <span class="number">4</span>); <span class="comment">// 直接new StudentRowMapper()</span></span><br><span class="line">        System.out.println(stu);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryEntity4</span><span class="params">()</span></span>{</span><br><span class="line">        String sql = <span class="string">"select * from student"</span>;</span><br><span class="line">        List&lt;Student&gt; stus = jdbcTemplate.query(sql, <span class="keyword">new</span> StudentRowMapper() {}); <span class="comment">// 直接new StudentRowMapper()</span></span><br><span class="line">        System.out.println(stus);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


</li>
</ul>
<h4 id="单选题-3"><a href="#单选题-3" class="headerlink" title="单选题"></a>单选题</h4><p>在JDBC Template中，查询复杂对象时，获取单条查询结果，可以使用下面哪个方法，是错误的（选择一项）</p>
<p><strong>A、</strong>T queryForObject(String sql,RowMapper<t> mapper)</t></p>
<p><strong>B、</strong>T queryForObject(String sql,Object[] args,RowMapper<t> mapper)</t></p>
<p><strong>C、</strong>T queryForObject(String sql,Object… args,RowMapper<t> mapper)</t></p>
<p><strong>D、</strong>T queryForObject(String sql,RowMapper<t> mapper ,Object… args)</t></p>
<p><strong>正确答案：</strong> <strong>C</strong></p>
<h4 id="持久层实现——StudentDAO和CourseDAO"><a href="#持久层实现——StudentDAO和CourseDAO" class="headerlink" title="持久层实现——StudentDAO和CourseDAO"></a>持久层实现——StudentDAO和CourseDAO</h4><ul>
<li>实体类</li>
<li>DAO<ul>
<li>注入JDBCTemplate</li>
<li>声明JDBCTemplate</li>
</ul>
</li>
</ul>
<h4 id="持久层实现——SelectionDAO"><a href="#持久层实现——SelectionDAO" class="headerlink" title="持久层实现——SelectionDAO"></a>持久层实现——SelectionDAO</h4><h3 id="JDBCTemplate的优缺点分析"><a href="#JDBCTemplate的优缺点分析" class="headerlink" title="JDBCTemplate的优缺点分析"></a>JDBCTemplate的优缺点分析</h3><h4 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h4><ul>
<li><p>优点：</p>
<ul>
<li>简单</li>
<li>灵活</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>SQL与Java代码掺杂</li>
<li>功能不丰富</li>
</ul>
</li>
</ul>
<ul>
<li>持久化操作特点<ul>
<li>必须</li>
<li>机械性</li>
<li>ORM<ul>
<li>对象 - 关系 - 映射</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>JDBCTemplate是Spring框架对JDBC操作的封装，简单、灵活但不够强大。</li>
<li>实际应用中还需要和其它ORM框架混合使用。</li>
</ul>
<h4 id="多选题"><a href="#多选题" class="headerlink" title="多选题"></a>多选题</h4><p>以下关于JDBCTemplate的说法正确的是（）（选择两项）</p>
<p><strong>A、</strong>JDBCTemplate相对于JDBC更加的简便，代码量更少</p>
<p><strong>B、</strong>能够完整的将sql和Java代码分离开</p>
<p><strong>C、</strong>Sql和Java代码掺杂，要求较高</p>
<p><strong>D、</strong>JDBCTemplate相对于JDBC更加的复杂，增大了代码量</p>
<p><strong>正确答案：</strong> <strong>A,C</strong></p>
</body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JavaSpring4.1.6 Spring事务管理</title>
    <url>/posts/3496803191/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>Spring的概述</li>
<li>Spring的入门</li>
</ul>
<a id="more"></a>

<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h4><h4 id="数据库表结构"><a href="#数据库表结构" class="headerlink" title="数据库表结构"></a>数据库表结构</h4><h4 id="事务概念"><a href="#事务概念" class="headerlink" title="事务概念"></a>事务概念</h4><ul>
<li>概念：<ul>
<li>事务一般特指数据库事务（DatabaseTransaction），是指作为一个程序执行单元执行的一系列操作，要么完全执行，要么完全不执行。</li>
</ul>
</li>
<li>事务特性<ul>
<li>原子性（atomicity）<ul>
<li>结构上保证事务只有两种状态。</li>
<li>一个事务是一个不可分割的工作单位。</li>
</ul>
</li>
<li>一致性（consistency）<ul>
<li>业务上保证事务是合理的。</li>
<li>事务必须是使数据库从一个一致性状态变到另一个一致性状态。</li>
</ul>
</li>
<li>隔离性（isolation）<ul>
<li>并发的时候，业务是不能相互干扰的。</li>
<li>一个事务的执行不能被其他事务干扰。</li>
</ul>
</li>
<li>持久性（durability）<ul>
<li>一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="MySQL事务处理"><a href="#MySQL事务处理" class="headerlink" title="MySQL事务处理"></a>MySQL事务处理</h3><h4 id="Mysql事务处理-基本语句"><a href="#Mysql事务处理-基本语句" class="headerlink" title="Mysql事务处理-基本语句"></a>Mysql事务处理-基本语句</h4><ul>
<li><p>基本规则</p>
<ul>
<li>MySQL中只有使用了Innodb数据库引擎的数据库或表才支持事务。<ul>
<li>show engines；–查看服务器支持的引擎。</li>
<li>default-storage-engine = Innodb –my.ini修改默认引擎</li>
</ul>
</li>
<li>MySQL默认以自动提交（autocommit）模式运行。</li>
</ul>
</li>
<li><p>语句</p>
<ul>
<li>BEGIN（STARTTRANSACTION）<ul>
<li>显式地开启一个事务</li>
</ul>
</li>
<li>COMMIT<ul>
<li>提交事务，并使已对数据库进行的所有修改改变为永久性的。</li>
</ul>
</li>
<li>ROLLBACK<ul>
<li>回滚事务，并撤销正在进行的所有为提交的修改。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Mysql事务处理-并发问题"><a href="#Mysql事务处理-并发问题" class="headerlink" title="Mysql事务处理-并发问题"></a>Mysql事务处理-并发问题</h4><ul>
<li>脏读。<ul>
<li>解决方案：增加限制–只能读取永久数据，不能读取内存数据。</li>
</ul>
</li>
<li>不可重复读。<ul>
<li>解决方案：锁行</li>
</ul>
</li>
<li>幻读<ul>
<li>解决方案：锁表</li>
</ul>
</li>
</ul>
<h4 id="Mysql事务处理-事务隔离级别"><a href="#Mysql事务处理-事务隔离级别" class="headerlink" title="Mysql事务处理-事务隔离级别"></a>Mysql事务处理-事务隔离级别</h4><table>
<thead>
<tr>
<th align="center">事务隔离级别</th>
<th align="center">脏读</th>
<th align="center">不可重复读</th>
<th align="center">幻读</th>
</tr>
</thead>
<tbody><tr>
<td align="center">读未递交（read  uncommitted）</td>
<td align="center">✔</td>
<td align="center">✔</td>
<td align="center">✔</td>
</tr>
<tr>
<td align="center">读已递交（read  committed）</td>
<td align="center">✖</td>
<td align="center">✔</td>
<td align="center">✔</td>
</tr>
<tr>
<td align="center">可重复读（repeatable  read）</td>
<td align="center">✖</td>
<td align="center">✖</td>
<td align="center">✔</td>
</tr>
<tr>
<td align="center">串行化（serizlizable）</td>
<td align="center">✖</td>
<td align="center">✖</td>
<td align="center">✖</td>
</tr>
</tbody></table>
<p>语句</p>
<ul>
<li>select @@tx_isolation<ul>
<li>查询默认隔离级别</li>
</ul>
</li>
<li>set session transaction isolation level XXX<ul>
<li>设置当前会话隔离级别</li>
</ul>
</li>
</ul>
<h3 id="JDBC事务处理"><a href="#JDBC事务处理" class="headerlink" title="JDBC事务处理"></a>JDBC事务处理</h3><h4 id="JDBC事务处理-基本语句"><a href="#JDBC事务处理-基本语句" class="headerlink" title="JDBC事务处理-基本语句"></a>JDBC事务处理-基本语句</h4><ul>
<li>Connection接口<ul>
<li>JDBC的事务处理是基于Connection的，JDBC通过Connection对象进行事务管理。</li>
<li>JDBC默认事务处理行为是自动提交。</li>
</ul>
</li>
<li>事务相关方法<ul>
<li>setAutoCommit<ul>
<li>设置自动提交</li>
</ul>
</li>
<li>commit<ul>
<li>提交事务</li>
</ul>
</li>
<li>rollback<ul>
<li>回滚事务</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="JDBC事务处理-事务隔离级别"><a href="#JDBC事务处理-事务隔离级别" class="headerlink" title="JDBC事务处理-事务隔离级别"></a>JDBC事务处理-事务隔离级别</h4><ul>
<li><p><strong>隔离级别：</strong></p>
<ul>
<li>TRANSACTINO_NONE（不支持事务）</li>
<li>TRANSACTION_READ_UNCOMMITTED</li>
<li>TRANSACTION_READ_COMMITTED</li>
<li>TRANSACTION_REPEATABLE_READ</li>
<li>TRANSACTION_SERIALIZABLE</li>
</ul>
</li>
<li><p><strong>事务隔离级别设置：</strong></p>
<ul>
<li>getTransactionIsolation 获取当前隔离级别</li>
<li>setTransactionIsolation</li>
</ul>
</li>
</ul>
<h3 id="Spring事务处理"><a href="#Spring事务处理" class="headerlink" title="Spring事务处理"></a>Spring事务处理</h3><h4 id="Spring事务处理-基本概念"><a href="#Spring事务处理-基本概念" class="headerlink" title="Spring事务处理 - 基本概念"></a>Spring事务处理 - 基本概念</h4><ul>
<li>隔离级别：<ul>
<li>ISOLATION_DEFAULT（使用数据库默认）</li>
<li>ISOLATION_READ_UNCOMMITTED</li>
<li>ISOLATINO_READ_COMMITTED</li>
<li>ISOLATION_REPEATABLE_READ</li>
<li>ISOLATION_SERIALIZABLE</li>
</ul>
</li>
</ul>
<p>默认超时：</p>
<ul>
<li>TIMEOUT_DEFAULT 默认30秒</li>
</ul>
<p>事务传播行为：</p>
<ul>
<li>PROPAGATION_REQUIRED  支持当前事务，如果当前没有事务，就新建一个事务。</li>
<li>PROPAGATION_SUPPORTS  支持当前事务，如果当前没有事务，就以非事务方式执行。</li>
<li>PROPAGATION_MANDATORY  支持当前事务，如果当前没有事务，就抛出异常。</li>
<li>PROPAGATION_REQUIRES_NEW  新建事务，如果当前存在事务，把当前事务挂起。</li>
<li>PROPAGATION_NOT_SUPPORTED  以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li>
<li>PROPAGATION_NEVER  以非事务方式执行，如果当前存在事务，则抛出异常。</li>
<li>PROPAGATION_NESTED  如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，就新建一个事务。</li>
</ul>
<h4 id="Spring事务处理-准备"><a href="#Spring事务处理-准备" class="headerlink" title="Spring事务处理 - 准备"></a>Spring事务处理 - 准备</h4><p>业务功能是多步时，希望以事务的方式把它设置为原子性。</p>
<p>在业务层封装事务才是最合理的。</p>
<h4 id="Spring事务处理-基于底层API"><a href="#Spring事务处理-基于底层API" class="headerlink" title="Spring事务处理 - 基于底层API"></a>Spring事务处理 - 基于底层API</h4><p>Spring编程式事务处理 – 方法一：</p>
<ul>
<li>PlatformTransactionManager</li>
<li>TransactionDefinition</li>
<li>TransactionStatus</li>
</ul>
<h4 id="Spring事务处理-基于TransactionTemplate"><a href="#Spring事务处理-基于TransactionTemplate" class="headerlink" title="Spring事务处理-基于TransactionTemplate"></a>Spring事务处理-基于TransactionTemplate</h4><p>Spring编程式事务处理–方法二：</p>
<ul>
<li>基于TransactionTemplate的编程式事务管理<ul>
<li>TransactionTemplate</li>
</ul>
</li>
</ul>
<h4 id="Spring事务处理-基于拦截器"><a href="#Spring事务处理-基于拦截器" class="headerlink" title="Spring事务处理-基于拦截器"></a>Spring事务处理-基于拦截器</h4><h4 id="Spring事务处理-简化拦截器"><a href="#Spring事务处理-简化拦截器" class="headerlink" title="Spring事务处理-简化拦截器"></a>Spring事务处理-简化拦截器</h4><h4 id="Spring事务处理-基于tx命名空间"><a href="#Spring事务处理-基于tx命名空间" class="headerlink" title="Spring事务处理-基于tx命名空间"></a>Spring事务处理-基于tx命名空间</h4><h4 id="Spring事务处理-基于注解-Transactional"><a href="#Spring事务处理-基于注解-Transactional" class="headerlink" title="Spring事务处理-基于注解@Transactional"></a>Spring事务处理-基于注解@Transactional</h4><p>关于配置与注解</p>
<ul>
<li>配置<ul>
<li>非Java代码</li>
<li>便于后期维护</li>
</ul>
</li>
<li>注解<ul>
<li>灵活、精简</li>
</ul>
</li>
<li>应用场合<ul>
<li>一处配置与多处注解时，可以优先考虑配置，如Spring事务</li>
<li>代码精简</li>
<li>注解需要复杂的非Java代码时，可以优先考虑配置。</li>
</ul>
</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JavaSpring4.2.1 Spring MVC</title>
    <url>/posts/3143609333/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>Spring的概述</li>
<li>Spring的入门</li>
</ul>
<a id="more"></a>

<h3 id="Spring-MVC初体验"><a href="#Spring-MVC初体验" class="headerlink" title="Spring MVC初体验"></a>Spring MVC初体验</h3><h4 id="Spring-MVC介绍"><a href="#Spring-MVC介绍" class="headerlink" title="Spring MVC介绍"></a>Spring MVC介绍</h4><p>什么是MVC</p>
<p>MVC是架构模式（强调，不是设计模式），</p>
<p>View（视图）：前端视图交互界面</p>
<p>Controller（控制器）：接收视图界面所传入的数据，根据数据请求调用后端业务逻辑，得到结果，通过控制器再将得到的结果返回到视图中。</p>
<p>Model（模型）：后端数业务逻辑及相关数据部分。</p>
<ul>
<li>Spring MVC是Spring体系的轻量级Web MVC框架。</li>
<li>Spring MVC的核心Controller控制器，用于处理请求，产生响应。这样做可以是前端界面与后端逻辑数据有效解耦，极大的提高了程序的可维护性。</li>
<li>Spring MVC 基于Spring IOC容器运行，所有对象被IOC管理。</li>
</ul>
<p>Spring 5.x 版本变化</p>
<ul>
<li>Spring 5.x 最低要求JDK8与J2EE 7(Servlet 3.1 / Tomcat 8.5 + )</li>
<li>Spring 5.x 支持JDK8/9，可以使用新特新。</li>
<li>Spring 5.x 最重要的新特征支持响应式编程。</li>
</ul>
<p>Spring官网: Spring.io</p>
<h4 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a>单选题</h4><p>下面关于springMVC说法不正确的是：（选一项）</p>
<p><strong>A、</strong>MVC是一种设计模式</p>
<p><strong>B、</strong>Spring MVC的核心Controller控制器,可以用来分发请求和响应</p>
<p><strong>C、</strong>Spring MVC基于Spring IOC容器运行,所有对象被IOC管理</p>
<p><strong>D、</strong>MVC分别指的是Model 模型层，View 视图层和Controller 控制器</p>
<p><strong>正确答案：</strong> <strong>A</strong></p>
<h4 id="IDEA环境下创建Maven-WebApp"><a href="#IDEA环境下创建Maven-WebApp" class="headerlink" title="IDEA环境下创建Maven WebApp"></a>IDEA环境下创建Maven WebApp</h4><h4 id="SpringMVC环境配置-1"><a href="#SpringMVC环境配置-1" class="headerlink" title="SpringMVC环境配置-1"></a>SpringMVC环境配置-1</h4><ul>
<li>Maven依赖spring-webmvc</li>
<li>web.xml配置DispatcherServlet</li>
<li>配置applicationContext的mvc标记</li>
<li>开发Controller控制器</li>
</ul>
<h4 id="1-5-SpringMVC环境配置-2-（18-13）"><a href="#1-5-SpringMVC环境配置-2-（18-13）" class="headerlink" title="1-5 SpringMVC环境配置-2 （18:13）"></a>1-5 SpringMVC环境配置-2 （18:13）</h4><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h5 id="单选题-1"><a href="#单选题-1" class="headerlink" title="单选题"></a>单选题</h5><p>以下关于springMVC配置说法错误的是（）（选一项）</p>
<p><strong>A、</strong>需要在pom.xml 中引入spring-webmvc的依赖包</p>
<p><strong>B、</strong>需要在web.xml中配置DispatcherServlet的映射</p>
<p><strong>C、</strong><load-on-s tartup="">0&lt;/ load- on- startup&gt;是配置中的必需项</load-on-s></p>
<p><strong>D、</strong>applicationContext.xml 中&lt;mvc: annotation-driven/ &gt;是为了启用Spring MVC的注解开发模式</p>
<p><strong>正确答案：</strong> <strong>C</strong></p>
<h3 id="Spring-MVC数据绑定"><a href="#Spring-MVC数据绑定" class="headerlink" title="Spring MVC数据绑定"></a>Spring MVC数据绑定</h3><h4 id="URL-Mapping-URL映射"><a href="#URL-Mapping-URL映射" class="headerlink" title="URL Mapping(URL映射)"></a>URL Mapping(URL映射)</h4><ul>
<li>URL Mapping指将URL与Controller方法绑定。</li>
<li>通过将URL与方法绑定，SpringMVC便可通过TomCat对外暴露服务。<ul>
<li>可以这么理解，所有对外暴露的接口都是URL的网址，我们通过URL执行后端程序代码</li>
</ul>
</li>
</ul>
<p><strong>URL Mapping注解</strong></p>
<ul>
<li>@RequestMapping    通用绑定</li>
<li>@GetMapping    绑定Get请求</li>
<li>@PostMapping    绑定Post请求</li>
</ul>
<h4 id="单选题-2"><a href="#单选题-2" class="headerlink" title="单选题"></a>单选题</h4><p>以下注解不属于URL Mapping注解的是（）（选一项）</p>
<p><strong>A、</strong>@RequestMapping</p>
<p><strong>B、</strong>@GetMapping</p>
<p><strong>C、</strong>@PostMapping</p>
<p><strong>D、</strong>@Component</p>
<p>正确答案：D</p>
<h4 id="Controller方法参数接收请求参数"><a href="#Controller方法参数接收请求参数" class="headerlink" title="Controller方法参数接收请求参数"></a>Controller方法参数接收请求参数</h4><p>接收请求参数的常用做法：</p>
<ul>
<li>使用Controller方法参数接收</li>
<li>使用Java Bean接收数据</li>
</ul>
<h4 id="Controller实体对象接收请求参数"><a href="#Controller实体对象接收请求参数" class="headerlink" title="Controller实体对象接收请求参数"></a>Controller实体对象接收请求参数</h4><h4 id="编程练习（自由编程）"><a href="#编程练习（自由编程）" class="headerlink" title="编程练习（自由编程）"></a>编程练习（自由编程）</h4><h4 id="接收表单复合数据（上）"><a href="#接收表单复合数据（上）" class="headerlink" title="接收表单复合数据（上）"></a>接收表单复合数据（上）</h4><ul>
<li>利用数组或者List接收请求中的复合数据</li>
<li>利用@RequestParam为参数设置默认值</li>
<li>使用Map对象接收请求参数及注意事项</li>
</ul>
<p><strong>URI绝对路径与相对路径：</strong></p>
<h4 id="接收表单复合数据（下）"><a href="#接收表单复合数据（下）" class="headerlink" title="接收表单复合数据（下）"></a>接收表单复合数据（下）</h4><p>接收组合数据用List，并且前面需要加注解@RequestParam</p>
<h4 id="关联对象赋值"><a href="#关联对象赋值" class="headerlink" title="关联对象赋值"></a>关联对象赋值</h4><h4 id="日期类型转换"><a href="#日期类型转换" class="headerlink" title="日期类型转换"></a>日期类型转换</h4><h3 id="中文乱码问题解决"><a href="#中文乱码问题解决" class="headerlink" title="中文乱码问题解决"></a>中文乱码问题解决</h3><h4 id="解决请求中的中文乱码"><a href="#解决请求中的中文乱码" class="headerlink" title="解决请求中的中文乱码"></a>解决请求中的中文乱码</h4><h4 id="解决响应中的中文乱码"><a href="#解决响应中的中文乱码" class="headerlink" title="解决响应中的中文乱码"></a>解决响应中的中文乱码</h4><p>Web应用中的乱码由来</p>
<ul>
<li>Tomcat默认使用字符集ISO-8859-1，属于西欧字符集。</li>
<li>解决乱码的核心思路是将ISO-8859-1转换为UTF-8。</li>
<li>Controller中请求与响应都需要设置UTF-8字符集。</li>
</ul>
<p>中文乱码的配置</p>
<ul>
<li>Get请求乱码 - server.xml增加URIEncoding属性。</li>
<li>Post请求乱码 - web.xml配置CharacterEncodingFilter</li>
<li>Response响应乱码 - Spring配置StringHttpMessageConverter</li>
</ul>
<h3 id="响应输出"><a href="#响应输出" class="headerlink" title="响应输出"></a>响应输出</h3><h4 id="响应输出结果"><a href="#响应输出结果" class="headerlink" title="响应输出结果"></a>响应输出结果</h4><ul>
<li>@ResponseBody - 产生响应文本。</li>
<li>ModelAndView - 利用模板引擎渲染输出。</li>
</ul>
<p>@ResponseBody</p>
<ul>
<li>@ResponseBody直接产生响应体的数据，过程不涉及任何视图。</li>
<li>@ResponseBody可产生标准字符串/JSON/XML等格式数据。</li>
<li>@ResponseBody被StringHttpMessageConverter所影响。</li>
</ul>
<p>ModelAndView</p>
<ul>
<li>ModelAndView对象是指“模型（数据）与视图（界面）”对象。</li>
<li>通过ModelAndView可将包含数据对象与模板引擎进行绑定。</li>
<li>SpringMVC中默认的View是JSP，也可以配置其他模板引擎。</li>
</ul>
<h3 id="ModelAndView对象核心用法"><a href="#ModelAndView对象核心用法" class="headerlink" title="ModelAndView对象核心用法"></a>ModelAndView对象核心用法</h3><h4 id="ModelAndView对象核心用法-1"><a href="#ModelAndView对象核心用法-1" class="headerlink" title="ModelAndView对象核心用法"></a>ModelAndView对象核心用法</h4><ul>
<li>mav.addObject()方法设置的属性默认存放在当前请求中。</li>
<li>默认ModelAndView使用请求转发（forward）至页面</li>
<li>重定向使用 new ModelAndView ( “redirect:/index.jsp” )</li>
</ul>
<h4 id="编程练习（自由编程）-1"><a href="#编程练习（自由编程）-1" class="headerlink" title="编程练习（自由编程）"></a>编程练习（自由编程）</h4><h3 id="Spring-MVC整合FreeMarker"><a href="#Spring-MVC整合FreeMarker" class="headerlink" title="Spring MVC整合FreeMarker"></a>Spring MVC整合FreeMarker</h3><h4 id="SpringMVC整合Freemarker"><a href="#SpringMVC整合Freemarker" class="headerlink" title="SpringMVC整合Freemarker"></a>SpringMVC整合Freemarker</h4></body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JavaSpring4.1.7 项目：人员管理系统开发</title>
    <url>/posts/3126862922/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>Spring的概述</li>
<li>Spring的入门</li>
</ul>
<a id="more"></a>

<p>项目实现时，先考虑数据库设计</p>
<ul>
<li>工具类<ul>
<li>编码过滤器</li>
<li>核心控制器<ul>
<li>Servlet对象由Web容器管理、Service对象由IOC容器管理</li>
</ul>
</li>
</ul>
</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JavaSpring4.2.2 RESTful开发风格</title>
    <url>/posts/1007768909/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>Spring的概述</li>
<li>Spring的入门</li>
</ul>
<a id="more"></a>

<h3 id="开发第一个Restful应用"><a href="#开发第一个Restful应用" class="headerlink" title="开发第一个Restful应用"></a>开发第一个Restful应用</h3><h4 id="RESTful开发风格"><a href="#RESTful开发风格" class="headerlink" title="RESTful开发风格"></a>RESTful开发风格</h4><p>REST与RESTful</p>
<ul>
<li>REST - 是一种理念。表现层状态转换，资源在网络中以某种变现形式进行状态转移。</li>
<li>RESTful是基于REST理念的一套开发风格，是具体的开发规则。</li>
</ul>
<p>RESTful传输数据可以达到前后端分离。</p>
<p><strong>RESTful开发规范</strong></p>
<ul>
<li>使用URL作为用户交互入口。</li>
<li>明确的语义规范（ GET | POST | PUT | DELETE ）<ul>
<li>GET查询操作</li>
<li>POST新增操作</li>
<li>PUT更新操作</li>
<li>DELETE删除操作</li>
</ul>
</li>
<li>只返回数据（JSON | XML），不包含任何展现<ul>
<li>推荐使用JSON，因为JSON无论是可读性还是解析的角度，都要比XML简单的多，JSON天然被JavaScript支持，XML使用则要引入很多组件。</li>
</ul>
</li>
</ul>
<p><strong>RESTful命名要求</strong></p>
<table>
<thead>
<tr>
<th align="center">URI</th>
<th align="center">说明</th>
<th align="center">修改建议</th>
</tr>
</thead>
<tbody><tr>
<td align="center">GET/articles?au=lily</td>
<td align="center">正确用法</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">GET/a/1</td>
<td align="center">URI必须具有语义</td>
<td align="center">GET/student/1</td>
</tr>
<tr>
<td align="center">POST/createArticle/1</td>
<td align="center">URI必须使用名词</td>
<td align="center">POST/article/1</td>
</tr>
<tr>
<td align="center">GET/articles/author/1</td>
<td align="center">URI扁平化，不超过两级</td>
<td align="center">GET/articles/author?id=1</td>
</tr>
<tr>
<td align="center">DELETE/articles/1</td>
<td align="center">URI名词区分单复数</td>
<td align="center">GET/articles?au=lilyDELETE/article/1</td>
</tr>
</tbody></table>
<h4 id="开发第一个RESTful应用"><a href="#开发第一个RESTful应用" class="headerlink" title="开发第一个RESTful应用"></a>开发第一个RESTful应用</h4><h3 id="Restful基本使用"><a href="#Restful基本使用" class="headerlink" title="Restful基本使用"></a>Restful基本使用</h3><h4 id="2-1-实现RESTful实验室"><a href="#2-1-实现RESTful实验室" class="headerlink" title="2-1 实现RESTful实验室"></a>2-1 实现RESTful实验室</h4><h4 id="RestController注解与路径变量"><a href="#RestController注解与路径变量" class="headerlink" title="RestController注解与路径变量"></a>RestController注解与路径变量</h4><p>@RestController当前方法返回的都是rest数据而不是页面的跳转</p>
<h4 id="简单请求与非简单请求"><a href="#简单请求与非简单请求" class="headerlink" title="简单请求与非简单请求"></a>简单请求与非简单请求</h4><ul>
<li>简单请求是指标准结构的HTTP请求，对应GET/POST请求。</li>
<li>非简单请求是复杂要求的HTTP请求，指PUT/DELETE、扩展标准请求。</li>
<li>两者最大区别是非简单请求发送前需要发送预检请求。</li>
</ul>
<h4 id="JSON序列化"><a href="#JSON序列化" class="headerlink" title="JSON序列化"></a>JSON序列化</h4><h3 id="第3章-跨域问题"><a href="#第3章-跨域问题" class="headerlink" title="第3章 跨域问题"></a>第3章 跨域问题</h3><h4 id="浏览器的同源策略"><a href="#浏览器的同源策略" class="headerlink" title="浏览器的同源策略"></a>浏览器的同源策略</h4><ul>
<li>同源策略阻止从一个域加载的脚本去获取另一个域上的资源。</li>
<li>只要协议、域名、端口有任何一个不同，都被当作是不同的域</li>
<li>浏览器Console看到Access-Control-Allow-Origin就代表跨域了</li>
</ul>
<table>
<thead>
<tr>
<th align="center">源URL</th>
<th align="center">目标URL</th>
<th align="center">直接访问？</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="http://imooc.com/">http://imooc.com</a></td>
<td align="center"><a href="https://xxx.com:8080/test">https://xxx.com:8080/test</a></td>
<td align="center">不能</td>
</tr>
<tr>
<td align="center"><a href="http://imooc.com/">http://imooc.com</a></td>
<td align="center"><a href="https://imooc.com/">https://imooc.com</a></td>
<td align="center">不能</td>
</tr>
<tr>
<td align="center"><a href="http://imooc.com/">http://imooc.com</a></td>
<td align="center"><a href="http://abc.imooc.com/">http://abc.imooc.com</a></td>
<td align="center">不能</td>
</tr>
<tr>
<td align="center"><a href="http://imooc.com/">http://imooc.com</a></td>
<td align="center"><a href="http://imooc.com:8080/">http://imooc.com:8080</a></td>
<td align="center">不能</td>
</tr>
<tr>
<td align="center"><a href="http://localhost/">http://localhost</a></td>
<td align="center"><a href="http://127.0.0.1/">http://127.0.0.1</a></td>
<td align="center">不能</td>
</tr>
<tr>
<td align="center"><a href="http://imooc.com/">http://imooc.com</a></td>
<td align="center"><a href="http://imooc.com/user/test">http://imooc.com/user/test</a></td>
<td align="center">可以</td>
</tr>
</tbody></table>
<p>HTML中允许跨域的标签</p>
<ul>
<li><p><img> - 显示远程图片</p>
</li>
<li><script> - 加载远程JS
</li>
<li><link> - 加载远程CSS

</li>
</ul>
<h4 id="CrossOrigin注解解决跨域访问"><a href="#CrossOrigin注解解决跨域访问" class="headerlink" title="CrossOrigin注解解决跨域访问"></a>CrossOrigin注解解决跨域访问</h4><p>CORS跨域资源访问</p>
<ul>
<li>CORS是一种机制，使用额外的HTTP头通知浏览器可以访问其他域。</li>
<li>URL响应头包含Access-Control-*指明请求允许跨域。</li>
<li>@CrossOrigin - Controller 跨域注解。</li>
<li> &lt; mvc:cor &gt; - Spring MVC全局跨域配置。</li>
</ul>
<h4 id="CORS全局配置"><a href="#CORS全局配置" class="headerlink" title="CORS全局配置"></a>CORS全局配置</h4></script></li></ul></body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JavaSpring4.2.3 SpringMVC拦截器</title>
    <url>/posts/222992809/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>Spring的概述</li>
<li>Spring的入门</li>
</ul>
<a id="more"></a>

<h3 id="第1章-Interceptor拦截器入门及使用技巧"><a href="#第1章-Interceptor拦截器入门及使用技巧" class="headerlink" title="第1章 Interceptor拦截器入门及使用技巧"></a>第1章 Interceptor拦截器入门及使用技巧</h3><h4 id="Interceptor拦截器入门"><a href="#Interceptor拦截器入门" class="headerlink" title="Interceptor拦截器入门"></a>Interceptor拦截器入门</h4><ul>
<li>拦截器（Interceptor）用于对URL请求进行前置、后置过滤。</li>
<li>Interceptor与Filter用途相似，但实现方式不同。</li>
<li>Interceptor底层就是基于Spring AOP面向切面编程实现。</li>
</ul>
<p>拦截器开发流程</p>
<ul>
<li>Maven依赖servlet-api</li>
<li>实现Handlernterceptor接口</li>
<li>applicationContext配置过滤地址。</li>
</ul>
<p><strong>HandlerInterceptor接口</strong></p>
<ul>
<li>preHandle - 前置执行处理。</li>
<li>postHandle - 目标资源已被Spring MVC框架处理。</li>
<li>afterCompletion - 响应文本已经产生。</li>
</ul>
<h4 id="Interceptor使用技巧"><a href="#Interceptor使用技巧" class="headerlink" title="Interceptor使用技巧"></a>Interceptor使用技巧</h4><p>多个拦截器按照配置顺序执行，</p>
<h3 id="第2章-开发用户流量拦截器"><a href="#第2章-开发用户流量拦截器" class="headerlink" title="第2章 开发用户流量拦截器"></a>第2章 开发用户流量拦截器</h3><h4 id="开发用户流量拦截器-1"><a href="#开发用户流量拦截器-1" class="headerlink" title="开发用户流量拦截器-1"></a>开发用户流量拦截器-1</h4><h4 id="开发用户流量拦截器-2"><a href="#开发用户流量拦截器-2" class="headerlink" title="开发用户流量拦截器-2"></a>开发用户流量拦截器-2</h4><h3 id="第3章-Spring-MVC处理流程"><a href="#第3章-Spring-MVC处理流程" class="headerlink" title="第3章 Spring MVC处理流程"></a>第3章 Spring MVC处理流程</h3><h4 id="Spring-MVC处理流程"><a href="#Spring-MVC处理流程" class="headerlink" title="Spring MVC处理流程"></a>Spring MVC处理流程</h4></body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JavaSpring4.3.1 Spring Boot入门</title>
    <url>/posts/4151842779/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>Spring的概述</li>
<li>Spring的入门</li>
</ul>
<a id="more"></a>

<h3 id="第1章-课程概述"><a href="#第1章-课程概述" class="headerlink" title="第1章 课程概述"></a>第1章 课程概述</h3><h4 id="1-1-SpringBoot概述"><a href="#1-1-SpringBoot概述" class="headerlink" title="1-1 SpringBoot概述"></a>1-1 SpringBoot概述</h4><p><strong>课程介绍</strong></p>
<ul>
<li>介绍Spring Boot。</li>
<li>掌握Spring Boot应用的构建方法。</li>
<li>讲解Spring Boot执行流程与配置选项。</li>
</ul>
<p><strong>什么是Spring Boot</strong><br>让Spring应用开发变得“简单粗暴”</p>
<h4 id="1-2-SpringBoot应用开发流程及核心特性（07-30）"><a href="#1-2-SpringBoot应用开发流程及核心特性（07-30）" class="headerlink" title="1-2 SpringBoot应用开发流程及核心特性（07:30）"></a>1-2 SpringBoot应用开发流程及核心特性（07:30）</h4><p><strong>Spring应用开发流程</strong><br><img src="en-resource://database/6244:1" alt="a57f3f8d821c319a19978d4e3b5c9a99.png"></p>
<p><strong>Spring Boot应用开发流程</strong><br><img src="en-resource://database/6246:1" alt="87c128940eebd4d760deda7e5b277c94.png"></p>
<p><strong>Spring Boot核心特性</strong></p>
<ul>
<li>极低的学习成本。</li>
<li>可独立运行的Spring项目。</li>
<li>“习惯优于配置”，极大的提高了开发效率。</li>
<li>极简的组件依赖，自动发现与自动装配。</li>
<li>提供运行时的应用监控。</li>
<li>与分布式架构和云计算的天然集成。</li>
</ul>
<h3 id="第2章-Spring-Boot应用开发"><a href="#第2章-Spring-Boot应用开发" class="headerlink" title="第2章 Spring Boot应用开发"></a>第2章 Spring Boot应用开发</h3><h4 id="2-1-项目准备"><a href="#2-1-项目准备" class="headerlink" title="2-1 项目准备"></a>2-1 项目准备</h4><p><strong>环境准备</strong></p>
<ul>
<li>安装JDK 8 以上版本。</li>
<li>安装Intellij IDEA Ultimate（旗舰版）</li>
</ul>
<p><strong>Spring Boot目录结构</strong><br><img src="en-resource://database/6248:1" alt="c81338f962ceaf8806310a362261f222.png"></p>
<h4 id="2-2-选择练习"><a href="#2-2-选择练习" class="headerlink" title="2-2 选择练习"></a>2-2 选择练习</h4><p>单选题<br>通过maven构建Spring Boot项目，表示层页面（*.jsp等）存放到哪个目录下。（选择一项）</p>
<p>A/resources/static<br>B/resources/templates<br>C/resources/application.properties<br>D/java</p>
<p>正确答案： B 你的答案： B</p>
<h4 id="2-3-使用Maven构建Spring-Boot项目"><a href="#2-3-使用Maven构建Spring-Boot项目" class="headerlink" title="2-3 使用Maven构建Spring Boot项目"></a>2-3 使用Maven构建Spring Boot项目</h4><h4 id="2-4-选择练习"><a href="#2-4-选择练习" class="headerlink" title="2-4 选择练习"></a>2-4 选择练习</h4><p>单选题<br>SpringBoot应用的入口类应该在类名上方使用哪个注解。（选择一项）</p>
<p>A@SpringBootApplication<br>B@RequestMapping<br>C@ResponseBody<br>D@Controller</p>
<p>正确答案： A</p>
<h4 id="2-5-Spring-Initializr构建Spring-Boot应用"><a href="#2-5-Spring-Initializr构建Spring-Boot应用" class="headerlink" title="2-5 Spring Initializr构建Spring Boot应用"></a>2-5 Spring Initializr构建Spring Boot应用</h4><h3 id="第3章-Spring-Boot配置详解"><a href="#第3章-Spring-Boot配置详解" class="headerlink" title="第3章 Spring Boot配置详解"></a>第3章 Spring Boot配置详解</h3><h4 id="3-1-Spring-Boot启动流程与常用配置"><a href="#3-1-Spring-Boot启动流程与常用配置" class="headerlink" title="3-1 Spring Boot启动流程与常用配置"></a>3-1 Spring Boot启动流程与常用配置</h4><p><strong>Spring Boot入口类</strong></p>
<ul>
<li>入口类命名通常以   项目名+Application   结尾。</li>
<li>入口类上增加@SpringBootApplication注解。</li>
<li>利用SpringApplication.run()方法启动应用。</li>
</ul>
<p><strong>Spring Boot启动流程</strong><br><img src="en-resource://database/6250:1" alt="b4c6fa8dc0151d34aadd3b47cd0ebe0c.png"></p>
<p><strong>Spring Boot中的常用配置</strong><br><img src="en-resource://database/6252:1" alt="5ba48c110a748a6d9d1d9d5b25b4583b.png"></p>
<h4 id="3-2-选择练习"><a href="#3-2-选择练习" class="headerlink" title="3-2 选择练习"></a>3-2 选择练习</h4><p>单选题<br>以下关于SpringBoot入口类的编写规则说法错误的是（）（选择一项）</p>
<p>A入口类命名通常是以*Application结尾<br>B需要在入口类上增加@SpringBootApplication注解<br>C利用SpringApplication.run()方法启动应用<br>D利用SpringBootApplication.run()方法启动应用</p>
<p>正确答案： D</p>
<h4 id="3-3-Spring-Boot常用配置Demo"><a href="#3-3-Spring-Boot常用配置Demo" class="headerlink" title="3-3 Spring Boot常用配置Demo"></a>3-3 Spring Boot常用配置Demo</h4><h4 id="3-4-选择练习"><a href="#3-4-选择练习" class="headerlink" title="3-4 选择练习"></a>3-4 选择练习</h4><p>单选题<br>以下关于SpringBoot启动流程说法正确的是（）（选择一项）</p>
<p>A加载组件——自动装配——加载配置文件——应用初始化<br>B加载配置文件——加载组件——自动装配——应用初始化<br>C加载配置文件——自动装配——加载组件——应用初始化<br>D自动装配——加载配置文件——加载组件——应用初始化</p>
<p>正确答案： C</p>
<h4 id="3-5-SpringBoot配置文件及自定义配置项"><a href="#3-5-SpringBoot配置文件及自定义配置项" class="headerlink" title="3-5 SpringBoot配置文件及自定义配置项"></a>3-5 SpringBoot配置文件及自定义配置项</h4><p><strong>SpringBoot支持两种配置文件</strong></p>
<ul>
<li>属性文件：application.properties</li>
<li>YAML格式：application.yml</li>
</ul>
<p><strong>YAML语法</strong><br>YAML是一种简介的非标记语言。YAML以数据为中心，使用空白，缩进，分行组织数据，从而使得表示更加简洁易读。</p>
<p>YAML语法格式</p>
<ul>
<li>标准格式：key:(空格)value</li>
<li>使用空格代表层级关系，以“:”结束</li>
</ul>
<p><strong>SpringBoot自定义配置项</strong></p>
<p>Spring Boot允许我们自定义应用配置项，在程序运行时允许动态加载，这为程序提供了良好的可维护性。</p>
<p>在实际项目开发中，我们通常将项目的自定义信息放在配置文件中。</p>
<p><strong>环境配置文件</strong></p>
<ul>
<li>Spring Boot可针对不同的环境提供不同的Profile文件。</li>
<li>Profile文件的默认命名格式为application-{env}.yml</li>
<li>使用spring.profiles.active选项来指定不同的profile。</li>
</ul>
<h3 id="第4章-打包与运行"><a href="#第4章-打包与运行" class="headerlink" title="第4章 打包与运行"></a>第4章 打包与运行</h3><h4 id="4-1-打包与运行"><a href="#4-1-打包与运行" class="headerlink" title="4-1 打包与运行"></a>4-1 打包与运行</h4><ul>
<li>利用Maven的package命令，生成可独立运行的Jar包。</li>
<li>利用java -jar xxx.jar 命令启动Spring Boot应用。</li>
<li>Jar包可自动加载同目录的application配置文件。</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JavaSpring4.3.2 项目：校园商铺-项目准备</title>
    <url>/posts/2261132808/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>Spring的概述</li>
<li>Spring的入门</li>
</ul>
<a id="more"></a>

<h3 id="第1章-开发准备"><a href="#第1章-开发准备" class="headerlink" title="第1章 开发准备"></a>第1章 开发准备</h3><h4 id="1-1-课程导学-（05-30）"><a href="#1-1-课程导学-（05-30）" class="headerlink" title="1-1 课程导学 （05:30）"></a>1-1 课程导学 （05:30）</h4><p><strong>环境准备</strong></p>
<ul>
<li>JDK8</li>
<li>Maven3.3.9</li>
<li>MySQL5.5+</li>
<li>Chrome</li>
<li>Tomcat8</li>
<li>Eclipse/idea</li>
</ul>
<p><strong>课程安排</strong></p>
<ul>
<li>场景推动，从简设计实体类以及表。</li>
<li>按功能模块划分，从后往前一一道来。</li>
<li>串联各知识点，解决问题。</li>
</ul>
<p><strong>授课特点</strong></p>
<ul>
<li>总分总。</li>
<li>思路&amp;所需知识 –&gt; 实践 –&gt; 回顾思路&amp;要点 –&gt; 继续推进。</li>
</ul>
<h4 id="1-2-开发准备"><a href="#1-2-开发准备" class="headerlink" title="1-2 开发准备"></a>1-2 开发准备</h4><h3 id="第2章-表结构设计"><a href="#第2章-表结构设计" class="headerlink" title="第2章 表结构设计"></a>第2章 表结构设计</h3><h4 id="2-1-系统功能模块划分"><a href="#2-1-系统功能模块划分" class="headerlink" title="2-1 系统功能模块划分"></a>2-1 系统功能模块划分</h4><ul>
<li>明确各模块职责。</li>
<li>了解各模块所设计的对象。</li>
</ul>
<h4 id="2-2-实体类设计与表创建A"><a href="#2-2-实体类设计与表创建A" class="headerlink" title="2-2 实体类设计与表创建A"></a>2-2 实体类设计与表创建A</h4><p><img src="en-resource://database/6254:1" alt="0c6915fb987e179bc31e36258a70cbb2.png"></p>
<h4 id="2-3-实体类设计与表创建B"><a href="#2-3-实体类设计与表创建B" class="headerlink" title="2-3 实体类设计与表创建B"></a>2-3 实体类设计与表创建B</h4><h4 id="2-4-实体类设计与表创建C"><a href="#2-4-实体类设计与表创建C" class="headerlink" title="2-4 实体类设计与表创建C"></a>2-4 实体类设计与表创建C</h4><p><img src="en-resource://database/6256:1" alt="c82c1f02c5fa514723528833616e1e93.png"></p>
<h4 id="2-5-实体类设计与表创建D"><a href="#2-5-实体类设计与表创建D" class="headerlink" title="2-5 实体类设计与表创建D"></a>2-5 实体类设计与表创建D</h4><h4 id="2-6-实体类设计与表创建E"><a href="#2-6-实体类设计与表创建E" class="headerlink" title="2-6 实体类设计与表创建E"></a>2-6 实体类设计与表创建E</h4><h3 id="第3章-SSM框架搭建"><a href="#第3章-SSM框架搭建" class="headerlink" title="第3章 SSM框架搭建"></a>第3章 SSM框架搭建</h3><h4 id="3-1-配置Maven"><a href="#3-1-配置Maven" class="headerlink" title="3-1 配置Maven"></a>3-1 配置Maven</h4><h4 id="逐层完成SSM的各项配置"><a href="#逐层完成SSM的各项配置" class="headerlink" title="逐层完成SSM的各项配置"></a>逐层完成SSM的各项配置</h4><ol>
<li>pom.xml（o2o/pom.xml）指定工程所依赖jar包。</li>
<li>jdbc.properties（o2o/src/main/resources/jdbc.properties）指定数据库连接方式。</li>
<li>mybatis-config.xml（）配置mybatis连接方式。</li>
<li>spring-dao.xml（）<ol>
<li>将jdbc.properties和mybatis-config.xml加载进来。</li>
<li>创建dataSource连接池。</li>
<li>配置mybatis与数据库连接方式。</li>
</ol>
</li>
<li>spring-service.xml<ol>
<li>事物管理。将spring-dao里面配置好的dataSource注入到事务管理器里面，便于service层做操作。</li>
</ol>
</li>
<li>spring-web.xml<ol>
<li>主要是定义了DispatcherServlet如何去响应我们的URL的请求，就是定义controller行为。</li>
</ol>
</li>
<li>web.xml<ol>
<li>将spring-dispatcher作为servlet注册到里面去，来响应前端请求同时将spring-*.xml文件注册整合到了里面。</li>
</ol>
</li>
</ol>
<h4 id="验证Dao"><a href="#验证Dao" class="headerlink" title="验证Dao"></a>验证Dao</h4><h4 id="验证sevice"><a href="#验证sevice" class="headerlink" title="验证sevice"></a>验证sevice</h4><h4 id="验证controller"><a href="#验证controller" class="headerlink" title="验证controller"></a>验证controller</h4><h3 id="Logback配置与使用"><a href="#Logback配置与使用" class="headerlink" title="Logback配置与使用"></a>Logback配置与使用</h3><h4 id="logback介绍"><a href="#logback介绍" class="headerlink" title="logback介绍"></a>logback介绍</h4><ul>
<li>logback-access<ul>
<li>这个模块与sevlet容器集成，提供通过http来访问日志的功能。第三方应用可以通过logback-access模块访问到loback提供的日志。</li>
</ul>
</li>
<li>logback-classic<ul>
<li>log4j的改良版本，同时完成实现了sl4jAPI，实现了可以轻松更换成其他日志系统。</li>
</ul>
</li>
<li>logback-core<ul>
<li>为前两个模块提供了基础的服务。</li>
</ul>
</li>
</ul>
<p><strong>标签</strong></p>
<ul>
<li>logger<ul>
<li>作为日志记录器，主要存放对象，可以定义日志类型与级别等。</li>
</ul>
</li>
<li>appender<ul>
<li>指定日志输出媒介（控制台、文件或远程套件服务器等…）</li>
</ul>
</li>
<li>layout<ul>
<li>格式化日志输出。</li>
</ul>
</li>
</ul>
<h4 id="logback的配置"><a href="#logback的配置" class="headerlink" title="logback的配置"></a>logback的配置</h4><h4 id="logback配置的验证"><a href="#logback配置的验证" class="headerlink" title="logback配置的验证"></a>logback配置的验证</h4></body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JavaSpring4.3。3 项目：校园商铺-店铺管理</title>
    <url>/posts/3233767690/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>Spring的概述</li>
<li>Spring的入门</li>
</ul>
<a id="more"></a>

<h3 id="第1章-店铺注册—DAO层和图片处理"><a href="#第1章-店铺注册—DAO层和图片处理" class="headerlink" title="第1章 店铺注册—DAO层和图片处理"></a>第1章 店铺注册—DAO层和图片处理</h3><h4 id="Dao层之新增店铺"><a href="#Dao层之新增店铺" class="headerlink" title="Dao层之新增店铺"></a>Dao层之新增店铺</h4><p>目标：</p>
<ul>
<li>连接数据库。</li>
<li>Mybatis数据库表映射关系的配置。</li>
<li>dao =&gt; service =&gt; controller层代码的编写，Junit的使用。</li>
<li>Session，图片处理工具Thumbnailator的使用。</li>
<li>suimobile前端设计与开发。</li>
</ul>
<h4 id="Dao层之更新店铺"><a href="#Dao层之更新店铺" class="headerlink" title="Dao层之更新店铺"></a>Dao层之更新店铺</h4><h4 id="Thumbnailator图片处理和封装Util（上）"><a href="#Thumbnailator图片处理和封装Util（上）" class="headerlink" title="Thumbnailator图片处理和封装Util（上）"></a>Thumbnailator图片处理和封装Util（上）</h4><h4 id="Thumbnailator图片处理和封装Util（下）"><a href="#Thumbnailator图片处理和封装Util（下）" class="headerlink" title="Thumbnailator图片处理和封装Util（下）"></a>Thumbnailator图片处理和封装Util（下）</h4><h4 id="Dto之ShopExecution的实现"><a href="#Dto之ShopExecution的实现" class="headerlink" title="Dto之ShopExecution的实现"></a>Dto之ShopExecution的实现</h4><h3 id="第2章-店铺注册—Service层和Controller层"><a href="#第2章-店铺注册—Service层和Controller层" class="headerlink" title="第2章 店铺注册—Service层和Controller层"></a>第2章 店铺注册—Service层和Controller层</h3><h4 id="2-1-店铺注册之Service层的实现-（28-03）"><a href="#2-1-店铺注册之Service层的实现-（28-03）" class="headerlink" title="2-1 店铺注册之Service层的实现 （28:03）"></a>2-1 店铺注册之Service层的实现 （28:03）</h4><h4 id="2-2-店铺注册功能之Controller层的实现（上）-（13-38）"><a href="#2-2-店铺注册功能之Controller层的实现（上）-（13-38）" class="headerlink" title="2-2 店铺注册功能之Controller层的实现（上） （13:38）"></a>2-2 店铺注册功能之Controller层的实现（上） （13:38）</h4><h4 id="2-3-店铺注册功能之Controller层的实现（下）-（15-52）"><a href="#2-3-店铺注册功能之Controller层的实现（下）-（15-52）" class="headerlink" title="2-3 店铺注册功能之Controller层的实现（下） （15:52）"></a>2-3 店铺注册功能之Controller层的实现（下） （15:52）</h4><h4 id="2-4-店铺注册功能之Controller层的改造-（13-21）"><a href="#2-4-店铺注册功能之Controller层的改造-（13-21）" class="headerlink" title="2-4 店铺注册功能之Controller层的改造 （13:21）"></a>2-4 店铺注册功能之Controller层的改造 （13:21）</h4><h3 id="第3章-店铺注册—前端和前后台联调"><a href="#第3章-店铺注册—前端和前后台联调" class="headerlink" title="第3章 店铺注册—前端和前后台联调"></a>第3章 店铺注册—前端和前后台联调</h3><h4 id="3-1-店铺注册之前端设计-（24-49）"><a href="#3-1-店铺注册之前端设计-（24-49）" class="headerlink" title="3-1 店铺注册之前端设计 （24:49）"></a>3-1 店铺注册之前端设计 （24:49）</h4><h4 id="3-2-店铺注册之js实现-（21-13）"><a href="#3-2-店铺注册之js实现-（21-13）" class="headerlink" title="3-2 店铺注册之js实现 （21:13）"></a>3-2 店铺注册之js实现 （21:13）</h4><h4 id="3-3-店铺类别区域信息的获取-（22-33）"><a href="#3-3-店铺类别区域信息的获取-（22-33）" class="headerlink" title="3-3 店铺类别区域信息的获取 （22:33）"></a>3-3 店铺类别区域信息的获取 （22:33）</h4><h4 id="3-4-引入kaptcha实现验证码-（19-14）"><a href="#3-4-引入kaptcha实现验证码-（19-14）" class="headerlink" title="3-4 引入kaptcha实现验证码 （19:14）"></a>3-4 引入kaptcha实现验证码 （19:14）</h4><h4 id="3-5-前后端联调验证整体模块功能-（14-28）"><a href="#3-5-前后端联调验证整体模块功能-（14-28）" class="headerlink" title="3-5 前后端联调验证整体模块功能 （14:28）"></a>3-5 前后端联调验证整体模块功能 （14:28）</h4><h3 id="第4章-店铺信息编辑模块"><a href="#第4章-店铺信息编辑模块" class="headerlink" title="第4章 店铺信息编辑模块"></a>第4章 店铺信息编辑模块</h3><h4 id="4-1-店铺信息编辑之Dao层开发-（11-24）"><a href="#4-1-店铺信息编辑之Dao层开发-（11-24）" class="headerlink" title="4-1 店铺信息编辑之Dao层开发 （11:24）"></a>4-1 店铺信息编辑之Dao层开发 （11:24）</h4><h4 id="4-2-店铺信息编辑之Service层的实现-（14-28）"><a href="#4-2-店铺信息编辑之Service层的实现-（14-28）" class="headerlink" title="4-2 店铺信息编辑之Service层的实现 （14:28）"></a>4-2 店铺信息编辑之Service层的实现 （14:28）</h4><h4 id="4-3-店铺信息编辑之Controller层实现-（14-57）"><a href="#4-3-店铺信息编辑之Controller层实现-（14-57）" class="headerlink" title="4-3 店铺信息编辑之Controller层实现 （14:57）"></a>4-3 店铺信息编辑之Controller层实现 （14:57）</h4><h4 id="4-4-店铺信息编辑之前端实现-（14-10）"><a href="#4-4-店铺信息编辑之前端实现-（14-10）" class="headerlink" title="4-4 店铺信息编辑之前端实现 （14:10）"></a>4-4 店铺信息编辑之前端实现 （14:10）</h4><h3 id="第5章-店铺列表展示功能"><a href="#第5章-店铺列表展示功能" class="headerlink" title="第5章 店铺列表展示功能"></a>第5章 店铺列表展示功能</h3><h4 id="5-1-店铺列表展示之Dao层的实现-（19-13）"><a href="#5-1-店铺列表展示之Dao层的实现-（19-13）" class="headerlink" title="5-1 店铺列表展示之Dao层的实现 （19:13）"></a>5-1 店铺列表展示之Dao层的实现 （19:13）</h4><h4 id="5-2-店铺列表展示之Service层的实现-（08-24）"><a href="#5-2-店铺列表展示之Service层的实现-（08-24）" class="headerlink" title="5-2 店铺列表展示之Service层的实现 （08:24）"></a>5-2 店铺列表展示之Service层的实现 （08:24）</h4><h4 id="5-3-店铺列表展示之Contoller层的实现-（14-09）"><a href="#5-3-店铺列表展示之Contoller层的实现-（14-09）" class="headerlink" title="5-3 店铺列表展示之Contoller层的实现 （14:09）"></a>5-3 店铺列表展示之Contoller层的实现 （14:09）</h4><h4 id="5-4-店铺列表展示前端开发-（10-07）"><a href="#5-4-店铺列表展示前端开发-（10-07）" class="headerlink" title="5-4 店铺列表展示前端开发 （10:07）"></a>5-4 店铺列表展示前端开发 （10:07）</h4><h4 id="5-5-店铺管理页面的前端开发-（06-42）"><a href="#5-5-店铺管理页面的前端开发-（06-42）" class="headerlink" title="5-5 店铺管理页面的前端开发 （06:42）"></a>5-5 店铺管理页面的前端开发 （06:42）</h4></body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java基础通识1.1.1 初识</title>
    <url>/posts/2497748203/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>Java的编译基础</li>
<li>Java程序实际执行细节</li>
<li>使用eclipse开发Java程序</li>
</ul>
<a id="more"></a>

<h3 id="Java的编译基础"><a href="#Java的编译基础" class="headerlink" title="Java的编译基础"></a>Java的编译基础</h3><h4 id="Java简介"><a href="#Java简介" class="headerlink" title="Java简介"></a>Java简介</h4><ul>
<li>JAVA是一门面向对象的程序设计语言。</li>
<li>1995年由sun公司发布。</li>
<li>2010年sun公司被Oracle公司收购。</li>
</ul>
<h4 id="Java程序执行过程"><a href="#Java程序执行过程" class="headerlink" title="Java程序执行过程"></a>Java程序执行过程</h4><p>源文件（Program.java）–&gt; 编译器（compiler）–&gt; 字节码文件（Program.class）–&gt; 解释器（interpreter）–&gt; 最终电脑上展示的程序（Program）</p>
<p><img src="/images/JavaProgramExecutionProcedures.png" alt="Java程序执行过程" title="Java程序执行过程"></p>
<p>以 “.java” 为后缀的源文件，通过“编译器”进行编译后生成”.class”为后缀的字节码文件字节码文件交由“解释器”进行执行，从而程序得以体现。<br>     这个跨平台解释 “.class” 文</p>
<p>件的过程是由Java虚拟机进行完成，Java虚拟机解释执行编译过程中生成的字节码文件，把字节码文件解释执行成具体平台上的机器指令执行。<br>     因为我们的计算机只能识别0和1这样的二进制指令，所以把字节码解释成具体平台上的机器指令执行以后，Java就能实现一次编译，到处执行。</p>
<h4 id="JVM（Java-virtual-machine）"><a href="#JVM（Java-virtual-machine）" class="headerlink" title="JVM（Java virtual machine）"></a>JVM（Java virtual machine）</h4><ul>
<li>JVM（Java virtual machine），Java虚拟机。</li>
<li>JVM是Java平台无关性实现的关键 。</li>
</ul>
<h4 id="JRE（Java-Runtime-Environment）"><a href="#JRE（Java-Runtime-Environment）" class="headerlink" title="JRE（Java Runtime Environment）"></a>JRE（Java Runtime Environment）</h4><ul>
<li>包括Java虚拟机（JVM，即Java virtual machine）、java核心类库和支持文件。JVM是Java实现平台无关性的关键，实现一次编译，到处运行。</li>
<li>如果只需要运行Java程序，下载并安装JRE即可。（JRE面对使用人员）如果开发Java软件，需要下载JDK。（JDK 面对开发人员）。</li>
<li>在JDK中附带有JRE。</li>
</ul>
<h4 id="JDK（Java-Development-Kit）"><a href="#JDK（Java-Development-Kit）" class="headerlink" title="JDK（Java Development Kit）"></a>JDK（Java Development Kit）</h4><p> JDK（Java Development Kit），Java语言的软件开发工具包.</p>
<p>两个主要组件：</p>
<ul>
<li>-javac–编译器，将源程序转成字节码。同时也是编译命令。</li>
<li>-java–运行编译后的java程序（ “.class” 后缀的）。</li>
</ul>
<p><img src="/images/JVMJREJDK.png" alt="JVM、JRE、JDK三者关系" title="JVM、JRE、JDK三者关系"></p>
<p><strong>Java平台</strong></p>
<ul>
<li>Java ME–移动设备–Java微型版</li>
<li>Java SE–桌面程序–Java标准版</li>
<li>Java EE–Web程序–Jave企业版</li>
</ul>
<p><strong>选择练习</strong></p>
<p>下面选项中关于JDK的说法正确的是（  ）（选一项）<br>A.  JRE中包含JDK，JDK中包含JVM<br>B.  JDK是Java运行时环境的简称<br>C.  Java实现平台无关性的关键是JDK<br>D.  javac ，java 等命令是JDK中的命令</p>
<p>正确答案： D </p>
<p><strong>参考解析：</strong></p>
<p>本题考查的是对Java代码编译及运行环境的认知，D选项正确。<br>A选项错误，应该是JDK包含JRE，JRE中包含JVM虚拟机<br>B选项错误，JRE是Java运行时环境的简称，JDK是软件开发工具包<br>C选项错误，JVM是Java实现平台无关性的关键，实现一次编译，到处运行</p>
<h3 id="Java程序实际执行细节"><a href="#Java程序实际执行细节" class="headerlink" title="Java程序实际执行细节"></a>Java程序实际执行细节</h3><p><strong>注意：以下执行程序仅作为记录了解，无需刻意学习掌握，现开发流程主要还是使用开发工具完成相关工作。</strong></p>
<p>记事本编写程序</p>
<p><img src="/images/notebook1.png" alt="记事本编写程序" title="记事本编写程序"></p>
<p>存储方式：保存前设置文件夹显示程序扩展名。<br>方法一："HelloImooc.java"        //英文状态下双引号+class后类名+.java</p>
<p><img src="/images/displayExtension.png" alt="保存前设置文件夹显示程序扩展名" title="保存前设置文件夹显示程序扩展名"></p>
<p>方法二：保存类型选择“所有文件”</p>
<p><img src="/images/selectSaveType.png" alt="保存类型选择“所有文件”" title="保存类型选择“所有文件”"></p>
<p>执行程序<br>控制台输入：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CMD"><figure class="iseeu highlight /cmd"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cmd</span>+回车</span><br></pre></td></tr></tbody></table></figure></div>
<p>目录切换到e盘：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CMD"><figure class="iseeu highlight /cmd"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function">e:        //这里不区分大小写</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>转到java文件夹下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CMD"><figure class="iseeu highlight /cmd"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> java        //这里不区分大小写</span><br></pre></td></tr></tbody></table></figure></div>
<p>想看java文件夹下都有哪些文件：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CMD"><figure class="iseeu highlight /cmd"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>编译程序：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CMD"><figure class="iseeu highlight /cmd"><table><tbody><tr><td class="code"><pre><span class="line">javac HelloImooc.java        //注意区分大小写</span><br></pre></td></tr></tbody></table></figure></div>
<p>编译完成后，文件夹会生成j以.class结尾的二进制字节码文件。</p>
<p>解释执行二进制字节码文件：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CMD"><figure class="iseeu highlight /cmd"><table><tbody><tr><td class="code"><pre><span class="line">java HelloImooc        //执行程序时，文件名没有后缀</span><br></pre></td></tr></tbody></table></figure></div>
<p><img src="/images/cmd.png" alt="cmd" title="cmd"></p>
<h4 id="环境变量的配置及简单Java程序的编写。"><a href="#环境变量的配置及简单Java程序的编写。" class="headerlink" title="环境变量的配置及简单Java程序的编写。"></a>环境变量的配置及简单Java程序的编写。</h4><p>在桌面计算机图标右键–属性–高级系统设置–高级–环境变量–将javac的目录复制到环境变量内。</p>
<ul>
<li>在保存Java文件时注意它的扩展名。</li>
<li>在执行程序时，文件名没有后缀扩展名。</li>
<li>环境变量设置前如果已经开启了命令行窗口，在设置完需要重启才能成功执行程序。</li>
</ul>
<h4 id="多选题"><a href="#多选题" class="headerlink" title="多选题"></a>多选题</h4><p>下面选项中说法正确的是：（选两项）<br>A.  Java文件的编译命令是java。<br>B.  配置环境变量Path时，要配置到JDK安装目录下的bin目录。<br>C.  在命令行窗口输入cd  java命令，可以显示java文件夹下的所有文件。<br>D.  在命令行中执行Java代码时，配置好环境变量后，要重启命令行窗口才能生效。</p>
<p>正确答案： B,D </p>
<p><strong>参考解析：</strong><br>本题考查的是对Java程序执行流程和常用操作命令的认知，BD选项是正确的。A选项错误，Java文件的编译命令是javac，解释执行命令是java。C选项错误，在命令行窗口输入cd  java命令，可以切换到java文件夹。dir才是显示该文件夹下所有文件。</p>
<h4 id="Java程序的结构"><a href="#Java程序的结构" class="headerlink" title="Java程序的结构"></a>Java程序的结构</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloImooc</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"Hello,imooc!"</span>); </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>1和5行的“class HelloImooc{}”是类，英文为“class”，后面的内容为类的定义。大括号可以先写完一对，以防止忘记。高亮区域为类的命名，可根据情况改变。</p>
<p>2和5行的“public ststic void main(String[] args){}”是主方法，主方法之程序执行的入口，是开始的地方。高亮区域为主方法的命名，可根据情况改变。3行是主方法的方法体的内容，即输出语句。</p>
<p><strong>单选题</strong></p>
<p>以下定义了主方法的代码中，有几处错误（选一项）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>{ <span class="comment">// 1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>{ <span class="comment">// 2</span></span><br><span class="line">        System.out.printIn(<span class="string">"helloworld"</span>); <span class="comment">// 3</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>A.  1处错误<br>B.  2处错误<br>C.  3处错误<br>D.  没有错误</p>
<p>正确答案： B </p>
<p><strong>参考解析：</strong><br>本题考查的是对Java程序结构的认知， 本段代码共有两处错误：<br>第2行处，主方法的名字应该是main，而题目中是mian ，主方法的名称必须是main<br>第3行处，输出语句中<code>printIn</code><br>应该改成println所以B选项是正确的</p>
<h3 id="使用eclipse开发Java程序"><a href="#使用eclipse开发Java程序" class="headerlink" title="使用eclipse开发Java程序"></a>使用eclipse开发Java程序</h3><h4 id="eclipse简介"><a href="#eclipse简介" class="headerlink" title="eclipse简介"></a>eclipse简介</h4><p>还有一个业界普遍认为是最好的开发工具（Intellij IDEA）后面会介绍到。</p>
<p>推荐小白先装JDK再装Eclipse。</p>
<p>eclipse下载地址：<a href="https://www.eclipse.org/downloads/">https://www.eclipse.org/downloads/</a></p>
<p><img src="/images/downloadstep1.png" alt="官网下载" title="Eclipse官网下载步骤一"></p>
<p><img src="/images/downloadstep2.png" alt="官网下载" title="Eclipse官网下载步骤二"></p>
<h4 id="在eclipse下开发Java程序"><a href="#在eclipse下开发Java程序" class="headerlink" title="在eclipse下开发Java程序"></a>在eclipse下开发Java程序</h4><ul>
<li>包（package）的名字一般是域名反写，如com.imooc（小数点前后是两个文件夹，com文件夹内包含imooc文件夹）。</li>
<li>保存就是编译的过程。</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java基础通识1.1.3 运算符</title>
    <url>/posts/2614399884/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>一、运算符概述</li>
<li>二、算数运算符</li>
<li>三、赋值运算符</li>
<li>四、关系运算符</li>
<li>五、逻辑运算符</li>
<li>六、条件运算符</li>
<li>七、位运算符</li>
</ul>
<a id="more"></a>

<h3 id="运算符概述"><a href="#运算符概述" class="headerlink" title="运算符概述"></a>运算符概述</h3><p><strong>表达式：</strong></p>
<p>表达式是由运算符和操作数组成的。表达式举例：</p>
<ul>
<li>5</li>
<li>num1</li>
<li>num1+num2</li>
<li>sum=num1+num2;</li>
</ul>
<p><img src="en-resource://database/5292:1" alt="d923c3a9e07d6c49945ec105ef034349.png"></p>
<p><strong>运算符</strong></p>
<ul>
<li>算数运算符</li>
<li>赋值运算符</li>
<li>关系运算符</li>
<li>逻辑运算符</li>
<li>条件运算符</li>
<li>位运算符</li>
</ul>
<h3 id="算术运算符与赋值运算符"><a href="#算术运算符与赋值运算符" class="headerlink" title="算术运算符与赋值运算符"></a>算术运算符与赋值运算符</h3><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><ul>
<li>格式：变量=表达式；</li>
<li>举例：int n=3；//将3赋值给变量n。</li>
<li>注意：赋值运算符是从右往左运算,赋值运算符的左边不能说常量。<br>复合赋值运算符<img src="en-resource://database/5297:1" alt="de01489275eef9c61bfd806e81445637.png"></li>
</ul>
<h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><p>算术运算符主要用于进行基本的算术运算，如加法、减法、乘法和除法等。<br><img src="en-resource://database/5302:1" alt="da78d680e3b7c04d962dcfcc5b71c0b1.png"></p>
<p>“+”在字符串中还可以作为字符串的链接符。<br>字符串连接运算</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.operator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathDemo</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             <span class="keyword">int</span> num1=<span class="number">10</span>, num2=<span class="number">5</span>;</span><br><span class="line">             <span class="keyword">int</span> result;<span class="comment">//存放结果</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">//加法</span></span><br><span class="line">             result=num1+num2;</span><br><span class="line">             System.out.println(num1+<span class="string">"+"</span>+num2+<span class="string">"="</span>+result);</span><br><span class="line"></span><br><span class="line">             <span class="comment">//字符串连接</span></span><br><span class="line">             System.out.println(<span class="string">""</span>+num1+num2);</span><br><span class="line">             </span><br><span class="line">             <span class="comment">//减法</span></span><br><span class="line">             result=num1-num2;</span><br><span class="line">             System.out.println(num1+<span class="string">"-"</span>+num2+<span class="string">"="</span>+result);</span><br><span class="line"></span><br><span class="line">             <span class="comment">//乘法</span></span><br><span class="line">             result=num1*num2;</span><br><span class="line">             System.out.println(num1+<span class="string">"*"</span>+num2+<span class="string">"="</span>+result);</span><br><span class="line"></span><br><span class="line">             <span class="comment">//除法</span></span><br><span class="line">             result=num1/num2;</span><br><span class="line">             System.out.println(num1+<span class="string">"/"</span>+num2+<span class="string">"="</span>+result);</span><br><span class="line"></span><br><span class="line">             <span class="comment">//分子分母都是整型时，结果为整除后的结果</span></span><br><span class="line">             System.out.println(<span class="number">13</span>/<span class="number">5</span>);</span><br><span class="line">             System.out.println(<span class="string">"13.0/5"</span>+<span class="number">13.0</span>/<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">             <span class="comment">//求余数</span></span><br><span class="line">             result=<span class="number">13</span>/num2;</span><br><span class="line">             System.out.println(<span class="string">"13%"</span>+num2+<span class="string">"="</span>+result);</span><br><span class="line">             System.out.println(<span class="string">"13.5%5="</span>+(<span class="number">13.5</span>%<span class="number">5</span>));</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><img src="en-resource://database/5307:1" alt="d4582cb5a96e81fb77df9a655dde999b.png"></p>
<h4 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h4><p>自增自减在前面，先自增减在运算；自增自减在后面，先运算在自增减。<br><img src="en-resource://database/5312:1" alt="1138d0e0eba232b206e3550e82dec87b.png"><br>单目运算符：对一个操作数进行操作。如：x++<br>双目运算符：对两个操作符进行操作。如：a-b</p>
<h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><h4 id="关系运算符-1"><a href="#关系运算符-1" class="headerlink" title="关系运算符"></a>关系运算符</h4><ul>
<li>比较运算符用于判断两个数据的大小。</li>
<li>比较的结果是一个布尔值。<br><img src="en-resource://database/5323:1" alt="5afc3f6254b0023fe4767c00589f2a69.png"></li>
</ul>
<p>大于等于即大于或等于，小于等于同理。</p>
<ul>
<li><p>‘A’&gt;’B’  结果为false，比较的是两个字符的ASCII值。</p>
</li>
<li><p>5!=6  结果为true，比较两个数值是否相等。</p>
</li>
<li><p>true==false结果为false，两个布尔值不相等。</p>
</li>
<li><p>float f=5.0f;long l=5; f==l;结果为true，浮点数与整数进行比较，只要值相等就返回true。</p>
<h4 id="if条件结构"><a href="#if条件结构" class="headerlink" title="if条件结构"></a>if条件结构</h4></li>
<li><p>数据比较关系运算符主要用于条件和循环语句中的判断条件。</p>
</li>
<li><p>本次课介绍简单条件结构及如何编码。</p>
</li>
<li><p>条件结构就是根据不同的条件去执行不同的操作。</p>
</li>
</ul>
<p>条件结构简单if语句的格式：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件){</span><br><span class="line">    &lt;语句块&gt;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>注意：if条件后面只有一条语句的话，大括号可以省略。if条件后面有多条语句的话，大括号不能省略。if条件后面不管有几条语句，都用大括号，避免出错。</p>
<p>案例：商场打折，如果两件商品的总价大于100则减20，并把原价和折后价格分别输出。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionDemo1</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">             <span class="comment">// 例：商场打折，如果两件商品的价格大于100则减20，并把原价和折后价格分别输出。</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">//定义两个变量，分别存放两件衣服的价格</span></span><br><span class="line">             <span class="keyword">double</span> price1,price2;</span><br><span class="line">             price1=<span class="number">80</span>;</span><br><span class="line">             price2=<span class="number">55</span>;</span><br><span class="line"></span><br><span class="line">             <span class="comment">//计算两件商品的总价格</span></span><br><span class="line">             <span class="keyword">double</span> sum=price1+price2;</span><br><span class="line"></span><br><span class="line">             <span class="comment">//输出原价</span></span><br><span class="line">             System.out.println(<span class="string">"原价为："</span>+sum);</span><br><span class="line">             <span class="keyword">if</span>(sum&gt;=<span class="number">100</span>){</span><br><span class="line">                    sum-=<span class="number">20</span>;<span class="comment">//sum=sum-20;</span></span><br><span class="line">             }</span><br><span class="line">             System.out.println(<span class="string">"折后价格为："</span>+sum);</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="if-else条件结构"><a href="#if-else条件结构" class="headerlink" title="if-else条件结构"></a>if-else条件结构</h4><p>if-else语句的语法格式：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(){</span><br><span class="line">    &lt;语句块<span class="number">1</span>&gt;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">    &lt;语句块<span class="number">2</span>&gt;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>案例：判断一个整数是奇数还是偶数，并将结果打印输出。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="comment">//这条语句通过报错提示器导入的。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionDemo2</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             <span class="comment">// 例：判断一个整数是奇数还是偶数，并将结果打印输出。</span></span><br><span class="line">             <span class="comment">//定义一个变量存放数据</span></span><br><span class="line">             <span class="comment">//int n=11;</span></span><br><span class="line">             <span class="comment">//从键盘接收数据</span></span><br><span class="line">             System.out.println(<span class="string">"请输入一个整数："</span>);</span><br><span class="line">             Scanner s=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">             <span class="keyword">int</span> n=s.nextInt();</span><br><span class="line">             <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">             {</span><br><span class="line">                    System.out.println(n+<span class="string">"是偶数！"</span>);</span><br><span class="line">             }<span class="keyword">else</span>{</span><br><span class="line">                    System.out.println(n+<span class="string">"是奇数！"</span>);</span><br><span class="line">             }</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="逻辑运算符与“位”运算符"><a href="#逻辑运算符与“位”运算符" class="headerlink" title="逻辑运算符与“位”运算符"></a>逻辑运算符与“位”运算符</h3><h4 id="逻辑“与”运算符"><a href="#逻辑“与”运算符" class="headerlink" title="逻辑“与”运算符"></a>逻辑“与”运算符</h4><ul>
<li>逻辑运算符用来连接一个或多个条件，判断这些条件是否成立。</li>
<li>逻辑运算符的结果是布尔类型。</li>
</ul>
<p><img src="en-resource://database/5328:1" alt="a45da000b29e3519b54e9f1bd58779c2.png"></p>
<p>注意：操作数都是布尔类型的值、变量或者是表达式。</p>
<p><strong>位运算符，后期百度补充（仅供参考）</strong></p>
<blockquote>
<p>我们将 || 和 &amp;&amp; 定义为逻辑运算符，而 | 和 &amp; 定义为<strong>位运算符</strong>。<br>&amp;&amp; 如果两个操作数都非零，则条件为真；<br>|| 如果两个操作数中有任意一个非零，则条件为真。</p>
</blockquote>
<p><strong>逻辑“与”运算符</strong></p>
<ul>
<li>案例：升学考试，英语、数学、c语言三门总成绩大于等于230，并且英语成绩大于等于60，才能升学。</li>
<li>解读：三门总成绩大于等于230表示为sum&gt;230</li>
<li>英语成绩大于等于60,表示为en&gt;=60</li>
<li>以上两条件同时成立，即是“与”的关系。</li>
</ul>
<p><img src="en-resource://database/5333:1" alt="db98bacddf47753f39452b59a604aaf1.png"></p>
<p><strong>&amp;运算符</strong></p>
<ul>
<li>int n=3;</li>
<li>boolean b=(3&gt;7)&amp;((n++)&lt;2) 问b=?,n=?</li>
<li>b=false,n=4</li>
</ul>
<p><strong>&amp;&amp;运算符</strong></p>
<ul>
<li>int n=3;</li>
<li>boolean b=(3&gt;7)&amp;((n++)&lt;2) 问b=?,n=?</li>
<li>b=false,n=3</li>
<li>&amp;&amp;运算符又叫短路运算符，如果第一个表达式的值就能决定表达式最后的结果，运算符右边的表达式就不再计算了。</li>
</ul>
<h4 id="逻辑“或”运算符"><a href="#逻辑“或”运算符" class="headerlink" title="逻辑“或”运算符"></a>逻辑“或”运算符</h4><ul>
<li>付款问题，可以选择现金或银行卡。</li>
</ul>
<p><img src="en-resource://database/5338:1" alt="fc763dcee81f20f43385edf1e8c37426.png"></p>
<p><strong>|运算符</strong></p>
<ul>
<li>int n=3;</li>
<li>boolean b=(3&lt;7)|((n++)&lt;2) 问b=?,n=?</li>
<li>b=true,n=4</li>
</ul>
<p><strong>||运算符</strong></p>
<ul>
<li><p>int n=3;</p>
</li>
<li><p>boolean b=(3&gt;7)|((n++)&lt;2) 问b=?,n=?</p>
</li>
<li><p>b=true,n=3</p>
</li>
<li><p>||运算符又叫短路运算符，如果第一个表达式的值就能决定表达式最后的结果，运算符右边的表达式就不再计算了。</p>
<h4 id="逻辑“非”运算符及案例"><a href="#逻辑“非”运算符及案例" class="headerlink" title="逻辑“非”运算符及案例"></a>逻辑“非”运算符及案例</h4></li>
<li><p>!运算符</p>
</li>
<li><p>对原条件进行取反</p>
</li>
<li><p>例：!(3&lt;5)，结果为false</p>
</li>
<li><p>案例：输入一个数，判断是否能被3整除，并输出相应的提示信息。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogicDemo3</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">             <span class="comment">// 输入一个整数</span></span><br><span class="line">             System.out.println(<span class="string">"请输入一个整数："</span>);</span><br><span class="line">             Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">             <span class="keyword">int</span> n=sc.nextInt();</span><br><span class="line">             <span class="keyword">if</span>(!(n%<span class="number">3</span>==<span class="number">0</span>)){</span><br><span class="line">                    System.out.println(n+<span class="string">"不能被3整除！"</span>);</span><br><span class="line">             }<span class="keyword">else</span>{</span><br><span class="line">                    System.out.println(n+<span class="string">"能被3整除！"</span>);</span><br><span class="line">             }</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h3></li>
</ul>
<p>Java中的条件运算符是三目运算符。（++单目运算符；+-*/双目运算符）语法：布尔表达式?表达式1:表达式2当布尔表达式的值为true，则返回表达式1的值，否则返回表达式2的值。案例：求两个数的最大值并输出。</p>
<p><strong>三目运算符?:</strong><br>基本表达式：表达式1?表达式2:表达式3;<br>（1）表达式1是关系表达式或逻辑表达式,用于描述条件,表达式2和表达式3可以是常量,变量或表达式.<br>（2）若表达式1的值为真（或非0），则只计算表达式2，将其结果作为整个表达式的值；<br>       若表达式1的值为假（或为0），则只计算表达式3，将其结果作为整个表达式的值。</p>
<h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3><p><img src="en-resource://database/5343:2" alt="741cfc1b2fd9475d2be776a479f882be.png"></p>
<ul>
<li>已知int x=4,y=6;</li>
<li>n=x*y+(x%2)-(x/y)</li>
<li>n=?</li>
<li>n=24</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java基础通识1.1.4 控制流程--选择结构和控制结构</title>
    <url>/posts/967957899/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>一、选择结构<ul>
<li>if结构，if-else结构</li>
<li>多重if</li>
<li>嵌套if</li>
<li>switch结构</li>
</ul>
</li>
<li>二、循环结构<ul>
<li>while，do-while，for</li>
<li>循环嵌套</li>
</ul>
</li>
<li>三、while循环</li>
<li>四、do-while循环</li>
<li>五、for循环循环嵌套</li>
<li>六、break语句</li>
<li>七、continue语句</li>
</ul>
<a id="more"></a>

<h3 id="流程控制概述流程"><a href="#流程控制概述流程" class="headerlink" title="流程控制概述流程"></a>流程控制概述流程</h3><p>控制语句：顺序、选择、循环</p>
<p>顺序：由上而下，依次执行叫做顺序结构。<br><img src="en-resource://database/5353:1" alt="14cfa6132a07af71e7be63b676d18b27.png"></p>
<p>选择结构：如同if-else结构（根据不同的条件去选择执行if后面的语句还是else后的语句）就是选择结构。</p>
<h3 id="多重if结构与嵌套if结构"><a href="#多重if结构与嵌套if结构" class="headerlink" title="多重if结构与嵌套if结构"></a>多重if结构与嵌套if结构</h3><h4 id="多重if结构"><a href="#多重if结构" class="headerlink" title="多重if结构"></a>多重if结构</h4><p><strong>选择结构</strong><br>if单条语句形式。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)    </span><br><span class="line">	语句；</span><br></pre></td></tr></tbody></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件){</span><br><span class="line">	语句；</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>更推荐加上大括号这种形式，避免遗忘出错。</p>
<p>if-else多条语句形式。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)</span><br><span class="line">    语句<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    语句<span class="number">2</span>；</span><br></pre></td></tr></tbody></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件){</span><br><span class="line">    语句<span class="number">1</span>;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">    语句<span class="number">2</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>案例</strong><br>需求描述：<br>编写一个程序，更具考试成绩，输出相应的评定信息。</p>
<ul>
<li>成绩大于等于90分，输出“优”。</li>
<li>成绩大于等于80分且小于90分，输出“良”。</li>
<li>成绩大于等于60分小于80分，输出“中”。</li>
<li>成绩小于60分，输出“不及格”。</li>
</ul>
<p>多行注释</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ASCIIDOC"><figure class="iseeu highlight /asciidoc"><table><tbody><tr><td class="code"><pre><span class="line">/\*注释1</span><br><span class="line">注释2</span><br><span class="line">注释3*/</span><br></pre></td></tr></tbody></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScoreAssess</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    成绩大于等于90分，输出“优”</span></span><br><span class="line"><span class="comment">    成绩大于等于80分且小于90分，输出“良”</span></span><br><span class="line"><span class="comment">    成绩大于等于60分小于80分，输出“中”</span></span><br><span class="line"><span class="comment">    成绩小于60分，输出“不及格”</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    System.out.println(<span class="string">"请输入成绩："</span>); </span><br><span class="line">    Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> score=sc.nextInt();</span><br><span class="line">    <span class="keyword">if</span>(score&gt;=<span class="number">90</span>)</span><br><span class="line">        System.out.println(<span class="string">"优"</span>);</span><br><span class="line">    <span class="keyword">if</span>(score&gt;=<span class="number">80</span> &amp; score&lt;<span class="number">90</span>)</span><br><span class="line">        System.out.println(<span class="string">"良"</span>);</span><br><span class="line">    <span class="keyword">if</span>(score&gt;=<span class="number">60</span> &amp; score&lt;<span class="number">80</span>)</span><br><span class="line">        System.out.println(<span class="string">"中"</span>);</span><br><span class="line">    <span class="keyword">if</span>(score&lt;<span class="number">60</span>)</span><br><span class="line">        System.out.println(<span class="string">"不及格"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>多重if结构</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式<span class="number">1</span>)</span><br><span class="line">    语句；</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(表达式<span class="number">2</span>) </span><br><span class="line">    语句<span class="number">2</span>；</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(表达式<span class="number">3</span>) </span><br><span class="line">    语句<span class="number">3</span>；</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    语句n；</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>改写上方案</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScoreAssess</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    成绩大于等于90分，输出“优”</span></span><br><span class="line"><span class="comment">    成绩大于等于80分且小于90分，输出“良”</span></span><br><span class="line"><span class="comment">    成绩大于等于60分小于80分，输出“中”</span></span><br><span class="line"><span class="comment">    成绩小于60分，输出“不及格”</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    System.out.println(<span class="string">"请输入成绩："</span>); </span><br><span class="line">    Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> score=sc.nextInt();</span><br><span class="line">    <span class="keyword">if</span>(score&gt;=<span class="number">90</span>)</span><br><span class="line">        System.out.println(<span class="string">"优"</span>);</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">80</span>)<span class="comment">//相当于score&gt;80&amp;score&lt;90。</span></span><br><span class="line">        System.out.println(<span class="string">"良"</span>);</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">60</span>)</span><br><span class="line">        System.out.println(<span class="string">"中"</span>);</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">        System.out.println(<span class="string">"不及格"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="嵌套if结构"><a href="#嵌套if结构" class="headerlink" title="嵌套if结构"></a>嵌套if结构</h4><p><img src="en-resource://database/5367:1" alt="ee729e0db1da7f65a75806f38ca8bedc.png"></p>
<p>注意：在编写过程中可能有多个if或者多个else，每个else应该与哪个if相对于应，则极为重要，初学建议多使用大括号避免出错。</p>
<p><strong>案例</strong><br>从键盘输入两个整数，经过判断输出他们的关系（大于，小于，等于）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.flow;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntCompare</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String\[] args)</span> </span>{</span><br><span class="line">    <span class="comment">// 定义两个整型变量并初始化</span></span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">5</span>,y=<span class="number">10</span>;</span><br><span class="line">    <span class="comment">//判断x和y是否相等</span></span><br><span class="line">    <span class="keyword">if</span>(x!=y) {</span><br><span class="line">        <span class="keyword">if</span>(x&gt;y){</span><br><span class="line">            System.out.println(x+<span class="string">"大于"</span>+y);</span><br><span class="line">    }<span class="keyword">else</span> {</span><br><span class="line">        System.out.println(x+<span class="string">"小于"</span>+y);</span><br><span class="line">        }</span><br><span class="line">    }<span class="keyword">else</span> {</span><br><span class="line">        System.out.println(x+<span class="string">"和"</span>+y+<span class="string">"相等"</span>);</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(x!=y)</span><br><span class="line">            <span class="keyword">if</span>(x&gt;y)</span><br><span class="line">                System.out.println(x+<span class="string">"大于"</span>+y);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(x+<span class="string">"和"</span>+y+<span class="string">"相等"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>注意：如果没有大括号的情况，if与最近的else相匹配。</p>
<h3 id="switch结构"><a href="#switch结构" class="headerlink" title="switch结构"></a>switch结构</h3><h4 id="switch结构-1"><a href="#switch结构-1" class="headerlink" title="switch结构"></a>switch结构</h4><p><strong>比较</strong>：</p>
<p>if结构和switch结构的区别</p>
<p><strong>if结构：</strong></p>
<ul>
<li>判断条件是布尔类型。</li>
<li>判断条件是一个范围。</li>
</ul>
<p><strong>switch结构：</strong></p>
<ul>
<li>判断条件是常量值。</li>
</ul>
<p><strong>switch结构语法</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式){</span><br><span class="line">    <span class="keyword">case</span>常量表达式<span class="number">1</span>:</span><br><span class="line">        语句<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span>常量表达式<span class="number">2</span>:</span><br><span class="line">        语句<span class="number">2</span>;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        语句<span class="number">3</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>注释：表达式计算之后是个常量值。switch结构的大括号无论何时都不能省略。case语句中：case+空格+常量表达式（计算的结果必须是常量值）+：（冒号不能丢）冒号后面即使不加大括号也可以跟多条语句。break；语句可以在适当的条件下去掉。</p>
<p>default：语句在前面条件都不满足的情况下才会执行default语句的内容。有点像多重if-else语句中最后的else语句。</p>
<p>执行流程：先计算switch后表达式的值。然后用计算出来的值一次与case语句后面表达式的值进行匹配。如果小括号内的值与某一个case后表达式的值是相等的 ，就会继续执行case后面的语句。如果执行过程中遇到break语句，将会跳出switch结果，switch结构将终止执行。语句1后面如果没有break语句，将会继续往下执行，直到遇到break语句，才能跳出switch结构。如果一直没有遇到break语句，最终将执行default语句后面的内容。如果小括号内的值与case语句后任何表达式值都不相等，则执行default后的语句。default 语句是可以省略的。如果没有default语句，表达式的值也找不到匹配的值，将会结束switch结构的执行。</p>
<p>switch结构又被称为多路选择结构。JDK6.0以前表达式的值只能是int类型或者是与int类型等价的数据类型比如说byte，short和字符类型。JDK7.0以后表达式的值可以是基本数据类型的byte，short，int，char，以及string类型。</p>
<h4 id="星期的表示案例及总结"><a href="#星期的表示案例及总结" class="headerlink" title="星期的表示案例及总结"></a>星期的表示案例及总结</h4><p>从键盘输入1-7之间的任意数字，分别输出对应的星期信息。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.flow;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeekDemo1</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>{</span><br><span class="line">    <span class="comment">//从键盘接受数据</span></span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">"请输入1-7之间的数字"</span>);</span><br><span class="line">    <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">switch</span> (n) {</span><br><span class="line">             <span class="keyword">case</span> <span class="number">1</span>: </span><br><span class="line">                System.out.println(<span class="string">"星期一"</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">"星期二"</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                System.out.println(<span class="string">"星期三"</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                System.out.println(<span class="string">"星期四"</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                System.out.println(<span class="string">"星期五"</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                System.out.println(<span class="string">"星期六"</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                System.out.println(<span class="string">"星期日"</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"该数字超出了1-7的范围！"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>改写为输入英文：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.flow;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeekDemo2</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String\[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//从键盘接受数据</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            System.out.println(<span class="string">"请输入表示星期的英文单词："</span>);</span><br><span class="line">        String week = sc.next();</span><br><span class="line">        <span class="comment">//比较输入数字和输入英文的代码不同。</span></span><br><span class="line">        week=week.toUpperCase();</span><br><span class="line">        <span class="comment">//把字符串中的字符全部改为大写字母。</span></span><br><span class="line">        <span class="keyword">switch</span> (week) {</span><br><span class="line">            <span class="keyword">case</span> MONDAY:</span><br><span class="line">                System.out.println(<span class="string">"星期一"</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> TUESDAY:</span><br><span class="line">                System.out.println(<span class="string">"星期二"</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> WEDNESDAY:</span><br><span class="line">                System.out.println(<span class="string">"星期三"</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> THURSDAY:</span><br><span class="line">                System.out.println(<span class="string">"星期四"</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FRIDAY:</span><br><span class="line">                System.out.println(<span class="string">"星期五"</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SATURDAY:</span><br><span class="line">                System.out.println(<span class="string">"星期六"</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SUNDAY:</span><br><span class="line">                System.out.println(<span class="string">"星期日"</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"关于星期的单词输入错误！"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>学习重点：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">week=week.toUpperCase();<span class="comment">//把字符串中的字符全部改为大写字母。</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>该条码解决了大小写区分的问题。<br>比较输入数字和输入英文的代码不同：<br>输入数字条码int n = sc.nextInt();<br>输入英文条码String week = sc.next();</p>
<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><h4 id="while循环的执行流程"><a href="#while循环的执行流程" class="headerlink" title="while循环的执行流程"></a>while循环的执行流程</h4><p>语法格式：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(循环条件){</span><br><span class="line">	语句；</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>注释：<br>循环条件的表达语句结果只能说ture和false。当循环条件的结果是true的时候就执行循环条件后面的语句，否则不执行while循环。如果循环体只有一条语句，大括号可以省略。小括号后面不要加分号，避免出现死循环。</p>
<p>执行流程：<br>将小于5的整数打印输出。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n&gt;<span class="number">5</span>){</span><br><span class="line">    <span class="comment">//输出n的值</span></span><br><span class="line">    n++;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><img src="en-resource://database/5380:1" alt="17a24f5bba89686e2d52221f31f9cfbe.png"></p>
<p>分析：</p>
<ul>
<li>n的值必须先进行初始化。</li>
<li>循环变量n的值必须被改变。</li>
</ul>
<h4 id="案例：求1到5的累加和。"><a href="#案例：求1到5的累加和。" class="headerlink" title="案例：求1到5的累加和。"></a>案例：求1到5的累加和。</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.flow1;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlusDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 求1-5的累加和</span></span><br><span class="line">        <span class="comment">//1+2+3+4+5</span></span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;<span class="comment">//sum是存放和的变量</span></span><br><span class="line">        <span class="keyword">while</span>(n&lt;=<span class="number">5</span>){</span><br><span class="line">            sum=sum+n;<span class="comment">//sum+=n;</span></span><br><span class="line">            n++;<span class="comment">//n=n+1;</span></span><br><span class="line">        }</span><br><span class="line">    System.out.println(<span class="string">"1到5的累加和为："</span>+sum);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="案例：循环输出英文字母循环输出26个英文字母，分两行输出。"><a href="#案例：循环输出英文字母循环输出26个英文字母，分两行输出。" class="headerlink" title="案例：循环输出英文字母循环输出26个英文字母，分两行输出。"></a>案例：循环输出英文字母循环输出26个英文字母，分两行输出。</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.flow1;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 循环输出26个英文小写字母，分两行输出</span></span><br><span class="line">        <span class="keyword">char</span> ch=<span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">1</span>;<span class="comment">//控制换行</span></span><br><span class="line">        <span class="keyword">while</span>(ch&lt;=<span class="string">'z'</span>) {</span><br><span class="line">            System.out.print(ch+<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">if</span>(count%<span class="number">13</span>==<span class="number">0</span>)</span><br><span class="line">        System.out.println();</span><br><span class="line">        count++;</span><br><span class="line">        ch++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h3><h4 id="do-while循环-1"><a href="#do-while循环-1" class="headerlink" title="do-while循环"></a>do-while循环</h4><p>介绍及应用语法格式</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line">    语句;</span><br><span class="line">}<span class="keyword">while</span>(循环条件);</span><br></pre></td></tr></tbody></table></figure></div>
<p>注意：</p>
<ul>
<li>do-while循环至少执行一次。</li>
<li>循环条件后的分号不能丢。</li>
</ul>
<p>执行流程<br><img src="en-resource://database/5393:1" alt="99426fca401865424547443c4a9a54bf.png"></p>
<p>注释：局部变量使用前必须被初始化。</p>
<p><strong>案例：</strong><br>求1-5的累加和。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.flow1;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoWhileDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 求1-5的累加和</span></span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span>{</span><br><span class="line">            sum=sum+n;</span><br><span class="line">            n++;</span><br><span class="line">        }<span class="keyword">while</span>(n&lt;=<span class="number">5</span>);</span><br><span class="line">    System.out.println(<span class="string">"sum="</span>+sum);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="案例：猜字游戏猜字游戏。"><a href="#案例：猜字游戏猜字游戏。" class="headerlink" title="案例：猜字游戏猜字游戏。"></a>案例：猜字游戏猜字游戏。</h4><p><strong>要求</strong><br>猜一个介于1到10之间的数字。然后将猜测的值与实际值进行比较，并给出提示，以便能更接近实际值，直到猜中为止。</p>
<p><strong>程序分析：</strong><br>给定要猜测的数字。使用循环结构。循环进行的条件：猜测的数据和实际值不相等循环体的内容：输入实际值，进行判断输出猜到的值。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.flow1;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuessDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 设置要猜测的数值</span></span><br><span class="line">        <span class="keyword">int</span> number=(<span class="keyword">int</span>)(Math.random()*<span class="number">10</span>+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//使用随机数生成1到10之间的整数。</span></span><br><span class="line">        <span class="keyword">int</span> guess;</span><br><span class="line">        System.out.println(<span class="string">"猜测一个介于1到10之间的数"</span>);</span><br><span class="line">        <span class="keyword">do</span> {</span><br><span class="line">            System.out.println(<span class="string">"请输入您猜测的数："</span>);</span><br><span class="line">            Scanner sc=<span class="keyword">new</span> Scanner(System.in); </span><br><span class="line">            guess=sc.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(guess&gt;number) {</span><br><span class="line">                System.out.println(<span class="string">"太大！"</span>);</span><br><span class="line">            }<span class="keyword">else</span> <span class="keyword">if</span>(guess&lt;number) {</span><br><span class="line">                System.out.println(<span class="string">"太小！"</span>);</span><br><span class="line">            }</span><br><span class="line">        }<span class="keyword">while</span>(number!=guess);</span><br><span class="line">        System.out.println(<span class="string">"您猜中了！答案为"</span>+number);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>接收从键盘收入的数值时，出现“Resource leak: ‘sc’ is never closed”（资源泄漏:“sc”永远不会关闭）提示。<br><img src="en-resource://database/5814:1" alt="c46d42c6d9399dc11f5608c017d2123d.png"></p>
<p><img src="en-resource://database/5812:1" alt="e6420eea8c27ef74a694f645a46f4110.png"><br>解决方法如下。<br><img src="en-resource://database/5810:1" alt="5ef7043c5627b690a89025081b8ba73f.png"></p>
<p><strong>疑问：</strong><br>具体该提示为何形成，有什么影响还不清楚。</p>
<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><h4 id="for循环应用及局部变量作用范围"><a href="#for循环应用及局部变量作用范围" class="headerlink" title="for循环应用及局部变量作用范围"></a>for循环应用及局部变量作用范围</h4><p>语法格式</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(表达式<span class="number">1</span>;表达式<span class="number">2</span>;表达式<span class="number">3</span>){</span><br><span class="line">    语句;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>只有一条语句，大括号可以省略。<br>运算步骤：表达式1–表达式2–语句–表达式3–表达式2–语句–表达式3（已经进入循环：表2-语句–表3–表2）</p>
<p>使用for循环，求1到5的累加和。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.flow1;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">1</span>;n&lt;=<span class="number">5</span>;n++){</span><br><span class="line">            sum=sum+n;</span><br><span class="line">        }</span><br><span class="line">    System.out.println(<span class="string">"sum="</span>+sum);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>注意：定义的局部变量只在定义它的大括号内有效！</p>
<h4 id="for循环的注意事项"><a href="#for循环的注意事项" class="headerlink" title="for循环的注意事项"></a>for循环的注意事项</h4><p>三个表达式都是可以省略的。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(表达式<span class="number">1</span>;表达式<span class="number">2</span>;表达式<span class="number">3</span>){</span><br><span class="line">    语句;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h3><h4 id="嵌套while循环应用"><a href="#嵌套while循环应用" class="headerlink" title="嵌套while循环应用"></a>嵌套while循环应用</h4><p><img src="en-resource://database/5404:1" alt="321c97b2c99263336e0be1d38e1f491d.png"></p>
<p>外面的循环叫外重循环，里面的循环叫内重循环。<br>允许多种形式的循环交叉嵌套。</p>
<p>例题：<br>使用嵌套while循环输出4行4列的星号。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.flow1;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StarDemo1</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> m=<span class="number">1</span>;<span class="comment">//外重循环的变量。</span></span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">1</span>;<span class="comment">//内重循环的循环变量。</span></span><br><span class="line">        System.out.println(<span class="string">"输出4行4列的星号"</span>);</span><br><span class="line">        <span class="comment">//外重循环控制输出几行。</span></span><br><span class="line">        <span class="keyword">while</span>(m&lt;=<span class="number">4</span>) {</span><br><span class="line">            <span class="comment">//内重循环控制每行输出几个星号。</span></span><br><span class="line">            n=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(n&lt;=<span class="number">4</span>) {</span><br><span class="line">                System.out.print(<span class="string">"*"</span>);</span><br><span class="line">                n++;</span><br><span class="line">            }</span><br><span class="line">        System.out.println();<span class="comment">//换行语句 。</span></span><br><span class="line">        m++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="案例：阶乘的累加和"><a href="#案例：阶乘的累加和" class="headerlink" title="案例：阶乘的累加和"></a>案例：阶乘的累加和</h4><p>案例：<br>求1!+2!+3!+4!+5!+6!+7!+8!+9!+10!</p>
<p>分析：外重循环做和运算，内重循环做阶乘运算。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.flow1;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JiechengPlus</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> s=<span class="number">1</span>,sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++) {</span><br><span class="line">            s=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++) {</span><br><span class="line">                s=s*j;<span class="comment">//s存放阶乘计算的结果</span></span><br><span class="line">            }</span><br><span class="line">        sum=sum+s;</span><br><span class="line">        }</span><br><span class="line">    System.out.println(<span class="string">"1!+2!+3!+4!="</span>+sum);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="break语句和continue语句"><a href="#break语句和continue语句" class="headerlink" title="break语句和continue语句"></a>break语句和continue语句</h3><h4 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h4><ul>
<li>break语句可以结束当前循环。</li>
<li>执行完break语句后，当前循环体中位于break语句后面的语句就不会被执行。</li>
<li>注意：在多重循环中，break语句只向外跳一层。</li>
<li>break语句既可以用在switch结构也可以用在循环结构当中。</li>
</ul>
<h4 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h4><ul>
<li>continue语句只能使用在循环结构当中。</li>
<li>continue语句可以结束当前循环的执行，但是要继续执行当前循环体的下一次循环。<br><img src="en-resource://database/5411:1" alt="62f2b170f45c6ad6d8ce68c4f4b19f1f.png"><br><img src="en-resource://database/5416:1" alt="a5fda8481e373028aeaa0ca381e75287.png"></li>
</ul>
</body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java基础通识1.1.5 数组</title>
    <url>/posts/581866987/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>一、Java的编译基础</li>
<li>二、Java程序实际执行细节</li>
<li>三、使用eclipse开发Java程序</li>
</ul>
<a id="more"></a>

<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="数组概述"><a href="#数组概述" class="headerlink" title="数组概述"></a>数组概述</h4><p>数组是相同的数据按照顺序组成的一种引用数据类型。</p>
<p><strong>主要内容</strong></p>
<ul>
<li>一维数组<ul>
<li>声明</li>
<li>创建</li>
<li>初始化</li>
<li>元素的引用</li>
<li>长度</li>
<li>数组的应用</li>
</ul>
</li>
</ul>
<p>主要学习的内容一维数组声明创建初始化元素的引用长度数组的应用。</p>
<h4 id="数组的概念"><a href="#数组的概念" class="headerlink" title="数组的概念"></a>数组的概念</h4><p><strong>一维数组</strong><br><strong>数组声明语法格式：</strong><br>形式1：数据类型[]  数组名;     //在Java数组声明时最常用的形式。<br>形式2：数据类型  数组名[];     //其他编程语言如c语言c++就是第二种形式，java为了进行区分，从而开创了形式1。</p>
<p><strong>变量声明的语法格式：</strong><br>数据类型 变量名；<br><strong>比较两种语法格式：</strong><br>数组名和变量名的命名规则一致，它本身是标志符，要满足标志符的命名规则。并且向变量名一样，如果由一个单词组成，首字母小写，由多个单词组成，首字母小写，其他单词首字母大写。</p>
<p>数组声明举例：<br>int[]  myIntArray;<br>int  myIntArray[];<br>char[] ch;<br>Srring[]  strArray; </p>
<p><strong>数组的创建</strong><br>语法格式一：先声明再创建<br>数据类型[]  数组名；<br>数组名 = new 数据类型[数组长度];<br>int[]  arr;<br>arr=new int[10];<br>先声明数组，再创建了一个长度为10的整型数组。</p>
<p>语法格式二：声明的同时创建数组<br>数据类型[] 数组名 = new 数据类型[数组长度]；<br>int[] arr=new int[10];<br>创建长度为10的整型数组arr</p>
<p>注意：数组长度必须被指定。</p>
<p><strong>数组在内存中的存储</strong><br>数组会被分配连续的内存空间。<br>int[] a=new int[5];<br><img src="en-resource://database/5426:1" alt="fb0ffebda2e2229ef0f132a0ca11bbf1.png"></p>
<p>这是一个长度为5的整型数组，会在内存当中开辟一个连续的内存空间，对于整型数组来说它的默认值都是0，在这连续的内存空间当中，每个数组元素的值都是0，我们的数组名是一个对象，它指向数组的第一个元素。</p>
<p><strong>局部变量和数组的默认值问题<br>局部变量：</strong><br>我们在主方法、循环方法当中定义的局部变量，它都是没有默认值的，需要给局部变量赋值。<br>数组：数组是有默认值的，因为数组的本身其实是对象 。</p>
<p><strong>数组的初始化</strong><br>声明数组的同时给数组赋值，叫做数组的初始化。（前面提到的“new”叫做创建对象）</p>
<p>例：<br>int[] arr={1,2,3,4,5,6,7,8,9,10};<br>数组的长度就是初始化是所给的数组元素的个数。</p>
<p><strong>数组元素的引用</strong><br>语法格式：<br>数组名[下标];  //数组名、中括号、下标这三个部分看做是一个整体变量注意下标从0开始<br><img src="en-resource://database/5421:1" alt="32f1a85b31b198d888fdd6be994272de.png"></p>
<p>上面一行相当于内存空间，这10个元素分别存到这10个内存空间当中，并且是连续的。下面一行对应的是它的名字，下标从0开始<br><strong>数组长度：</strong><br>数组的长度就是数组元素的个数属性length表示数组的长度，如a.length。</p>
<p>超过数组定义的个数叫下标越界。</p>
<h3 id="一维数组应用"><a href="#一维数组应用" class="headerlink" title="一维数组应用"></a>一维数组应用</h3><h4 id="一维数组的应用"><a href="#一维数组的应用" class="headerlink" title="一维数组的应用"></a>一维数组的应用</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.array;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 声明一个整型数组</span></span><br><span class="line">        <span class="keyword">int</span>[] intArray;</span><br><span class="line">        <span class="comment">//声明一个字符串类型的数组</span></span><br><span class="line">        String strArray[];</span><br><span class="line">        <span class="comment">//创建数组</span></span><br><span class="line">        intArray=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">        strArray=<span class="keyword">new</span> String[<span class="number">10</span>];</span><br><span class="line">        <span class="comment">//声明数组的同时进行创建。</span></span><br><span class="line">        <span class="keyword">float</span>[] floatArray=<span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="comment">//初始化数组</span></span><br><span class="line">        <span class="keyword">char</span>[] ch= {<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>};</span><br><span class="line">        System.out.println(<span class="string">"ch数组的长度为：     "</span>+ch.length);</span><br><span class="line">        System.out.println(<span class="string">"intArray数组的第二个元素为："</span>+intArray[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(<span class="string">"strArray数组的第五个元素为："</span>+strArray[<span class="number">4</span>]);</span><br><span class="line">        System.out.println(<span class="string">"floatArray数组的最后一个元素为："</span>+floatArray[floatArray.length-<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">//循环为整型数组赋值 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++){</span><br><span class="line">            intArray[i]=i+<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//循环输出整型数组中的元素</span></span><br><span class="line">        System.out.println(<span class="string">"整型数组intArray的元素为："</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) {</span><br><span class="line">            System.out.print(intArray[i]+<span class="string">"   "</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a>单选题</h4><p>当数组下标越界时，会发生（）（选择一项）<br>A.  系统崩溃<br>B.  直接跳过<br>C.  抛出异常<br>D.  中止程序</p>
<p>正确答案： C</p>
<p><strong>参考解析：</strong><br>数组下标越界时会抛出异常。</p>
<h4 id="案例：求数组元素的累加和"><a href="#案例：求数组元素的累加和" class="headerlink" title="案例：求数组元素的累加和"></a>案例：求数组元素的累加和</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.array;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo1</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 求整型数组的累加和</span></span><br><span class="line">        <span class="comment">//定义整型数组</span></span><br><span class="line">        <span class="keyword">int</span>[] a=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">        Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从键盘接受数据，为数组元素赋值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) {</span><br><span class="line">            System.out.println(<span class="string">"请输入第"</span>+(i+<span class="number">1</span>)+<span class="string">"个元素："</span>);</span><br><span class="line">            a[i]=sc.nextInt();</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"数组元素的内容为："</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) {</span><br><span class="line">            System.out.print(a[i]+<span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//求数组元素的累加和</span></span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) {</span><br><span class="line">            sum=sum+a[i];</span><br><span class="line">        }</span><br><span class="line">    System.out.println();<span class="comment">//换行方法</span></span><br><span class="line">    System.out.println(<span class="string">"数组元素的累加和为："</span>+sum);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h4><p>求数组中能被3整除的元素并打印输出。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="code"><pre><span class="line">效果图：能被3整除的数组元素为：</span><br><span class="line">6</span><br><span class="line">12</span><br><span class="line">15</span><br></pre></td></tr></tbody></table></figure></div>
<p>任务<br>1、定义一个整型数组a并初始化<br>2、循环遍历数组，找出能被3整除的元素并打印输出</p>
<p><strong>原题</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">//定义一个整型数组，并初始化</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//循环遍历数组，找出能被3整除的元素并打印输出</span></span><br><span class="line"></span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">//定义一个整型数组，并初始化</span></span><br><span class="line">	    <span class="keyword">int</span>[] a = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">15</span>,<span class="number">16</span>};</span><br><span class="line">		<span class="comment">//循环遍历数组，找出能被3整除的元素并打印输出</span></span><br><span class="line">		System.out.println(<span class="string">"能被3整除的数组元素为："</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++){</span><br><span class="line">		    <span class="keyword">if</span>(a[i]%<span class="number">3</span>==<span class="number">0</span>){</span><br><span class="line">		        System.out.println(a[i]);</span><br><span class="line">		    }</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="案例：求数组元素的最大值"><a href="#案例：求数组元素的最大值" class="headerlink" title="案例：求数组元素的最大值"></a>案例：求数组元素的最大值</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.array;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo2</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 求数组元素的最大值</span></span><br><span class="line">        <span class="keyword">int</span>[] a= {<span class="number">34</span>,<span class="number">23</span>,<span class="number">78</span>,<span class="number">56</span>,<span class="number">31</span>};</span><br><span class="line">        <span class="keyword">int</span> max=a[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a.length;i++) {</span><br><span class="line">            <span class="keyword">if</span>(max&lt;a[i]) {</span><br><span class="line">                max=a[i];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"数组元素的最大值是："</span>+max);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="增强型for循环"><a href="#增强型for循环" class="headerlink" title="增强型for循环"></a>增强型for循环</h3><ul>
<li>又叫foreach循环</li>
<li>foreach循环应用：<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr={<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>};</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n:arr)</span><br><span class="line">System.out.println(n);</span><br></pre></td></tr></tbody></table></figure></div>
解释：int n 数组是什么类型的，我们这里就定义什么类型的变量。冒号不能少+数组名字。<br>执行过程：每次都把变量当中一个元素存放到变量n当中，然后进行变量值的输出。<br>终止条件：把数组遍历一遍，自动终止循环。</li>
</ul>
<p><strong>用增强for循环更改例题</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.array;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo1</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 求整型数组的累加和</span></span><br><span class="line">        <span class="comment">//定义整型数组</span></span><br><span class="line">        <span class="keyword">int</span>[] a=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">        Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//从键盘接受数据，为数组元素赋值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) {</span><br><span class="line">            System.out.println(<span class="string">"请输入第"</span>+(i+<span class="number">1</span>)+<span class="string">"个元素："</span>);</span><br><span class="line">            a[i]=sc.nextInt();</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"数组元素的内容为："</span>);</span><br><span class="line">        <span class="comment">//for(int i=0;i&lt;a.length;i++) {</span></span><br><span class="line">        <span class="comment">//    System.out.print(a[i]+" ");</span></span><br><span class="line">        <span class="comment">//}</span></span><br><span class="line">        <span class="comment">//用增强for循环改写代码。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n:a){</span><br><span class="line">        System.out.print(n+<span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//求数组元素的累加和</span></span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) {</span><br><span class="line">            sum=sum+a[i];</span><br><span class="line">        }</span><br><span class="line">    System.out.println();<span class="comment">//换行方法</span></span><br><span class="line">    System.out.println(<span class="string">"数组元素的累加和为："</span>+sum);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>如何对变量a，b的值进行交换。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">3</span>,b=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> temp;temp=a;a=b;b=temp;</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>对一组整数按照有小到大的顺序进行排序。<br><img src="en-resource://database/5431:1" alt="2ef3e9f804bd2b7617317f73b0059df1.png"></p>
<p>对数组当中相邻的两个数进行比较，把数组从头到尾比较一次以后，找出最大的值，放到数组末尾，第二次把数组第二大的值放到数组的倒数第二的位置，以此类推，直到数组从小到大排列。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.array;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 冒泡排序</span></span><br><span class="line">        <span class="keyword">int</span>[] a= {<span class="number">34</span>,<span class="number">53</span>,<span class="number">12</span>,<span class="number">32</span>,<span class="number">56</span>,<span class="number">17</span>};</span><br><span class="line">        System.out.println(<span class="string">"排序前的数组元素为："</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n:a) {</span><br><span class="line">            System.out.print(n+<span class="string">" "</span>); </span><br><span class="line">        }</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length-<span class="number">1</span>;i++) { </span><br><span class="line">        <span class="comment">//内重循环控制每趟排序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;a.length-i-<span class="number">1</span>;j++) {</span><br><span class="line">        <span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>]) {</span><br><span class="line">            temp=a[j];</span><br><span class="line">            a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">            a[j+<span class="number">1</span>]=temp;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">        System.out.println(<span class="string">"从小到大排序后的数组元素为："</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n:a) {</span><br><span class="line">            System.out.print(n+<span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="二维数组的应用"><a href="#二维数组的应用" class="headerlink" title="二维数组的应用"></a>二维数组的应用</h3><h4 id="二维数组的应用（上）"><a href="#二维数组的应用（上）" class="headerlink" title="二维数组的应用（上）"></a>二维数组的应用（上）</h4><ul>
<li>二维数组二维数组的声明和创建</li>
<li>二维数组的初始化</li>
<li>二维数组的引用</li>
</ul>
<p><strong>案例演示</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.array;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo5</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    <span class="comment">// 二维数组的声明</span></span><br><span class="line">    <span class="comment">//三种形式</span></span><br><span class="line">    <span class="comment">//声明int类型的二维数组</span></span><br><span class="line">    <span class="keyword">int</span>[][] intArray;</span><br><span class="line">    <span class="comment">//声明float类型的二维数组</span></span><br><span class="line">    <span class="keyword">float</span> floatArray[][];</span><br><span class="line">    <span class="comment">//声明double类型的二维数组</span></span><br><span class="line">    <span class="keyword">double</span>[] doubleArray[];</span><br><span class="line">    <span class="comment">//创建一个三行三列的int类型的数组</span></span><br><span class="line">    intArray=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">3</span>];<span class="comment">//第一个中括号表示行，第二个表示列。</span></span><br><span class="line">    System.out.println(<span class="string">"intArray数组的第3行第2列的元素为："</span>+intArray[<span class="number">2</span>][<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">//为第2行第3个元素赋值为9</span></span><br><span class="line">    intArray[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">9</span>;</span><br><span class="line">    System.out.println(<span class="string">"intArray数组第2行第3列的元素为："</span>+intArray[<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">    <span class="comment">//声明数组的同时进行创建</span></span><br><span class="line">    <span class="keyword">char</span>[][] ch=<span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">3</span>][<span class="number">5</span>];</span><br><span class="line">    <span class="comment">//创建float类型的数组时，只指定行数</span></span><br><span class="line">    floatArray=<span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">3</span>][];</span><br><span class="line">    <span class="comment">//System.out.println(floatArray[0][0]);</span></span><br><span class="line">    <span class="comment">//每行相当于一个一维数组，需要创建</span></span><br><span class="line">    floatArray[<span class="number">0</span>]=<span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">3</span>];<span class="comment">//第一行有三列</span></span><br><span class="line">    floatArray[<span class="number">1</span>]=<span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">4</span>];<span class="comment">//第二行有四列</span></span><br><span class="line">    floatArray[<span class="number">2</span>]=<span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">5</span>];<span class="comment">//第三行有5列</span></span><br><span class="line">    System.out.println(floatArray[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">//System.out.println(floatArray[0][3]);数组下标越界       </span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="二维数组的应用（下）"><a href="#二维数组的应用（下）" class="headerlink" title="二维数组的应用（下）"></a>二维数组的应用（下）</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.array;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo5</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//二维数组的初始化</span></span><br><span class="line">        <span class="keyword">int</span>[][] num= {{<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>},{<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>},{<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>}};</span><br><span class="line">        System.out.println(<span class="string">"num数组第1行第2列的元素为："</span>+num[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">        System.out.println(<span class="string">"num数组的行数为："</span>+num.length);</span><br><span class="line">        System.out.println(<span class="string">"num数组的列数为："</span>+num[<span class="number">0</span>].length);</span><br><span class="line">        <span class="keyword">int</span>[][] num1={{<span class="number">78</span>,<span class="number">98</span>},{<span class="number">65</span>,<span class="number">75</span>,<span class="number">63</span>},{<span class="number">98</span>}};</span><br><span class="line">        System.out.println(<span class="string">"num1数组的第一行的列数为："</span>+num1[<span class="number">0</span>].length);</span><br><span class="line">        <span class="comment">//循环输出二维数组的内容</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num1.length;i++) {</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num1[i].length;j++) {</span><br><span class="line">                System.out.print(num1[i][j]+<span class="string">" "</span>);</span><br><span class="line">            }</span><br><span class="line">        System.out.println();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>需要注意：</strong></p>
<ul>
<li>数组是引用数据类型</li>
<li>创建数组时，会开辟连续的内存空间</li>
<li>数组长度使用length属性获取</li>
<li>数组元素的下标从0开始</li>
<li>数组下标越界问题</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java基础通识1.2.4 单例模式</title>
    <url>/posts/1411647994/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>一、Java的编译基础</li>
<li>二、Java程序实际执行细节</li>
<li>三、使用eclipse开发Java程序</li>
</ul>
<a id="more"></a>

<h3 id="设计模式概述"><a href="#设计模式概述" class="headerlink" title="设计模式概述"></a>设计模式概述</h3><p>设计模式：<br>一套被反复使用、多数人知晓的经过分类编目的代码设计经验的总结。简而言之，设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。<br><img src="en-resource://database/5700:1" alt="6866d3f9fa743e5be098c829f94753e9.png"></p>
<p>创建型模式：关注对象创建过程的实际模式。<br>结构型模式：关注类与对象组合的实际模式。<br>行为型模式：更多的关注对象之间的通信过程。</p>
<p>设计模式基于场景的解决方案。<br>如果某个新场景的解决方案被认可，那我们就可以定义一个新的设计模式。</p>
<h3 id="单例模式概述"><a href="#单例模式概述" class="headerlink" title="单例模式概述"></a>单例模式概述</h3><h4 id="单例模式的定义和作用"><a href="#单例模式的定义和作用" class="headerlink" title="单例模式的定义和作用"></a>单例模式的定义和作用</h4><p><strong>目的：</strong><br>使的类的一个对象成为该类系统中的唯一实例。</p>
<p><strong>定义：</strong><br>一个类有且仅有一个实例，并且自行实例化向整个系统提供。</p>
<p><strong>要点：</strong></p>
<ul>
<li>某个类只能有一个实例。</li>
<li>必须自行创建实例。</li>
<li>必须自行向整个系统提供这个实例。</li>
</ul>
<p><strong>实现：</strong></p>
<ul>
<li>只提供私有的构造方法。</li>
<li>含有一个该类的静态私有对象。</li>
<li>提供一个静态（一个类有且仅有一个实例）的公有方法用于创建、获取静态私有对象。</li>
</ul>
<p><img src="en-resource://database/5705:1" alt="b23ba4bfe52dbc69b2d057bd611d9512.png"></p>
<h5 id="选择练习"><a href="#选择练习" class="headerlink" title="选择练习"></a>选择练习</h5><p>单例模式的实现必须满足（）个条件。（选择三项）<br>A、类中的构造方法的访问权限必须设置为私有的<br>B、类中的构造方法必须用protected修饰<br>C、必须在类中创建该类的静态私有对象<br>D、在类中提供一个公有的静态方法用于创建、获取静态私有对象</p>
<p>正确答案： A,C,D</p>
<p>参考解析：<br>本题考查单例模式的实现，单例模式的实现需要满足的条件：1、只提供私有的构造方法；2、含有一个该类的静态私有对象；3、提供一个静态的公有方法用于创建、获取静态私有对象。故ACD选项正确。</p>
<h3 id="饿汉模式vs懒汉模式"><a href="#饿汉模式vs懒汉模式" class="headerlink" title="饿汉模式vs懒汉模式"></a>饿汉模式vs懒汉模式</h3><h4 id="饿汉式的代码实现"><a href="#饿汉式的代码实现" class="headerlink" title="饿汉式的代码实现"></a>饿汉式的代码实现</h4><p>SingletonOne.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">//饿汉式：创建对象实例的时候直接初始化  空间换时间</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonOne</span> </span>{</span><br><span class="line">       <span class="comment">//1、创建类中私有构造</span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="title">SingletonOne</span><span class="params">()</span></span>{</span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">//2、创建该类型的私有静态实例</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> SingletonOne instance=<span class="keyword">new</span> SingletonOne();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//3、创建公有静态方法返回静态实例对象</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonOne <span class="title">getInstance</span><span class="params">()</span></span>{</span><br><span class="line">             <span class="keyword">return</span> instance;</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.singleton.SingletonOne;</span><br><span class="line"><span class="keyword">import</span> com.imooc.singleton.SingletonTwo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		SingletonOne one =SingletonOne.getInstance();<span class="comment">//通过类名调用。</span></span><br><span class="line">		SingletonOne two=SingletonOne.getInstance();<span class="comment">//通过类名调用。</span></span><br><span class="line">		System.out.println(one);</span><br><span class="line">		System.out.println(two);</span><br><span class="line">		System.out.println(<span class="string">"==================================="</span>);</span><br><span class="line">		SingletonTwo one1 =SingletonTwo.getInstance();</span><br><span class="line">		SingletonTwo two1=SingletonTwo.getInstance();</span><br><span class="line">		System.out.println(one1);</span><br><span class="line">		System.out.println(two1);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><img src="en-resource://database/5710:1" alt="179eeb328f803475888c31a9d1e7d39a.png"><br>对于饿汉式而言，它是一种典型的空间换时间的一种操作形式，在任意进行加载的时候，静态实例对象，已经完成了实例化操作。相对而言我们在使用的时候速度是快的，同样的，因为在任意加载的时候对象就产生出来了，所以它的存在周期也是相对较长的。</p>
<h5 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h5><p>某公司研发星球维护系统，请使用饿汉式单例模式的实现思想，设计编写地球类。程序运行参考效果图如下：<br><img src="en-resource://database/5712:1" alt="bc70b6c5f7e319a32964d713b14f93ba.png"></p>
<p>任务</p>
<p>实现步骤：</p>
<p>Earth类</p>
<ul>
<li>定义私有构造方法，并在构造方法中打印输出“地球诞生”</li>
<li>结合饿汉模式，完成单例对象定义，实例化及静态方法设置</li>
</ul>
<p>测试类</p>
<ul>
<li>结合已有输出提示、运行效果图完成对象实例创建及对比（具体对象引用信息不限）</li>
</ul>
<p><strong>原题</strong><br>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		System.out.println(<span class="string">"第一个地球创建中。。。。"</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"第二个地球创建中。。。。"</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"第三个地球创建中。。。。"</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"问：三个地球是同一个么？"</span>);</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div>
<p>Earth.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Earth</span> </span>{</span><br><span class="line">     <span class="comment">//定义私有构造方法，并在构造方法中打印输出“地球诞生”</span></span><br><span class="line">	</span><br><span class="line">	 <span class="comment">//定义私有静态类对象并完成实例化</span></span><br><span class="line">		</span><br><span class="line">	 <span class="comment">//定义公有静态方法返回类内的私有静态对象</span></span><br><span class="line">	</span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答</strong><br>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"第一个地球创建中。。。。"</span>);</span><br><span class="line">        Earth one=Earth.getEarth();</span><br><span class="line">        System.out.println(<span class="string">"第二个地球创建中。。。。"</span>);</span><br><span class="line">        Earth two=Earth.getEarth();</span><br><span class="line">        System.out.println(<span class="string">"第三个地球创建中。。。。"</span>);</span><br><span class="line">        Earth three=Earth.getEarth();</span><br><span class="line">        System.out.println(<span class="string">"问：三个地球是同一个么？"</span>);</span><br><span class="line">        System.out.println(one);</span><br><span class="line">        System.out.println(two);</span><br><span class="line">        System.out.println(three);</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Earth.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Earth</span> </span>{</span><br><span class="line">    <span class="comment">//定义私有构造方法，并在构造方法中打印输出“地球诞生”</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Earth</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"地球诞生"</span>);</span><br><span class="line">    }</span><br><span class="line">     <span class="comment">//定义私有静态类对象并完成实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Earth earth=<span class="keyword">new</span> Earth();    </span><br><span class="line">     <span class="comment">//定义公有静态方法返回类内的私有静态对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Earth <span class="title">getEarth</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> earth;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="懒汉式的代码实现"><a href="#懒汉式的代码实现" class="headerlink" title="懒汉式的代码实现"></a>懒汉式的代码实现</h4><p>SingletonTwo.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.singleton;</span><br><span class="line"><span class="comment">//懒汉式：类内实例对象创建时并不直接初始化，直到第一次调用get方法时，才完成初始化操作</span></span><br><span class="line"><span class="comment">//时间换空间</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTwo</span> </span>{</span><br><span class="line">       <span class="comment">//1、创建私有构造方法。</span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="title">SingletonTwo</span><span class="params">()</span></span>{</span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">//2、创建静态的该类实例对象。</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> SingletonTwo instance=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//3、创建开放的静态方法提供实例对象。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonTwo <span class="title">getInstance</span><span class="params">()</span></span>{</span><br><span class="line">             <span class="keyword">if</span>(instance==<span class="keyword">null</span>){</span><br><span class="line">                instance=<span class="keyword">new</span> SingletonTwo();</span><br><span class="line">             }</span><br><span class="line">             <span class="keyword">return</span> instance;</span><br><span class="line">       }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div>
<p>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.singleton.SingletonOne;</span><br><span class="line"><span class="keyword">import</span> com.imooc.singleton.SingletonTwo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		SingletonOne one =SingletonOne.getInstance();</span><br><span class="line">		SingletonOne two=SingletonOne.getInstance();</span><br><span class="line">		System.out.println(one);</span><br><span class="line">		System.out.println(two);</span><br><span class="line">		System.out.println(<span class="string">"==================================="</span>);</span><br><span class="line">		SingletonTwo one1 =SingletonTwo.getInstance();</span><br><span class="line">		SingletonTwo two1=SingletonTwo.getInstance();</span><br><span class="line">		System.out.println(one1);</span><br><span class="line">		System.out.println(two1);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div>
<h5 id="编程练习-1"><a href="#编程练习-1" class="headerlink" title="编程练习"></a>编程练习</h5><p>请使用懒汉式单例模式的实现思想，设计编写皇帝类。程序运行参考效果图如下：<br><img src="en-resource://database/5714:1" alt="6e105f46b67619164f6f5a78027381ee.png"></p>
<p>任务<br>实现步骤：<br>1、定义私有构造方法<br>2、定义私有静态类对象<br>3、定义公有静态方法返回类内的私有静态对象，结合判断实现对象实例化<br>4、编写<br>测试类，<br>结合注释完成测试单例的皇帝类信息，程序效果参考运行效果图（具体对象引用信息不限）</p>
<p><strong>原题</strong><br>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		System.out.println(<span class="string">"创建1号皇帝对象"</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"创建2号皇帝对象"</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"创建3号皇帝对象"</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"三个皇帝对象依次是："</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Emperor.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emperor</span> </span>{</span><br><span class="line">     <span class="comment">//定义私有构造方法</span></span><br><span class="line"></span><br><span class="line">	 <span class="comment">//定义私有静态类对象</span></span><br><span class="line"></span><br><span class="line">	 <span class="comment">//定义公有静态方法返回类内的私有静态对象</span></span><br><span class="line">		</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答</strong><br>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"创建1号皇帝对象"</span>);</span><br><span class="line">        System.out.println(<span class="string">"创建2号皇帝对象"</span>);</span><br><span class="line">        System.out.println(<span class="string">"创建3号皇帝对象"</span>);</span><br><span class="line">        System.out.println(<span class="string">"三个皇帝对象依次是："</span>);</span><br><span class="line">        Emperor noe = Emperor.getEmp();</span><br><span class="line">        Emperor two = Emperor.getEmp();</span><br><span class="line">        Emperor nwo = Emperor.getEmp();</span><br><span class="line">        System.out.println(noe);</span><br><span class="line">        System.out.println(two);</span><br><span class="line">        System.out.println(nwo);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Emperor.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emperor</span> </span>{</span><br><span class="line">    <span class="comment">//定义私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Emperor</span><span class="params">()</span></span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//定义私有静态类对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Emperor emp = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//定义公有静态方法返回类内的私有静态对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Emperor <span class="title">getEmp</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (emp == <span class="keyword">null</span>)</span><br><span class="line">            emp = <span class="keyword">new</span> Emperor();</span><br><span class="line">        <span class="keyword">return</span> emp;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h5 id="饿汉式-pk-懒汉式"><a href="#饿汉式-pk-懒汉式" class="headerlink" title="饿汉式 pk 懒汉式"></a>饿汉式 pk 懒汉式</h5><p><img src="en-resource://database/5719:1" alt="483ea4b2e158ecf6c47d8519058248f3.png"><br><strong>线程安全比较：</strong><br>饿汉式线程安全：<br>因为在类加载时就已经进行了对象的实例化创建，即便多线程并发操作，它访问的实例对象是唯一的，所以线程是安全的。<br>懒汉式存在线程风险：<br>因为在第一次使用时，才会初始化，当多个线程并发操作的时候，由于时间线的切换，则可能导致一定线程风险。懒汉式现场风险解决方法同步锁双重校验锁静态内部类枚举</p>
<h5 id="选择练习-1"><a href="#选择练习-1" class="headerlink" title="选择练习"></a>选择练习</h5><p>下列关于懒汉式和饿汉式的说法错误的是（）（选择两项）<br>A饿汉式在第一次使用时进行实例化<br>B懒汉式在类加载时就创建实例<br>C饿汉式的线程是安全的<br>D懒汉式存在线程风险<br>正确答案： A,B<br>参考解析：<br>本题考查单例模式，关于懒汉式和饿汉式的说明如下：饿汉式：在类加载时就创建实例；以空间换时间，速度快；线程安全懒汉式：在第一次使用时进行实例化；以时间换空间 ；存在线程风险故AB选项正确。</p>
<h3 id="课程总结"><a href="#课程总结" class="headerlink" title="课程总结"></a>课程总结</h3><h4 id="单例模式的特点及适用场景"><a href="#单例模式的特点及适用场景" class="headerlink" title="单例模式的特点及适用场景"></a>单例模式的特点及适用场景</h4><p>单例模式<br>优点：<br>在内存中只有一个对象，节省内存空间。避免频繁的创建消毁对象，提高性能。避免对共享资源的多重占用。</p>
<p>缺点：<br>扩展比较困难。如果实例化后的对象长期不利用，系统间默认为垃圾进行回收，造成对象状态丢失。</p>
<p>使用场景：<br>创建对象时占用资源过多，但同时又需要用到该类对象。对系统内次元要求统一读写，如读写配置信息。当多个实例存在可能引起程序逻辑错误，如号码生成器。</p>
</body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java基础通识1.3.6 泛型</title>
    <url>/posts/3937315254/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>一、Java的编译基础</li>
<li>二、Java程序实际执行细节</li>
<li>三、使用eclipse开发Java程序</li>
</ul>
<a id="more"></a>

<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="泛型概述"><a href="#泛型概述" class="headerlink" title="泛型概述"></a>泛型概述</h4><p><strong>为什么使用泛型</strong><br>在Java中增加泛型之前，泛型程序设计使用继承来实现的。这样做的安全隐患：</p>
<ul>
<li>需要强制转换。</li>
<li>可向集合中添加任意类型的对象，存在风险。</li>
</ul>
<p>  <strong>泛型的使用</strong></p>
<ul>
<li>定义集合对象的时候，把泛型写在一对尖括号内（下例前后都是）：<ul>
<li>List<string> list=new ArrayList<string>();</string></string></li>
</ul>
</li>
<li>Java SE7及以后的版本中，构造方法中可以省略泛型类型。</li>
<li>List<string> list=new ArrayList&lt;&gt;();</string></li>
</ul>
<p>  <strong>多态与泛型</strong><br>  </p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//以此为前提条件。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>{}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>{}</span><br><span class="line"><span class="comment">//以下为错误示范。</span></span><br><span class="line">List&lt;Animal&gt; list=<span class="keyword">new</span> ArrayList&lt;Cat&gt;();<span class="comment">//变量声明的类型必须匹配传递给实际对象的类型。前父后子错，前后必须一致。</span></span><br><span class="line">List&lt;Object&gt; list=<span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">List&lt;Number&gt; numbers=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h4 id="多选题"><a href="#多选题" class="headerlink" title="多选题"></a>多选题</h4><p>以下语句正确的是：（选择两项）</p>
<p>A.  List<string> list=new ArrayList<string>();<br>B.  List<integer> list=new ArrayList&lt;&gt;();<br>C.  已知Cat是Animal类的子类，则List<animal> list=new ArrayList<cat>();<br>D.  List<object> list=new ArrayList<integer>();<p></p>
<p>正确答案： A,B</p>
<p><strong>参考解析：</strong><br>本题考查泛型的基本使用，AB选项正确。<br>因为泛型类型必须一致，所以下面两条语句是错误的，故CD选项错误。<br>List<animal> list=new ArrayList<cat>();<br>List<animal> list=new ArrayList<cat>();</cat></animal></cat></animal></p>
<h3 id="泛型作为方法参数"><a href="#泛型作为方法参数" class="headerlink" title="泛型作为方法参数"></a>泛型作为方法参数</h3><p><strong>案例需求</strong></p>
<ul>
<li>定义一个抽象类Goods，包含抽象法sell()。</li>
<li>分别定义类Book、Clothes、和Shoes继承Goods，并实现sell()方法，输出一句话，如：sell books。</li>
<li>定义一个商品销售类GoodsSeller，模拟销售，包括方法：</li>
<li>public void sellGoods(List<goods> goods),循环调用List对象的sell()方法。</goods></li>
<li>测试。</li>
</ul>
<p><strong>Goods.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>; <span class="comment">// abstract抽象类。</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>Book.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">extends</span> <span class="title">Goods</span> </span>{</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>{</span><br><span class="line">             System.out.println(<span class="string">"sell books"</span>);</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>shoes.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shoes</span> <span class="keyword">extends</span> <span class="title">Goods</span> </span>{</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>{</span><br><span class="line">             System.out.println(<span class="string">"sell shoes"</span>);</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>clothes</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Clothes</span> <span class="keyword">extends</span> <span class="title">Goods</span> </span>{</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>{</span><br><span class="line">             System.out.println(<span class="string">"sell clothes"</span>);</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>GoodsSeller.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsSeller</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sellGoods</span><span class="params">(List&lt;? extends Goods&gt; goods)</span> </span>{ <span class="comment">// 如果没有"? extends"，那么泛型的内容是什么？传进来List的跟它的形式必须是一致的。</span></span><br><span class="line">             <span class="comment">//调用集合中的sell方法。</span></span><br><span class="line">             <span class="keyword">for</span>(Goods g:goods) {</span><br><span class="line">                    g.sell();</span><br><span class="line">             }</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>GoodsTest.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsTest</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             <span class="comment">// 定义book相关的List。</span></span><br><span class="line">             List&lt;Book&gt; books=<span class="keyword">new</span> ArrayList&lt;Book&gt;();</span><br><span class="line">             books.add(<span class="keyword">new</span> Book());</span><br><span class="line">             books.add(<span class="keyword">new</span> Book());</span><br><span class="line">             <span class="comment">//定义clothes相关的List。</span></span><br><span class="line">             List&lt;Clothes&gt; clothes=<span class="keyword">new</span> ArrayList&lt;Clothes&gt;();</span><br><span class="line">             clothes.add(<span class="keyword">new</span> Clothes());</span><br><span class="line">             clothes.add(<span class="keyword">new</span> Clothes());</span><br><span class="line">             <span class="comment">//定义shoes相关的List。</span></span><br><span class="line">             List&lt;Shoes&gt; shoes=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">             shoes.add(<span class="keyword">new</span> Shoes());</span><br><span class="line">             shoes.add(<span class="keyword">new</span> Shoes());</span><br><span class="line">           </span><br><span class="line">             GoodsSeller goodsSeller=<span class="keyword">new</span> GoodsSeller();</span><br><span class="line">             goodsSeller.sellGoods(books);</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h4><p>通过练习，掌握泛型作为方法参数的应用，具体内容见任务要求。运行效果如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">小狗巴迪在做游戏</span><br><span class="line">小狗巴迪在做游戏</span><br><span class="line">小猫花花在做游戏</span><br><span class="line">小猫凡凡在做游戏</span><br></pre></td></tr></tbody></table></figure></div>

<p>任务</p>
<p>完成如下任务：<br>定义一个抽象类Animal，包括名字属性、getter和setter方法、抽象方法，用该抽象方法模拟小动物做游戏。<br>定义两个类Dog、Cat分别继承自抽象类Animal，并实现抽象方法，方法体中按运行效果输出一句话即可。<br> 定义AnimalPlay类，在该类中定义一个方法，参数是List集合，主要功能是可以对任何Animal子类的集合进行处理，循环调用集合中动物的做游戏方法。<br>定义测试类，在测试类中分别定义两个Dog和Cat类的对象，并添加到对应的集合中，然后调用AnimalPlay类中的方法，得到如运行结果所示的内容。</p>
<p><strong>原题</strong><br><strong>Test.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">//定义List并添加Dog类对象</span></span><br><span class="line">	</span><br><span class="line">		<span class="comment">//定义List并添加Cat类对象</span></span><br><span class="line">	</span><br><span class="line">		<span class="comment">//使用AnimalPlay类的方法，按照演示效果输出内容</span></span><br><span class="line">		  </span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>Animal.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>{</span><br><span class="line">   <span class="comment">//按任务要求实现该类</span></span><br><span class="line"> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>Dog.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>{</span><br><span class="line">     <span class="comment">//按任务要求实现该类</span></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>Cat.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>{</span><br><span class="line">     <span class="comment">//按任务要求实现该类</span></span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>AnimalPlay.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalPlay</span></span>{</span><br><span class="line"> <span class="comment">//按任务要求实现该类   </span></span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答</strong><br><strong>Test.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">//定义List并添加Dog类对象</span></span><br><span class="line">		List&lt;Dog&gt; dog=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	    dog.add(<span class="keyword">new</span> Dog(<span class="string">"巴迪"</span>));</span><br><span class="line">	    dog.add(<span class="keyword">new</span> Dog(<span class="string">"豆豆"</span>));</span><br><span class="line">		<span class="comment">//定义List并添加Cat类对象</span></span><br><span class="line">		List&lt;Cat&gt; cat=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	    cat.add(<span class="keyword">new</span> Cat(<span class="string">"花花"</span>));</span><br><span class="line">	    cat.add(<span class="keyword">new</span> Cat(<span class="string">"凡凡"</span>));</span><br><span class="line">		<span class="comment">//使用AnimalPlay类的方法，按照演示效果输出内容</span></span><br><span class="line">		AnimalPlay animalPlay=<span class="keyword">new</span> AnimalPlay();</span><br><span class="line">		animalPlay.playAnimal(dog);</span><br><span class="line">		animalPlay.playAnimal(cat);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>Animal.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>{</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name)</span> </span>{</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>Dog.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>{</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name)</span> </span>{</span><br><span class="line">		<span class="keyword">super</span>(name);</span><br><span class="line">		</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>{</span><br><span class="line">		System.out.println(<span class="string">"小狗"</span>+<span class="keyword">this</span>.getName()+<span class="string">"在做游戏"</span>);</span><br><span class="line"></span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>Cat.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>{</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name)</span> </span>{</span><br><span class="line">		<span class="keyword">super</span>(name);</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>{</span><br><span class="line">		System.out.println(<span class="string">"小猫"</span>+<span class="keyword">this</span>.getName()+<span class="string">"在做游戏"</span>);</span><br><span class="line"></span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>AnimalPlay.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalPlay</span> </span>{</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playAnimal</span><span class="params">(List&lt;? extends Animal&gt; animal)</span> </span>{</span><br><span class="line">		<span class="comment">// 调用集合中的sell方法</span></span><br><span class="line">		<span class="keyword">for</span> (Animal a : animal) {</span><br><span class="line">			a.play();</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="自定义泛型类"><a href="#自定义泛型类" class="headerlink" title="自定义泛型类"></a>自定义泛型类</h3><h4 id="自定义泛型（上）"><a href="#自定义泛型（上）" class="headerlink" title="自定义泛型（上）"></a>自定义泛型（上）</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumGeneric</span>&lt;<span class="title">T</span>&gt; </span>{</span><br><span class="line">       <span class="keyword">private</span> T num;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> T <span class="title">getNum</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> num;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(T num)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.num=num;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">//测试。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             NumGeneric&lt;Integer&gt; intNum=<span class="keyword">new</span> NumGeneric&lt;&gt;();</span><br><span class="line">             intNum.setNum(<span class="number">10</span>);</span><br><span class="line">             System.out.println(<span class="string">"Integer:"</span>+intNum.getNum());</span><br><span class="line"></span><br><span class="line">             NumGeneric&lt;Float&gt; floatNum=<span class="keyword">new</span> NumGeneric&lt;&gt;();</span><br><span class="line">             floatNum.setNum(<span class="number">5.0f</span>);</span><br><span class="line">             System.out.println(<span class="string">"Float:"</span>+floatNum.getNum());</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="自定义泛型（下）"><a href="#自定义泛型（下）" class="headerlink" title="自定义泛型（下）"></a>自定义泛型（下）</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoNumGeneric</span>&lt;<span class="title">T</span>,<span class="title">X</span>&gt; </span>{</span><br><span class="line">       <span class="keyword">private</span> T num1;</span><br><span class="line">       <span class="keyword">private</span> X num2;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">genNum</span><span class="params">(T num1,X num2)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.num1=num1;</span><br><span class="line">             <span class="keyword">this</span>.num2=num2;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       public T &lt;u&gt;getNum1&lt;/u&gt;&lt;u&gt;()&lt;/u&gt; {</span><br><span class="line">             <span class="keyword">return</span> num1;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       public void &lt;u&gt;getNum1&lt;/u&gt;&lt;u&gt;()&lt;/u&gt; {</span><br><span class="line">             &lt;u&gt;this&lt;/u&gt;&lt;u&gt;.&lt;/u&gt;&lt;u&gt;num1&lt;/u&gt;&lt;u&gt;=&lt;/u&gt;&lt;u&gt;num1&lt;/u&gt;;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> X <span class="title">getNum2</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> num2;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum2</span><span class="params">(X num2)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.num2=num2;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             TwoNumGeneric&lt;Integer,Float&gt; numObj=<span class="keyword">new</span> TwoNumGeneric&lt;&gt;();</span><br><span class="line">             numObj.genNum(<span class="number">25</span>,<span class="number">5.0f</span>);</span><br><span class="line"></span><br><span class="line">             System.out.println(<span class="string">"num1="</span>+numObj.getNum1());</span><br><span class="line">             System.out.println(<span class="string">"num2="</span>+numObj.getNum2());</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="自定义泛型方法"><a href="#自定义泛型方法" class="headerlink" title="自定义泛型方法"></a>自定义泛型方法</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericMethod</span> </span>{</span><br><span class="line">       <span class="comment">//泛型方法不一定要写到泛型类当中。</span></span><br><span class="line">       <span class="keyword">public</span>&lt;T extends Number&gt; <span class="function"><span class="keyword">void</span> <span class="title">printValue</span><span class="params">(T t)</span> </span>{</span><br><span class="line">             System.out.println(t);</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             GenericMethod gm=<span class="keyword">new</span> GenericMethod();</span><br><span class="line">             gm.printValue(<span class="string">"hello"</span>);<span class="comment">//extends Number以及表明"hello"无法继承。</span></span><br><span class="line">             gm.printValue(<span class="number">123</span>);</span><br><span class="line">             gm.printValue(<span class="number">5.0f</span>);</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a>单选题</h4><p>已知如下代码，关于运行结果，以下说法正确的是：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>{</span><br><span class="line">    String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName()+<span class="string">"在讲课！"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName()+<span class="string">"在学习！"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">    Test test = <span class="keyword">new</span> Test();</span><br><span class="line">    test.display(<span class="keyword">new</span> Teacher(<span class="string">"王老师"</span>));</span><br><span class="line">    test.display(<span class="keyword">new</span> Student(<span class="string">"张三"</span>));</span><br><span class="line">    test.display(<span class="string">"李四在学习"</span>);</span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure></div>
<p>A.  编译错误<br>B.  发生运行时异常<br>C.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">输出结果为：</span><br><span class="line">王老师在讲课！</span><br><span class="line">张三在学习！</span><br><span class="line">李四在学习！</span><br></pre></td></tr></tbody></table></figure></div>

<p>D.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">输出结果为：</span><br><span class="line">王老师在讲课！</span><br><span class="line">张三在学习！</span><br></pre></td></tr></tbody></table></figure></div>
<p>正确答案： A</p>
<p><strong>参考解析：</strong><br>本题考查自定义泛型方法，因为<t extends="" person="">的限制，则display()方法只能是Person及其子类可以使用。因此，test.display(“李四在学习!”);这行代码会发生编译错误。故A选项正确。</t></p>
</integer></object></cat></animal></integer></string></string></p></body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>《一颗开花的树》席慕蓉</title>
    <url>/posts/303255476/</url>
    <content><![CDATA[<html><head></head><body><h3 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h3><p>如何让你遇见我，<br>在我最美丽的时刻。</p>
<a id="more"></a>

<p>为这，<br>我已在佛前求了五百年，<br>求佛让我们结一段尘缘，<br>佛於是把我化做一棵树，<br>长在你必经的路旁。</p>
<p>阳光下，<br>慎重地开满了花，<br>朵朵都是我前世的盼望。</p>
<p>当你走近，<br>请你细听，<br>那颤抖的叶，<br>是我等待的热情。</p>
<p>而当你终於无视地走过，<br>在你身後落了一地的，<br>朋友啊，<br>那不是花瓣，<br>那是我凋零的心。</p>
<hr>
<h3 id="阅读随记："><a href="#阅读随记：" class="headerlink" title="阅读随记："></a>阅读随记：</h3><p>“如何让你遇见我，在我最美的时刻？”</p>
<p>每个人都会遇到这个问题，</p>
<p>每个人都有属于自己的答案。</p>
<p>我：</p>
<p>“如何让我遇见你，在那任何一个时刻。”</p>
<p>其实只要是喜欢的人，她任何时刻都应该是最美的，随着阅历的增长，确实会明白这一点。因为这种美，是超越了物理层面的美，她美在你们一起所经历的一切，她美在你们心有灵犀，她美在你们之间感情的不可分割，美在她望向你的那一汪秋水。</p>
<p>你见过她盛装打扮，你也见过她不修边幅，你见过她的一切，你接受她的一切，好的，坏的，你都接受，你也都爱。她亦是如此。</p>
<p>那…</p>
<p>这相逢，</p>
<p>又何必是在那最美的时刻？</p>
</body></html>]]></content>
      <categories>
        <category>诗词美文</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>《个人博客介绍》</title>
    <url>/posts/2643675631/</url>
    <content><![CDATA[<html><head></head><body><h3 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h3><p>这个博客的搭建主要有两个初衷：</p>
<h4 id="一、总结学到的技术，记录自己的思考。"><a href="#一、总结学到的技术，记录自己的思考。" class="headerlink" title="一、总结学到的技术，记录自己的思考。"></a>一、总结学到的技术，记录自己的思考。</h4><a id="more"></a>

<p>1.1  将学习到的技术，经过自己实践、验证、思考、总结后，写出可复现、较详尽、易理解的说明文档。记录一只小菜鸟的技术成长之路，是该博客的主要职能之一。</p>
<p>1.2 该博客另一个主要的职能是记录自己对一些问题的思考和一些自己所犯的错误的一些总结与反思，属于思想上的修炼之路吧。期待一个更成熟、更强大的自己。</p>
<p>1.3 无论是技术还是生活，毕竟是第一次做人，很多东西都不懂！在面对一些不曾涉猎的问题，会做出很多错误的选择，浪费很多时间，走很多弯路。所以想在自己努力成长的同时，如果能给需要的朋友，提供一点反面参考的经验，让朋友们少浪费些时间，少走点弯路，那我所犯的错误，所做的蠢事，或许也是有一点意义的吧。</p>
<p>1.4 有一分热，便发一分光，不必等候火炬。星星之火，可以燎原。共同成长，与君共勉！</p>
<h4 id="二、记录自己的生活。"><a href="#二、记录自己的生活。" class="headerlink" title="二、记录自己的生活。"></a>二、记录自己的生活。</h4><p>社交软件也可以记录生活，但是有两个方面社交软件达不到我的需求：</p>
<p>2.1 无法做单纯的记录。</p>
<p>有些时候，仅仅只是希望做一份记录，不想打扰到别人，但社交软件的强制社交性，会导致他只要打开社交软件，就一定会看到我仅仅想做记录的动态。</p>
<p>工作也是生活的一部分，但是要在社交软件中发布某些和工作有关的工作记录，就会感觉很奇怪。大家一天工作忙完了，已经很累了，想开朋友圈看看有什么轻松有趣的动态，如果被迫考到我这还全是工作有关的一堆事，那不是挺糟心的嘛，干脆社交软件就做点轻松愉快的生活记录，岂不是更好。</p>
<p>2.2 或多或少总有不满意的地方，并且无法进行调整。</p>
<p>各个软件总体来说都有自己的局限性，文字、图片、视频、PDF、代码块、网站引用连接等等，要么就是这个功能缺失，要么就是那个字数、文件大小、或者是文件类型有限制，反正总是有不尽人意的地方，在个人博客中，想用什么全看自己，没有的功能也可以根据自己的需求增加，并且一处编写，随处引用，这样就方便了很多了。</p>
<p>2.3 先上传些诗词美文，用作测试。以便确定相关功能正常运行。</p>
</body></html>]]></content>
  </entry>
  <entry>
    <title>《我会采更多的菊》 纳丁·斯特尔</title>
    <url>/posts/4025597166/</url>
    <content><![CDATA[<html><head></head><body><h4 id="译文："><a href="#译文：" class="headerlink" title="译文："></a>译文：</h4><p>如果我能够从头活过，<br>我会试着犯更多的错。<br>我会放松一点，我会灵活一点。<br>我会比这一趟过得傻。</p>
<a id="more"></a>

<p>很少有什么事情能让我当真。<br>我会疯狂一些，我会少讲点卫生。<br>我会冒更多的险。我会更经常的旅行。<br>我会爬更多的山，游更多的河，看更多的日落。<br>我会多吃冰激凌，少吃豆子。<br>我会惹更多的麻烦，可是不在想象中担忧。</p>
<p>你看，我小心翼翼地稳健地理智地活着。<br>一个又一个小时，一天又一天。<br>噢，我有过难忘的时刻。<br>如果我能够重来一次，我会要更多这样的时刻。</p>
<p>事实上，我不需要别的什么，<br>仅仅是时刻，一个接着一个。<br>而不是每天都操心着以后的漫长日子。</p>
<p>我曾经不论到哪里都不忘记带上：<br>温度计，热水壶，雨衣和降落伞。<br>如果我能够重来一次，<br>我会到处走走，什么都试试，并且轻装上阵。</p>
<p>如果我能够重头活过，<br>我会延长打赤脚的时光。<br>从尽早的春天到尽晚的秋天。<br>我会更经常的逃学。<br>我不会考那么高的分数，除非是一不小心。<br>我会多骑些旋转木马，<br>我会采更多的雏菊。</p>
<h4 id="阅读随机："><a href="#阅读随机：" class="headerlink" title="阅读随机："></a>阅读随机：</h4><p>诗词永远是诗词，诗词是艺术的一种形式，而艺术是经过人刻意加工，有意识得去放大、缩小某些局部特性的，这无关好坏对错，这就是艺术，来源于生活，但永远不是生活。</p>
<p>至于高不高于生活？我的态度：艺术仅是生活的一部分，即不高，也不低。它值得人民向往、期盼、欣赏。但不值得崇拜、神化、迷醉其中。</p>
<p>此诗歌中的意境无意是轻松的、愉悦的、令人神往的。这是无可厚非且无需过多探讨的。</p>
<p>但更想讨论的是，从现实意义出发，我个人的主观观点：</p>
<p>如果我能从头活过，我会努力犯更少的错。</p>
<p>原因无它，现实世界是有因有果，具有客观的事物发展规律的，且我们每个人和这个世界有着千丝万缕的联系，我少犯点错误，就能让别人少因我遭受些牵连、麻烦、甚至是痛苦，至少让和我亲近的人少受些。</p>
<p>我指的这些牵连、麻烦、甚至是痛苦，是指那些无妄之灾，人在家中坐，锅从天上来的那种。</p>
<p>虽然，我从小到大也没有给家中惹什么大麻烦，比较愧疚的是自己以前没努力学习，上了个三本大学，让家里承受了更多的经济压力，这是比较内疚的，让父母为我犯的错去买单，也有负于整个家庭对我的付出与关爱！</p>
<p>少犯些错，也是为自己负责。尽量少的犯错，才能不断的向良性的方向发展，才能越来越好。</p>
<p>加油！</p>
</body></html>]]></content>
      <categories>
        <category>诗词美文</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>《断章》卞之琳</title>
    <url>/posts/435292665/</url>
    <content><![CDATA[<html><head></head><body><h4 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h4><p>你站在桥上看风景，<br>看风景的人在楼上看你。 </p>
<p>明月装饰了你的窗，<br>你装饰了别人的梦。</p>
<a id="more"></a>

<hr>
<h4 id="阅读随记："><a href="#阅读随记：" class="headerlink" title="阅读随记："></a>阅读随记：</h4><p>其实我发现我会比较喜欢这种简单的文字，每一句单独拉出来，似乎很平常，但是组合在一起，这当中勾勒出的意境，就很美。</p>
</body></html>]]></content>
      <categories>
        <category>诗词美文</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>Java报警报错处理方案记录</title>
    <url>/posts/218316291/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>一、Java基础  报警报错处理方案</li>
<li>二、JavaWeb  报警报错处理方案</li>
<li>三、Java数据库  报警报错处理方案</li>
<li>四、Java框架  报错处理方案</li>
</ul>
<a id="more"></a>

<p><strong>目录详则</strong></p>
<ul>
<li>一、Java基础  报警报错处理方案<ul>
<li>Java基础语法<ul>
<li>常量、变量</li>
<li>运算符</li>
<li>流程控制 – 选择结构</li>
<li>流程控制 – 循环结构</li>
<li>数组 – 一维数组</li>
<li>数组 – 二维数组</li>
<li>方法</li>
<li>位移与统计</li>
</ul>
</li>
<li>Java面对对象<ul>
<li>面向对象</li>
<li>封装</li>
<li>继承</li>
<li>单例模式</li>
<li>多态</li>
</ul>
</li>
<li>Java常用工具类<ul>
<li>异常</li>
<li>包装类</li>
<li>字符串</li>
<li>集合、集合排序</li>
<li>泛型</li>
<li>多线程</li>
<li>输入输出流</li>
</ul>
</li>
</ul>
</li>
<li>二、JavaWeb  报警报错处理方案<ul>
<li>HTML、CSS</li>
<li>JavaScript</li>
<li>Java Web<ul>
<li>xml</li>
<li>Servlet</li>
<li>JSP</li>
<li>JSTL / EL表达式</li>
</ul>
</li>
</ul>
</li>
<li>三、Java数据库  报警报错处理方案<ul>
<li>数据库基础<ul>
<li>MySQL基础 – 数据类型</li>
<li>MySQL基础 – 表的管理</li>
<li>MySQL基础 – 数据管理</li>
<li>MySQL基础 – 常用函数</li>
<li>JDBC</li>
<li>反射</li>
</ul>
</li>
<li>MyBatis<ul>
<li>Maven</li>
<li>工厂模式</li>
<li>MyBatis</li>
</ul>
</li>
<li>Redis数据库与Linux</li>
</ul>
</li>
<li>四、Java框架  报错处理方案</li>
</ul>
<h3 id="一、Java基础-报警报错处理方案"><a href="#一、Java基础-报警报错处理方案" class="headerlink" title="一、Java基础  报警报错处理方案"></a>一、Java基础  报警报错处理方案</h3><h3 id="二、JavaWeb-报警报错处理方案"><a href="#二、JavaWeb-报警报错处理方案" class="headerlink" title="二、JavaWeb  报警报错处理方案"></a>二、JavaWeb  报警报错处理方案</h3><h4 id="HTML、CSS"><a href="#HTML、CSS" class="headerlink" title="HTML、CSS"></a>HTML、CSS</h4><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><h4 id="Java-Web"><a href="#Java-Web" class="headerlink" title="Java Web"></a>Java Web</h4><h3 id="三、Java数据库-报警报错处理方案"><a href="#三、Java数据库-报警报错处理方案" class="headerlink" title="三、Java数据库  报警报错处理方案"></a>三、Java数据库  报警报错处理方案</h3><h3 id="四、Java框架-报错处理方案"><a href="#四、Java框架-报错处理方案" class="headerlink" title="四、Java框架  报错处理方案"></a>四、Java框架  报错处理方案</h3><p>新建maven项目时，Run中报警告：No archetype found in remote catalog. Defaulting to internal catalog.【在远程目录中没有找到原型。默认为内部编录。】，如图：</p>
<p>解决方案：</p>
<p>1.可以不用管【因为使用了maven模版构建项目，要从网上获取模版，然而没有找到这个模版或者网络慢，导致获取失败 】，选择File —&gt; 再选择Close Project，关闭项目后重启就可以了。</p>
<p>2.参考 <a href="https://link.zhihu.com/?target=https://www.cnblogs.com/loufangcheng/p/12861762.html">https://www.cnblogs.com/loufangcheng/p/12861762.html</a> 这篇文章</p>
</body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>《沙扬娜拉——赠日本女郎》徐志摩</title>
    <url>/posts/2802668681/</url>
    <content><![CDATA[<html><head></head><body><h3 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h3><p>最是那一低头的温柔，</p>
<p>象一朵水莲花不胜凉风的娇羞，</p>
<p>道一声珍重，道一声珍重，</p>
<p>那一声珍重里有蜜甜的忧愁——沙扬娜拉！</p>
<a id="more"></a>



<hr>
<h3 id="阅读随记："><a href="#阅读随记：" class="headerlink" title="阅读随记："></a>阅读随记：</h3><p>诗词中，徐志摩的文采是真的很好，现实中，他的名声是真的不好。</p>
<p>可能徐是最有文化的渣男了吧，哈哈…</p>
<p>其实人无完人，每个人都会犯错，特别是在年轻时、三观不够稳定的时候，甚至犯了错自己都不知道。但好在人是会成长的，人是可以去改变自己的。虽然做到不容易，但不是不可能做到。永远都有机会…</p>
<p>作品之外，自有人评说。我只管欣赏他挥洒的才华就好了。</p>
<p>读徐留下来的这些作品，真的很容易代入到他诗词中，文风轻柔，描绘却细腻准确，用词用字灵动情深，一读便能感受到字词情涌，才思飞扬。</p>
<p>美！喜欢！</p>
</body></html>]]></content>
      <categories>
        <category>诗词美文</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>编程思想</title>
    <url>/posts/2724880937/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h3><ul>
<li><p>一、面向过程编程</p>
</li>
<li><p>二、函数式编程</p>
</li>
<li><p>三、面向对象编程</p>
</li>
<li><p>四、面向过程与面向对象的区别</p>
</li>
</ul>
<a id="more"></a>

<h3 id="一、面向过程编程"><a href="#一、面向过程编程" class="headerlink" title="一、面向过程编程"></a>一、面向过程编程</h3><p>“面向过程”(Procedure Oriented)是一种以过程为中心的编程思想。这些都是以什么正在发生为目标进行编程，不同于面向对象的是谁在受影响。与面向对象明显的不同就是封装、继承、类。<br><strong>特性</strong>：模块化 流程化<br><strong>优点</strong>：性能比面向对象高, 因为类调用时需要实例化，开销比较大，比较消耗资源;<br>单片机、嵌入式开发、Linux/Unix等一般采用面向过程开发，性能是最重要的因素。<br><strong>缺点</strong>：没有面向对象易维护、易复用、易扩展</p>
<p>例如下面这个学生入学的例子：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">第一个用户的信息</span><br><span class="line">student_a = {</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'小明'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">23</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'男'</span>,</span><br><span class="line">    <span class="comment">// 座右铭</span></span><br><span class="line">    <span class="string">'matto'</span>: <span class="string">'人生苦短， 我用python!'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">第二个用户的信息</span><br><span class="line">student_b = {</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'小红'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">21</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'女'</span>,</span><br><span class="line">    # 座右铭</span><br><span class="line">    <span class="string">'matto'</span>: <span class="string">'合理安排时间，就等于节约时间。'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">第三个用户的信息</span><br><span class="line">student_c = {</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'小李'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">26</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'男'</span>,</span><br><span class="line">    # 座右铭</span><br><span class="line">    <span class="string">'matto'</span>: <span class="string">'挫折不是惩罚而是学习的机会。'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">roll</span><span class="params">(studentDict)</span>:</span></span><br><span class="line"><span class="function">    """</span></span><br><span class="line"><span class="function">    入学过程封装的函数</span></span><br><span class="line"><span class="function">    :return:</span></span><br><span class="line"><span class="function">    """</span></span><br><span class="line"><span class="function">    # 字典的get方法: 如果key值不存在， 直接返回为空；</span></span><br><span class="line"><span class="function">    <span class="title">print</span><span class="params">(<span class="string">"正在办理手续"</span>.center(<span class="number">20</span>, <span class="string">'*'</span>)</span>)</span></span><br><span class="line"><span class="function">    <span class="title">print</span><span class="params">(<span class="string">"正在注册用户[%s]信息"</span> %(studentDict.get(<span class="string">'name'</span>)</span>))</span></span><br><span class="line"><span class="function">    <span class="title">print</span><span class="params">(<span class="string">"用户[%s]正在入学"</span> %(studentDict.get(<span class="string">'name'</span>)</span>))</span></span><br><span class="line"><span class="function">    <span class="title">print</span><span class="params">(<span class="string">"用户[%s]正在上课"</span> %(studentDict.get(<span class="string">'name'</span>)</span>))</span></span><br><span class="line"><span class="function">    <span class="title">print</span><span class="params">(<span class="string">"用户[%s]正在自我介绍"</span> %(studentDict.get(<span class="string">'name'</span>)</span>))</span></span><br><span class="line"><span class="function">    <span class="keyword">for</span> key, value in studentDict.<span class="title">items</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function">        <span class="title">print</span><span class="params">(key, <span class="string">':'</span>, value)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">roll</span><span class="params">(student_a)</span>       </span></span><br><span class="line"><span class="function"><span class="title">roll</span><span class="params">(student_b)</span> </span></span><br><span class="line"><span class="function"><span class="title">roll</span><span class="params">(student_c)</span> </span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></tbody></table></figure></div>
<p>上面的代码就是典型的面向过程编程。<br>面向过程：根据业务逻辑从上到下写代码 。面向过程编程最易被初学者接受，其往往用一长段代码来实现指定功能，开发过程的思路是将数据与函数按照执行的逻辑顺序组织在一起，数据与函数分开考虑。</p>
<p>考虑现实生活中，我们的思维方式是放在学生这个个人上，是学生做了自我介<br>绍。而不是像我们刚刚写出的代码，先有了介绍的行为，再去看介绍了谁。<br>用我们的现实思维方式该怎么用程序表达呢？这就要用到面向对象的编程思想了。</p>
<p>面向对象：将数据与函数绑定到一起，进行封装，这样能够更快速的开发程序，减少了重复代码的重写过程</p>
<h3 id="二、函数式编程"><a href="#二、函数式编程" class="headerlink" title="二、函数式编程"></a>二、函数式编程</h3><p>函数式编程是种编程方式，它将电脑运算视为函数的计算。函数编程语言最重要的基础是λ演算（lambda calculus），而且λ演算的函数可以接受函数当作输入（参数）和输出（返回值）。</p>
<p>主要思想: 把运算过程尽量写成一系列嵌套的函数调用。<br>例如：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function">def <span class="title">add</span><span class="params">(a,b)</span>:</span></span><br><span class="line"><span class="function">    return a+b</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">def <span class="title">multi</span><span class="params">(a,b)</span>:</span></span><br><span class="line"><span class="function">    return a*b</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(multi(add(<span class="number">1</span>,<span class="number">2</span>)</span>,<span class="title">add</span><span class="params">(<span class="number">2</span>,<span class="number">3</span>)</span>))</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>Python 不是也不大可能会成为一种函数式编程语言，但是它支持许多有价值的函数式编程语言构建。也有些表现得像函数式编程机制（如：内建函数 filter()、map()、reduce()），但是从传统上也不能被认为是函数式编程语言的构建。</p>
<h3 id="三、面向对象编程"><a href="#三、面向对象编程" class="headerlink" title="三、面向对象编程"></a>三、面向对象编程</h3><p>面向对象是按人们认识客观世界的系统思维方式，采用基于对象（实体）的概念建立模型，模拟客观世界分析、设计、实现软件的办法。通过面向对象的理念使计算机软件系统能与现实世界中的系统一一对应。</p>
<p><strong>特性</strong>：抽象 封装 继承 多态<br><strong>优点</strong>：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更加灵活、更加易于维护<br><strong>缺点</strong>：性能比面向过程低四、数据类型转换</p>
<h3 id="四、面向过程与面向对象的区别"><a href="#四、面向过程与面向对象的区别" class="headerlink" title="四、面向过程与面向对象的区别"></a>四、面向过程与面向对象的区别</h3><p>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了；<br>面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为。</p>
<p>可以拿生活中的实例来理解面向过程与面向对象，例如五子棋。</p>
<p>面向过程的设计思路就是首先分析问题的步骤：1、开始游戏，2、黑子先走，3、绘制画面，4、判断输赢，5、轮到白子，6、绘制画面，7、判断输赢，8、返回步骤2，9、输出最后结果。把上面每个步骤用不同的方法来实现。</p>
<p>如果是面向对象的设计思想来解决问题。面向对象的设计则是从另外的思路来解决问题。整个五子棋可以分为1、黑白双方，这两方的行为是一模一样的，2、棋盘系统，负责绘制画面，3、规则系统，负责判定诸如犯规、输赢等。第一类对象（玩家对象）负责接受用户输入，并告知第二类对象（棋盘对象）棋子布局的变化，棋盘对象接收到了棋子的变化就要负责在屏幕上面显示出这种变化，同时利用第三类对象（规则系统）来对棋局进行判定。</p>
<p>可以明显地看出，面向对象是以功能来划分问题，而不是步骤。同样是绘制棋局，这样的行为在面向过程的设计中分散在了多个步骤中，很可能出现不同的绘制版本，因为通常设计人员会考虑到实际情况进行各种各样的简化。而面向对象的设计中，绘图只可能在棋盘对象中出现，从而保证了绘图的统一。</p>
</body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java基础通识1.1.2 常量与变量</title>
    <url>/posts/233426257/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h3><ul>
<li>一、标识符与关键字。</li>
<li>二、变量。</li>
<li>三、数据类型的字面值及变量定义。</li>
<li>四、数据类型转换。</li>
<li>五、常量。</li>
</ul>
<a id="more"></a>

<h3 id="标识符与关键字"><a href="#标识符与关键字" class="headerlink" title="标识符与关键字"></a>标识符与关键字</h3><h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><p>类的名字就叫做标识符，单个字母叫做字符，连起来的叫做”字符串”。</p>
<p>标识符的命名规则：</p>
<ul>
<li>标识符可以由字母、数字、下划线( _ )和美元符( $ )组成，不能以数字开头，也不能包含空格。</li>
<li>标识符严格区分大小写。</li>
<li>标识符不能是Java关键字和保留字。</li>
<li>标识符的命名最好能反映出其作用。</li>
</ul>
<p>请区分下列标识符那些是合法的，哪些是非法的：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">Hello <span class="comment">// 合法。</span></span><br><span class="line">hello_imooc <span class="comment">// 合法。</span></span><br><span class="line">_hello <span class="comment">// 合法。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> // 非法，不能是<span class="title">java</span>关键字和保留字。</span></span><br><span class="line"><span class="class"><span class="title">Void</span> // 合法，严格区分大小写。</span></span><br><span class="line"><span class="class">123<span class="title">abc</span> // 非法，不能以数字开头。</span></span><br><span class="line"><span class="class"><span class="title">abc</span>$123 // 合法。</span></span><br><span class="line"><span class="class"><span class="title">abc</span> 123 // 非法，不能包含空格。</span></span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><p><img src="/images/theKeyword.png" alt="关键字" title="关键字"></p>
<p><strong>多选题</strong></p>
<p>下面标识符哪些是合法的？（选择三项）</p>
<p>A.  $value<br>B.  Void<br>C.  class<br>D.  1abc<br>E.  my value<br>F.  void_class</p>
<p>正确答案： A,B,F </p>
<p><strong>参考解析：</strong></p>
<p>本题考查的是标识符的命名规则，标识符可以由字母、数字、下划线和美元符组成，不能以数字开头；区分大小写，不能是关键字。<br>A选项正确，B选项正确，void是关键字，但是标识符是区分大小写的，因此Void和void不是同一个标识符。 C选项错误，class是关键字，不能作为标识符。 D选项错误，标识符不能以数字开头。E选项错误，标识符不能包含空格。<br><strong>注意：</strong><br>F选项正确，void和class都是关键字，但是中间用下划线连起来了，组成一个新的标识符是没有问题的。</p>
<p>单选题</p>
<p>下列哪一个选项不是Java的关键字？（选择一项）<br>A.  class<br>B.  package<br>C.  Void<br>D.  static</p>
<p>正确答案： C</p>
<p><strong>参考解析：</strong><br>本题考查的是Java的关键字，Java语言是区分大小写的，因此Void不是关键字，void才是。</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h4><ul>
<li>变量是程序当中数据的临时存放场所。</li>
<li>变量的三个元素：变量类型、变量名和变量值。</li>
</ul>
<p><img src="/images/variable.png" alt="&quot;什么是变量&quot;" title="什么是变量"></p>
<p><strong>变量名的命名规则</strong></p>
<ul>
<li>满足标识符命名规则<ul>
<li>标识符可以由字母、数字、下划线( _ )和美元符( $ )组成，不能以数字开头，也不能包含空格。</li>
<li>标识符严格区分大小写。</li>
<li>标识符不能是Java关键字和保留字。</li>
<li>标识符的命名最好能反映出其作用。</li>
</ul>
</li>
<li>符合驼峰法命名规范（第一个单词全部小写，后面单词首字母大写。例：stuName）</li>
<li>尽量简单，做到见名知意。</li>
<li>变量名的长度没有限制。</li>
</ul>
<p><strong>类的命名规则</strong></p>
<ul>
<li>满足Pascal命名法规范（组成类命名的所有单词首字母都要大写。）</li>
</ul>
<p><strong>总结归纳：</strong></p>
<table>
<thead>
<tr>
<th>命名规则</th>
<th>变量名</th>
<th>标识符</th>
<th>类</th>
</tr>
</thead>
<tbody><tr>
<td>字母、数字、下划线、美元符组成</td>
<td>√</td>
<td>√</td>
<td>×</td>
</tr>
<tr>
<td>不能由数字开头，也不能包含空格</td>
<td>√</td>
<td>√</td>
<td>×</td>
</tr>
<tr>
<td>严格区分大小写</td>
<td>√</td>
<td>√</td>
<td>×</td>
</tr>
<tr>
<td>不能是Java关键字和保留字</td>
<td>√</td>
<td>√</td>
<td>×</td>
</tr>
<tr>
<td>尽量简单、见名知意</td>
<td>√</td>
<td>√</td>
<td>×</td>
</tr>
<tr>
<td>没有长度限制</td>
<td>√</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td>驼峰法命名规范</td>
<td>√</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td>Pascal命名法命名规范</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
</tbody></table>
<h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p><img src="/images/dataType.png" alt="数据类型" title="数据类型"></p>
<p><strong>布尔型（boolean）：</strong> boolean的两个值为true和false；true代表真，false代表假。<br><strong>整数类型：</strong> 数学当中的整数。<br><strong>浮点类型：</strong> 数学当中的小数。</p>
<p><strong>多选题</strong></p>
<p>下列可以表示数值型数据的数据类型是？（选择三项）</p>
<p>A.  byte</p>
<p>B.  float  </p>
<p>C.  boolean  </p>
<p>D.  long</p>
<p>正确答案： A,B,D </p>
<p><strong>参考解析：</strong><br>本题考查基本数据类型，byte,long表示整数类型的数值型数据，float表示浮点类型的数值型数据，boolean表示布尔型数据，不属于数值型数据。</p>
<p><strong>单选题</strong></p>
<p>关于数据类型的说法错误的是？（选择一项）<br>A.  数据类型分为基本数据类型和引用数据类型<br>B.  数组属于基本数据类型<br>C.  类属于引用数据类型<br>D.  int和double属于基本数据类型</p>
<p>正确答案： B </p>
<p><strong>参考解析：</strong><br>本题考查数据类型的内容，ACD选项是关于数据类型的正确说法，B选项的描述是错误的，数组属于引用数据类型。</p>
<h4 id="基本数据类型详解"><a href="#基本数据类型详解" class="headerlink" title="基本数据类型详解"></a>基本数据类型详解</h4><table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">说明</th>
<th align="center">字节（Byte）</th>
<th align="center">二进制位（bit：单位：位）</th>
</tr>
</thead>
<tbody><tr>
<td align="center">byte</td>
<td align="center">字节型</td>
<td align="center">1</td>
<td align="center">8</td>
</tr>
<tr>
<td align="center">short</td>
<td align="center">短整型</td>
<td align="center">2</td>
<td align="center">16</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center">整型</td>
<td align="center">4</td>
<td align="center">32</td>
</tr>
<tr>
<td align="center">long</td>
<td align="center">长整型</td>
<td align="center">8</td>
<td align="center">64</td>
</tr>
<tr>
<td align="center">float</td>
<td align="center">单精度浮点型</td>
<td align="center">4</td>
<td align="center">32</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">双精度浮点型</td>
<td align="center">8</td>
<td align="center">64</td>
</tr>
<tr>
<td align="center">char</td>
<td align="center">字符型</td>
<td align="center">2</td>
<td align="center">16</td>
</tr>
<tr>
<td align="center">boolean</td>
<td align="center">布尔型</td>
<td align="center">1</td>
<td align="center">8</td>
</tr>
</tbody></table>
<ul>
<li>1字节 = 8个二进制位</li>
</ul>
<h3 id="数据类型的字面值及变量定义"><a href="#数据类型的字面值及变量定义" class="headerlink" title="数据类型的字面值及变量定义"></a>数据类型的字面值及变量定义</h3><h4 id="整型字面值及变量声明"><a href="#整型字面值及变量声明" class="headerlink" title="整型字面值及变量声明"></a>整型字面值及变量声明</h4><p><strong>整型字面值</strong><br>Java中有三种表示整数的方法：</p>
<ul>
<li>十进制：日常使用的就是十进制表示方法。</li>
<li>八进制：以0开头，包括0-7的数字。</li>
<li>十六进制：以0x或0X开头，包括0-9的数字，及字母a-f，A-F。（a表示数字10，以此类推。）如：0x12，0xabcf，0XABCFF，123，023，0x1357，0X3c，0x1abcL（长整型数据，L大小写皆可。）</li>
</ul>
<p><strong>变量声明</strong></p>
<ul>
<li>声明变量格式：”数据类型  变量名;”。</li>
</ul>
<p>示例：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n; <span class="comment">// 声明整型变量n。</span></span><br><span class="line"><span class="keyword">long</span> count; <span class="comment">// 声明长整型变量count。</span></span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>赋值</strong></p>
<ul>
<li>使用“=”运算符进行赋值</li>
<li>“=”叫作赋值运算符，将运算符右边的值赋给左边的变量。</li>
</ul>
<p>示例：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n;  <span class="comment">// 定义int型变量n </span></span><br><span class="line">n=<span class="number">3</span>;; <span class="comment">// 将3赋值给n</span></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">3</span>; <span class="comment">// 在定义变量的同时给变量赋值，即变量的初始化。</span></span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>变量定义</strong></p>
<ul>
<li>int octal=037；//定义int类型变量存放八进制数据。</li>
<li>long longNumber=0xa2cdf3ffL；//定义变量存放十六进制长整型数据。</li>
<li>short shortNumber=123；//定义变量存放短整型数据。</li>
<li>byte b=10；  //定义变量存放byte类型数据。</li>
</ul>
<p><strong>多选题</strong></p>
<p>下列关于赋值运算符的说法正确的是？（选择两项）<br>A.  使用“=”给变量进行赋值<br>B.  使用“==”给变量进行赋值<br>C.  “=”叫作赋值运算符，将运算符右边的值赋给左边的变量<br>D.  “=”叫作赋值运算符，将运算符左边的值赋给右边的变</p>
<p>量正确答案： A,C </p>
<p><strong>参考解析：</strong></p>
<p>本题考查的是赋值运算符的概念，在Java中“=”是赋值运算符， 是将运算符右边的值赋值给左边的变量。 “==”是关系运算符。因此AC选项正确。</p>
<p><strong>单选题</strong></p>
<p>以下哪个不是合法的int类型字面值的表示方式？（选择一项）</p>
<p>A.  0x34  </p>
<p>B.  026  </p>
<p>C.  1000  </p>
<p>D.  0x23dfL</p>
<p>正确答案： D </p>
<p><strong>参考解析：</strong><br>本题考查整型字母值的表示方式，整型的字面值可以是二进制、十进制、八进制和十六进制。A选项是十六进制表示，B选项是八进制表示，C选项是十进制表示，D选项0x23dfL末尾有L，表示长整型的字面值，不是int类型字面值。</p>
<p><strong>单选题</strong></p>
<p>选择练习下面语句的输出结果是？（选择一项）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x=<span class="number">56</span>;</span><br><span class="line">System.out.println(<span class="string">"x="</span>+x);</span><br></pre></td></tr></tbody></table></figure></div>
<p>A.  x=x</p>
<p>B.  x=56</p>
<p>C.  56=56</p>
<p>D.  56=x</p>
<p>正确答案： B </p>
<p><strong>参考解析：</strong><br>本题考查字符串和基本数据类型的连接运算。双引号引起来的内容是字符串，字符串的内容是直接输出的，用加号连接整型变量，整型变量x是直接输出x的值的 。因此输出结果是x=56，B选项正确。</p>
<h4 id="浮点型字面值"><a href="#浮点型字面值" class="headerlink" title="浮点型字面值"></a>浮点型字面值</h4><p><strong>浮点型字面值</strong></p>
<ul>
<li>浮点型字面值默认情况下表示double类型，也可以在值后加d或D。如：123.43d或123.43D。</li>
<li>表示float类型，则需要在字面值后加f或F。</li>
<li>如：23.4f或23.4F。</li>
</ul>
<p><strong>选择题</strong></p>
<p>以下对double类型字面值的表示错误的是？（选择一项）<br>A.  1.23<br>B.  1.23d<br>C.  1.23D<br>D.  1.23f</p>
<p>正确答案： D<br><strong>参考解析：</strong><br>本题考查double类型字面值的表示。在Java中，形如1.23的字面值默认是double类型的，还可以在数据后面加上d或者D，所以A、B、C三个选项是正确的。1.23f是float类型字面值的表示方式，因此D选项错误。</p>
<p><strong>选择练习</strong></p>
<p>以下语句哪个是错误的？（选择一项）<br>A.  double d=12.3d;<br>B.  double d=12.3D;<br>C.  float f=1.23f;<br>D.  float f=1.23;</p>
<p>正确答案： D</p>
<p><strong>参考解析：</strong><br>本题考查的是浮点型的字面值表示，以及如何给浮点型变量赋值。A选项将double类型的字面值12.3d赋值给double类型的变量d，没有问题。B选项和A选项类似，只是字面值是12.3D，最后的字母是大写的D。double类型字面值在表示的时候，末尾可以是d或D。C选项将float类型的字面值1.23f赋值给float类型的变量，也没有问题。D选项float f=1.23;1.23后面没有跟字母，默认表示的是double类型的字面值，将double类型的数据赋值给float类型会出现编译错误。本题是选择错误的语句，所以选D。</p>
<h4 id="浮点型案例"><a href="#浮点型案例" class="headerlink" title="浮点型案例"></a>浮点型案例</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FloatDemo</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>{</span><br><span class="line">        <span class="comment">// 定义一个单精度浮点型变量，存放1234.567</span></span><br><span class="line">        <span class="keyword">float</span> f=<span class="number">1234.567f</span>;</span><br><span class="line">        System.out.println(<span class="string">"f="</span>+f);</span><br><span class="line">        <span class="comment">// 定义一个双精度浮点型变量，存放1234.567</span></span><br><span class="line">        <span class="keyword">double</span> d=<span class="number">1234.567</span>;</span><br><span class="line">        System.out.println(<span class="string">"d="</span>+d);</span><br><span class="line">        <span class="comment">// 将整型赋值给浮点型</span></span><br><span class="line">        <span class="keyword">double</span> d1=<span class="number">1234</span>;</span><br><span class="line">        System.out.println(<span class="string">"d1="</span>+d1);</span><br><span class="line">        <span class="comment">// 变量间的赋值</span></span><br><span class="line">        <span class="keyword">double</span> d2=d;</span><br><span class="line">        System.out.println(<span class="string">"d2="</span>+d2);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>运行结果：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">f=<span class="number">1234.567</span></span><br><span class="line">d=<span class="number">1234.567</span></span><br><span class="line">d1=<span class="number">1234.0</span></span><br><span class="line">d2=<span class="number">1234.567</span></span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>3-9 编程练习</strong><br>分别定义float、double、int类型的数据，并打印输出。<br>效果图:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">f1=<span class="number">98.4</span>;</span><br><span class="line">f2=<span class="number">98.4</span>;</span><br><span class="line">n=<span class="number">55</span>;</span><br><span class="line">d1=<span class="number">555.3</span>;</span><br><span class="line">复制后d1的值为：<span class="number">55.0</span>;</span><br></pre></td></tr></tbody></table></figure></div>


<p>任务<br>1、定义一个float类型的变量f1，值为98.4。<br>2、定义一个float类型的变量f2，将f1的值赋值给f2。<br>3、定义一个整型变量n，值为55。<br>4、定义一个double类型的变量d1，值为555.3。<br>5、将n的值赋值给d1。</p>
<p><strong>原题</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FloatDemo</span> </span>{</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 定义一个float类型的变量f1，值为98.4。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义一个float类型的变量f2，将f1的值赋值给f2。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义一个整型变量n，值为55。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义一个double类型的变量d1，值为555.3。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将n的值赋值给d1。</span></span><br><span class="line">        </span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FloatDemo</span> </span>{</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">// 定义一个float类型的变量f1，值为98.4。</span></span><br><span class="line">		Float f1=<span class="number">98.4f</span>;</span><br><span class="line">		System.out.println(<span class="string">"f1="</span>+f1);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//定义一个float类型的变量f2，将f1的值赋值给f2。</span></span><br><span class="line">		Float f2=f1;</span><br><span class="line">		System.out.println(<span class="string">"f2="</span>+f2);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//定义一个整型变量n，值为55。</span></span><br><span class="line">		<span class="keyword">int</span> n=<span class="number">55</span>;</span><br><span class="line">		System.out.println(<span class="string">"n="</span>+n);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//定义一个double类型的变量d1，值为555.3。</span></span><br><span class="line">		<span class="keyword">double</span> d1=<span class="number">555.3d</span>;</span><br><span class="line">		System.out.println(<span class="string">"d1="</span>+d1);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//将n的值赋值给d1</span></span><br><span class="line">		<span class="keyword">double</span> d2=n;</span><br><span class="line">		System.out.println(<span class="string">"赋值后d1的值为："</span>+d2);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="局部变量的存储方式"><a href="#局部变量的存储方式" class="headerlink" title="局部变量的存储方式"></a>局部变量的存储方式</h4><p><strong>基本数据类型变量的存储</strong></p>
<ul>
<li>数据类型分为基本数据类型和引用数据类型。</li>
<li>引用数据类型包括：数组、类、接口等。</li>
<li>类定义的变量又叫“对象”。</li>
</ul>
<p><strong>按照作用范围分为：</strong></p>
<ul>
<li>类级、对象实例级、方法级、块级。</li>
<li>方法级的变量又叫做“局部变量”。</li>
</ul>
<p><img src="/images/storageOfVariables.png" alt="&quot;基本数据类型变量的存储&quot;" title="基本数据类型变量的存储"></p>
<p>当前我们在主方法中定义的局部变量是存储在栈当中的。</p>
<p><img src="en-resource://database/2655:1" alt="764ea360179daabbb833bc302d506913.png"></p>
<ul>
<li>int n=100;   定义变量的同时对变量进行初始化。</li>
<li>在执行此条语句的同时会在栈中开辟出int大小的空间，int占用4字节，即32个2进制位的，空间开辟好以后我们把100这个整型字面值存储到开辟的空间中了。在这里我们可以把这个n看作是100所在空间的别名，n就是代表100，后面有运算可以直接用 n参与运算，它就是100。</li>
</ul>
<h4 id="字符型字面值"><a href="#字符型字面值" class="headerlink" title="字符型字面值"></a>字符型字面值</h4><ul>
<li>字符型字面值用单引号内的单个字符表示。如：’a’, ‘b’, ‘c’, ‘$’。</li>
<li>必须是英文状态下的单引号，否则会报错。</li>
<li>单引号内必须只有一个字符。</li>
</ul>
<p>如何定义字符型变量：</p>
<ul>
<li>char a= ‘a’；</li>
<li>char ch=65；</li>
</ul>
<p><strong>char和string的区别：</strong></p>
<p>char 为字符类型bai,这个没错du<br>而string 只能是装char类型zhi的一个dao容器类类型,实例了它以后,它就是zhuan一个容器,可以用shu它来装字符.<br>把string 当作是字符串和字符串类型都是不准确的<br>打个比方:<br>string *p=new string(“123456”);<br>意思为实例了一个字符容器,它里面装的为”123456”.<br>此时p的值跟它里面字符串的首的地址值不相等,所以可以判断它不是字符串,如果想获取它字符串的首地址可以这样: p-&gt;c_str();<br>所以别用学的英语来判断编程里面的概念东西<br>如果是这样 vector<int> rec; 难道这个就是所谓的整型串</int></p>
<p><strong>ASCII码</strong></p>
<ul>
<li>ASCII（American Standard code for Information Interchange，美国标准信息交换代码）。</li>
<li>基于拉丁字母的一套电脑编码系统。</li>
<li>主要用于显示现代英语和其西欧语言。</li>
</ul>
<p><strong>ASCII码表示</strong></p>
<ul>
<li><p>使用7位或8位二进制数组合来表示128或256中 可能的字符。</p>
<ul>
<li>7位二进制数组合——标准ASCII码。</li>
<li>8位二进制数组合（后128位）——扩展ASCII码。</li>
</ul>
<p><img src="en-resource://database/2657:1" alt="174d7f44f26541e6de6d1fff11a1586b.png"></p>
</li>
</ul>
<p>如果字面值超出char类型所表示的数据范围（0-65535），需要进行强制类型转换。</p>
<p><strong>单选题</strong></p>
<p>下面代码运行后的结果为：（选择一项）</p>
<p><img src="en-resource://database/2659:1" alt="0d23f0b726413952959056c0af6caec5.png"></p>
<p>A.  A        B.  65C.  A    65D.  A     A</p>
<p>正确答案： D</p>
<p><strong>参考解析：</strong><br>本题考查字符类型和整型之间的转换，D选项是正确的。字符‘A’输出时仍然是A，而整型65是大写字母’A’的ASCII码值，因为c1是char类型的变量，因此会转行成字符型输出.故输出两行，每行输出一个A。</p>
<p><strong>单选题</strong></p>
<p>以下字符型字面值中，不合法的是？（选择一项）<br>A.  ‘@’        B.  ‘&amp;’        C.  “M”        D.  ‘课’</p>
<p>正确答案： C</p>
<p><strong>参考解析：</strong><br>本题考查字符型字面值的表示，字符型字面值是用单引号引起来的，并且单引号里面只能有一个字符，可以是汉字。因此ABD选项的内容是正确的。用双引号引起来的是字符串字面值，因此C选项的内容是不合法的，本题选不合法的字符型字面值表示，所以选C。</p>
<p><strong>单选题</strong></p>
<p>以下哪个选项是字符型字面值的正确表示方式？（选择一项）<br>A.F        B.’F’        C.’EF’        D.”AB”</p>
<p>正确答案： B</p>
<p><strong>参考解析：</strong></p>
<p>本题考查字符型字面值的表示方式，其正确表示是：用单引号引起来，并且只能有一个字符，因此B选项正确。A选项没有单引号，C选项单引号引起来的有两个字符，D选项用双引号引起来两个字符，是字符串的表示方式。</p>
<p><strong>编程练习</strong></p>
<p>定义字符型变量，赋值后输出。<br>效果图如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">c=S</span><br><span class="line">c1=N</span><br></pre></td></tr></tbody></table></figure></div>
<p>任务</p>
<ol>
<li><pre><code>定义字符型变量c，赋值为'S'并输出
</code></pre>
</li>
<li><pre><code>定义字符变量c1，并赋值为78，输出c1
</code></pre>
</li>
</ol>
<p><strong>原题：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharTest</span> </span>{</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 定义字符变量c，并赋值为'S'     </span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//输出c的值            //定义字符变量c1，并赋值为78 </span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//输出c1的值 </span></span><br><span class="line">        </span><br><span class="line">        }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharTest</span> </span>{</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 定义字符变量c，并赋值为'S'      </span></span><br><span class="line">        <span class="keyword">char</span> c=<span class="string">'S'</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//输出c的值        char c1=78;   </span></span><br><span class="line">        System.out.println(<span class="string">"c="</span>+c);   </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义字符变量c1，并赋值为78。</span></span><br><span class="line">        <span class="keyword">char</span> c1=<span class="number">78</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//输出c1的值。</span></span><br><span class="line">        System.out.println(<span class="string">"c1="</span>+c1);</span><br><span class="line">        </span><br><span class="line">        }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h4><p>Unicode编码又称为统一码，万国码。<br>unicode编码目标是能够支持世界上所有的字符集。</p>
<ul>
<li>char c=’\u005d’;</li>
<li>unicode表示法，在值前加前缀\u</li>
</ul>
<h4 id="布尔类型和字符串的字面值"><a href="#布尔类型和字符串的字面值" class="headerlink" title="布尔类型和字符串的字面值"></a>布尔类型和字符串的字面值</h4><p><strong>布尔类型</strong></p>
<ul>
<li>布尔值只能定义为 true和false。</li>
<li>例：boolean b= true；</li>
</ul>
<p><strong>字符串字面值</strong><br>字符串不属于基本数据类型，它是类！</p>
<ul>
<li>双引号引起来的0个或者多个字符。<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个空字符串。</span></span><br><span class="line">String s1=<span class="string">""</span>;</span><br></pre></td></tr></tbody></table></figure></div></li>
</ul>
<p><strong>多选题</strong><br>以下哪两个是合法的字符串字面值？（选择两项）<br>A””        B’ab’        C’a’        D“\u0067”</p>
<p>正确答案： A,D</p>
<p><strong>参考解析：</strong><br>本题考查字符串字面值的表示，字符串字面值应该用双引号引起来。BC选项用的是单引号，所以不正确。A选项是表示空字符串。D选项是字符串里只有一个Unicode表示的字符，也就是相当于字符串中只有一个字符的情况。</p>
<p><strong>编程练习</strong></p>
<p>定义布尔类型和字符串类型的变量，为它们赋值，并打印输出。</p>
<p><img src="en-resource://database/2661:1" alt="51f088e633534fd9c259cc912a1d3b6b.png"></p>
<p><strong>任务</strong><br>1、定义一个布尔类型的变量flag，赋值为true，并输出。<br>2、定义一个字符串类型的变量str，值为"hello world"，并输出。<br>3、定义一个字符串类型的变量str1，值为空串。<br>4、将str的值赋值给str1，并输出。</p>
<p><strong>原题</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>{</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 定义一个布尔类型的变量flag，赋值为true，并输出。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义一个字符串类型的变量str，值为"hello world"，并输出。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义一个字符串类型的变量str1，值为空串。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将str的值赋值给str1，并输出。</span></span><br><span class="line">        </span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>我的答案</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>{</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 定义一个布尔类型的变量flag，赋值为true，并输出。</span></span><br><span class="line">        <span class="keyword">boolean</span> flag=<span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="string">"flag="</span>+flag);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义一个字符串类型的变量str，值为"hello world"，并输出。</span></span><br><span class="line">        String str=<span class="string">"hello world"</span>;</span><br><span class="line">        System.out.println(<span class="string">"str="</span>+str);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义一个字符串类型的变量str1，值为空串。</span></span><br><span class="line">        String str1=<span class="string">""</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将str的值赋值给str1，并输出。</span></span><br><span class="line">        str1=str;</span><br><span class="line">        System.out.println(<span class="string">"str1="</span>+str1);</span><br><span class="line">        </span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>经验：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">String=<span class="string">""</span> <span class="comment">//双引号</span></span><br><span class="line"><span class="keyword">char</span>=<span class="string">''</span> <span class="comment">//单引号</span></span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="变量综合案例"><a href="#变量综合案例" class="headerlink" title="变量综合案例"></a>变量综合案例</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//定义两个整型变量x,y。</span></span><br><span class="line"><span class="comment">//方式一：</span></span><br><span class="line"><span class="keyword">int</span> x=<span class="number">3</span>,y=<span class="number">5</span>;</span><br><span class="line"><span class="comment">//方式二：</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">x=<span class="number">3</span>;y=<span class="number">4</span>;<span class="comment">//强调：此处x=3后面不能用逗号隔开，只能用分号。</span></span><br><span class="line"></span><br><span class="line">system.out.print    <span class="comment">//不换行</span></span><br><span class="line">System.out.println    <span class="comment">//换行</span></span><br><span class="line">\n    <span class="comment">//换行，转译字符。</span></span><br></pre></td></tr></tbody></table></figure></div>
<p><img src="en-resource://database/2663:1" alt="f5db9aff28cef8266f7c44e4db8662e2.png"></p>
<p><strong>用科学计数法表示浮点型数据</strong></p>
<ul>
<li>double d=1.23E5;   （表示1.23*10五次方） 输出为d=123000.0</li>
<li>float f= 1.23e5f;  输出为f=123000.0</li>
<li>double d1=.2;  输出为d1=0.2</li>
</ul>
<p><strong>编程练习</strong></p>
<p>定义各种数据类型的变量，为它们赋值，并打印输出。</p>
<p><img src="en-resource://database/2665:1" alt="99a4850ae24e004a77579386d321d6ab.png"></p>
<p><strong>任务</strong><br>1、定义一个整型变量n，值为98。<br>2、定义一个char类型的变量ch，将变量n赋值给ch，然后输出ch的值。<br>3、定义一个长整型变量var，值为190000000，并输出。<br>4、定义一个double类型的变量d，将变量var的值赋值给d。</p>
<p><strong>原题</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeExchange</span> </span>{</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 定义一个整型变量n，值为98。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义一个char类型的变量ch，将变量n赋值给ch，然后输出ch的值。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义一个长整型变量var，值为190000000，并输出。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义一个double类型的变量d，将变量var的值赋值给d。</span></span><br><span class="line">        </span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeExchange</span> </span>{</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 定义一个整型变量n，值为98。</span></span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">98</span>; </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义一个char类型的变量ch，将变量n赋值给ch，然后输出ch的值。</span></span><br><span class="line">        <span class="keyword">char</span> ch=(<span class="keyword">char</span>)n;</span><br><span class="line">        System.out.println(<span class="string">"ch="</span>+ch);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义一个长整型变量var，值为190000000，并输出。</span></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">var</span>=(<span class="keyword">long</span>)<span class="number">1.9e8</span>;</span><br><span class="line">        System.out.println(<span class="string">"var="</span>+<span class="keyword">var</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义一个double类型的变量d，将变量var的值赋值给d。</span></span><br><span class="line">        <span class="keyword">double</span> d;d=<span class="keyword">var</span>;</span><br><span class="line">        System.out.println(<span class="string">"d="</span>+d);</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><h4 id="数据类型转换的基本概念"><a href="#数据类型转换的基本概念" class="headerlink" title="数据类型转换的基本概念"></a>数据类型转换的基本概念</h4><p><strong>类型转换</strong></p>
<ul>
<li>类型转换分为自动类型转换和强制类型转换。</li>
<li>自动类型转换又叫做隐式类型转换。</li>
</ul>
<p><img src="en-resource://database/2667:1" alt="fd4f6de34db0b4d7d7d5831434230cb8.png"></p>
<p><strong>强制类型转换</strong></p>
<ul>
<li>如果A类型的数据表示范围比B类型大，则将A类型的值赋值给B类型，需要强制类型转换。</li>
<li>例：double d=123.4；float=(float)d；强制数据类型转换的格式：（数据类型）数值。</li>
</ul>
<p><strong>多选题</strong></p>
<p>以下哪两条语句是正确的？（选择两项）<br>A. char ch=65539;<br>B. int n=5.6f;<br>C. double d=1.2f;<br>D. double d=1.23;float f=(float)d；</p>
<p>正确答案： C,D</p>
<p><strong>参考解析：</strong><br>    本题考查数据类型的转换。A选项，65539超出了字符型所表示的数据范围，因此该条语句是错误的。B选项，将float类型的数据赋值给int类型也会报错。C选项，可以将float类型数据赋值给double类型变量，会进行自动类型转换。D选项将double类型数据赋值给float类型变量，进行了强制类型转换是可以的。</p>
<h4 id="数据类型转换案例"><a href="#数据类型转换案例" class="headerlink" title="数据类型转换案例"></a>数据类型转换案例</h4><p><img src="en-resource://database/2669:1" alt="5c8ea338fe1d5f5c4b38e7eba6fea36d.png"></p>
<h4 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h4><p>定义各种数据类型的变量，按要求为它们赋值，并打印输出。<br>效果图:</p>
<p><img src="en-resource://database/2671:1" alt="9365ed0f3a8f5a486e8fbe5dec820915.png"></p>
<p>备注：由于编辑器环境的不同，第一行字符c的输出结果也会有所不同。</p>
<p>任务<br>1、定义一个整型字面值67832，赋值给char类型变量c，并将c的值输出。<br>2、定义一个整型变量n，初始化为65。<br>3、定义一个字符型变量c1，赋值为n，并输出c1的值。<br>4、定义一个长整型变量l，值为987654321。<br>5、定义一个整型变量i，赋值为l，并输出i的值。<br>6、定义一个float类型变量f，将变量l的值赋值给f，并输出f的值。<br>7、将float的值f，重新赋值给变量l，并输出l的值。</p>
<p><strong>原题</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeExchange</span> </span>{</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 将一个整型字面值67832赋值给char类型变量c。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//并将c的值输出。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义一个整型变量n，值为65。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义一个字符型变量c1，赋值为n，并输出c1的值。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义一个长整型变量l，值为987654321。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义一个整型变量i，赋值为l，并输出i的值。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义一个float类型变量f，将变量l的值赋值给f，并输出f的值。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将float的值f，重新赋值给变量l，并输出l的值。</span></span><br><span class="line">        </span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>我的答案</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeExchange</span> </span>{</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将一个整型字面值67832赋值给char类型变量c。</span></span><br><span class="line">        <span class="comment">//并将c的值输出。</span></span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">67832</span>;</span><br><span class="line">        <span class="keyword">char</span> c=<span class="string">'a'</span>;</span><br><span class="line">        System.out.println(<span class="string">"c="</span>+c);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义一个整型变量n，值为65。</span></span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">65</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义一个字符型变量c1，赋值为n，并输出c1的值。</span></span><br><span class="line">        <span class="keyword">char</span> c1=<span class="string">'n'</span>;</span><br><span class="line">        System.out.println(<span class="string">"c1="</span>+c1);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义一个长整型变量l，值为987654321。</span></span><br><span class="line">        <span class="keyword">long</span> l = <span class="number">987654321</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义一个整型变量i，赋值为l，并输出i的值。</span></span><br><span class="line">        <span class="keyword">int</span> i =(<span class="keyword">int</span>)l;</span><br><span class="line">        System.out.println(<span class="string">"i="</span>+i);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义一个float类型变量f，将变量l的值赋值给f，并输出f的值。</span></span><br><span class="line">        <span class="keyword">float</span> f=l;</span><br><span class="line">        System.out.println(<span class="string">"f="</span>+f);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将float的值f，重新赋值给变量l，并输出l的值。</span></span><br><span class="line">        l=(<span class="keyword">long</span>)f;</span><br><span class="line">        System.out.println(<span class="string">"l="</span>+l);</span><br><span class="line">        </span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul>
<li>用final来定义，并且不能被修改。</li>
<li>常量值通常用大写字母表示。例：final double PI=3.14；final double MIN_VALUE=0;</li>
</ul>
<p><strong>单选题</strong></p>
<p>下列的变量定义中，错误的是？（选择一项）<br>A. int a;b;<br>B. float a,b1=1.23f;<br>C. char ch1=’a’,ch2=’\n’;<br>D. int n=100,m=2,k;</p>
<p>正确答案：A</p>
<p><strong>参考解析：</strong><br>本题考查变量的定义，同时定义多个变量时，变量名间用逗号分隔，因此A选项的说法是错误的。其他几个选项都是正确的变量定义形式。</p>
<p><strong>单选题</strong></p>
<p>下列的变量定义中，正确的是？（选择一项）<br>A. boolean b=”false”<br>B. float f=5.6;<br>C. byte x=343;<br>D. double d=5.3f;<br>正确答案： D</p>
<p><strong>参考解析：</strong></p>
<p>本题考查变量的定义。A选项错误，布尔类型的字面值，不能加双引号。B选项，float f=5.6;该条语句错误，5.6是double类型字面值，赋值给float类型会报错。C选项，343超出了byte类型的数据表示范围，因此byte x=343会发生编译错误。把float类型的字面值赋值给double类型的变量是可以的，因此D选项double d=5.3f是正确的。</p>
<p><strong>拓展：</strong><br>在JAVA中一共有八种基本数据类型，他d都们分别是 byte、short、int、long、float、double、char、boolean<br>整型：<br>其中zhibyte、short、int、long都是表示整数的dao，只不过他们的取值范围不一样。<br>byte的取值范围为-128<del>127，占用1个字节（-2的7次方到2的7次方-1）；<br>short的取值范围为-32768</del>32767，占用2个字节（-2的15次方到2的15次方-1） ；<br>int的取值范围为（-2147483648<del>2147483647），占用4个字节（-2的31次方到2的31次方-1） ；<br>long的取值范围为（-9223372036854774808</del>9223372036854774807），占用8个字节（-2的63次方到2的63次方-1）；</p>
<p>可以看到byte和short的取值范围比较小，而long的取值范围太大，占用的空间多，基本上int可以满足我们的日常的计算了，而且int也是使用的最多的整型类型了。 在通常情况下，如果JAVA中出现了一个整数数字比如35，那么这个数字就是int型的，如果我们希望它是byte型的，可以在数据后加上大写的 B：35B，表示它是byte型的，同样的35S表示short型，35L表示long型的，表示int我们可以什么都不用加，但是如果要表示long型的，就一定要在数据后面加“L”。</p>
<p>浮点型 ：<br>float和double是表示浮点型的数据类型，他们之间的区别在于他们的精确度不同 ；<br>float 3.402823e+38 ~ 1.401298e-45（e+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方）占用4个字节 ；<br>double 1.797693e+308~ 4.9000000e-324 占用8个字节 ；double型比float型存储范围更大，精度更高，所以通常的浮点型的数据在不声明的情况下都是double型的，如果要表示一个数据是float型的，可以在数据后面加上“F”。</p>
<p>浮点型的数据是不能完全精确的，所以有的时候在计算的时候可能会在小数点最后几位出现浮动，这是正常的。</p>
<p>boolean型（布尔型）：<br>这个类型只有两个值，true和false（真和非真）；boolean t = true； boolean f = false；<br>char型（文本型） ：<br>用于存放字符的数据类型，占用2个字节，采用unicode编码，它的前128字节编码与ASCII兼容 字符的存储范围在\u0000~\uFFFF，在定义字符型的数据时候要注意加’ ‘，比如 ‘1’表示字符’1’而不是数值1。</p>
</body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java基础通识1.1.6 方法</title>
    <url>/posts/891447199/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>一、Java的编译基础</li>
<li>二、Java程序实际执行细节</li>
<li>三、使用eclipse开发Java程序</li>
</ul>
<a id="more"></a>

<h3 id="方法简介"><a href="#方法简介" class="headerlink" title="方法简介"></a>方法简介</h3><p>所谓方法，就是用来解决一类问题的代码的有序组合，是一个功能模块。<br>方法的声明语法格式：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">访问修饰符  返回类型  方法名(参数列表){</span><br><span class="line">	方法体</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloImooc</span></span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">    System.out.pringtln(<span class="string">"Hello,imooc!"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>分析：“public static”属于修饰符，public是访问修饰符，static是静态方法。“void”是返回类型，这里表示不返还任何类型的值。“main”是方法的名字。“(String[] args)”小括号不能丢，里面是参数列表，这表示字符串数组类型的参数。“{System.out.pringtln(“Hello,imooc!”);}”大括号也不能丢，大括号里面是方法体的内容。</p>
<p><strong>方法分类：</strong><br>根据方法是否带参数、是否返回值，可以分为四类：</p>
<ul>
<li>无参无返回值方法</li>
<li>无参有返回值方法</li>
<li>有参无返回值方法</li>
<li>有参有返回值方法</li>
</ul>
<table>
<thead>
<tr>
<th>访问修饰符  返回类型  方法名(参数列表){方法体}</th>
<th>无参</th>
<th>有参</th>
</tr>
</thead>
<tbody><tr>
<td>无返回值</td>
<td>无参无返回值</td>
<td>无参有返回值</td>
</tr>
<tr>
<td>有返回值</td>
<td>有参无返回值</td>
<td>有参有返回值</td>
</tr>
</tbody></table>
<p><strong>什么时候用返回值</strong><br>打个比方，你写了封信，要给一个人。<br>后来发现，写了很多封信，都要经过一个人——邮递员，OK，让邮递员放在一起，成立邮局好了。<br>但是也有人要写信给邮递员，那么这些信给邮递员自己就可以了。他不需要送给其他人。</p>
<p>这里我们看到，<br>你——主方法<br>邮递员、邮局——方法<br>是否传递信——带不带返回值</p>
<p>给邮递员的信就不用返回值（已经给他知道他收到了，不需要返回值），给别人的要通过邮递员给别人（要知道是不是已经送到别人那了，所以要返回值来知道是否送到）</p>
<p>评价：总结还不够透彻，但是有点意境了。</p>
<h3 id="方法类型"><a href="#方法类型" class="headerlink" title="方法类型"></a>方法类型</h3><h4 id="无参无返回值方法"><a href="#无参无返回值方法" class="headerlink" title="无参无返回值方法"></a>无参无返回值方法</h4><p>通过例题演示：一行打印输出一串星号。</p>
<p>不使用方法调用：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.method;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        sc.next();</span><br><span class="line">        System.out.println(<span class="string">"********************"</span>); </span><br><span class="line">        System.out.println(<span class="string">"欢迎来到Java的世界！"</span>);</span><br><span class="line">        System.out.println(<span class="string">"********************"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>无参无返回值方法</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.method;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>{</span><br><span class="line">    <span class="comment">// 打印输出星号的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printStar</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"*********************"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建一个MethodDemo类的对象myMethodDemo。</span></span><br><span class="line">        MethodDemo myMethodDemo=<span class="keyword">new</span> MethodDemo();</span><br><span class="line">        <span class="comment">//使用对象名.方法名()去调用方法。小括号里面要是有参数就需要传参进来。</span></span><br><span class="line">        myMethodDemo.printStar();</span><br><span class="line">        System.out.println(<span class="string">"欢迎来到Java的世界！"</span>);</span><br><span class="line">        myMethodDemo.printStar();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>注意：方法要在类的内部进行定义！</p>
<h4 id="无参有返回值方法"><a href="#无参有返回值方法" class="headerlink" title="无参有返回值方法"></a>无参有返回值方法</h4><p>求长方形面积。方法定义形式如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">area</span><span class="params">()</span></span>{}</span><br></pre></td></tr></tbody></table></figure></div>
<p>修饰符public；返回值我认为是int类型，可以根据需求做出调整，如果由小数可以是float或者是double类型的返回值；方法名area；小括号内无参数；大括号内方法体。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.method;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>{</span><br><span class="line">    <span class="comment">//求长方形面积的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">area</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> length=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> width=<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> getArea=length*width;</span><br><span class="line">        <span class="keyword">return</span> getArea;<span class="comment">//返回语句</span></span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Rectangle rc=<span class="keyword">new</span> Rectangle();</span><br><span class="line">        System.out.println(<span class="string">"长方形的面积为："</span>+ rc.area());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>变量名和方法名可以相同，但是我们为了区分，一般会有意区别开。</p>
<p><strong>语句理解：</strong></p>
<p>类名 对象名 =new 类名();<br>=左边：创建一个类的对象<br>=右边：调用这个类的构造函数初始化对象，类名()这个是构造函数，用来做初始化的。</p>
<h4 id="有参无返回值方法"><a href="#有参无返回值方法" class="headerlink" title="有参无返回值方法"></a>有参无返回值方法</h4><p>定义一个求两个float类型数据最大值的方法，在方法中将最大值打印输出。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">max</span><span class="params">(<span class="keyword">float</span> a,<span class="keyword">float</span> b)</span></span>{}</span><br></pre></td></tr></tbody></table></figure></div>
<p>访问修饰符public；返回类型void（无返回值）；方法名max；</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.method;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxDemo</span> </span>{</span><br><span class="line">    <span class="comment">//求最大值的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">max</span><span class="params">(<span class="keyword">float</span> a,<span class="keyword">float</span> b)</span> </span>{</span><br><span class="line">        <span class="keyword">float</span> max;</span><br><span class="line">        <span class="keyword">if</span>(a&gt;b) {</span><br><span class="line">            max=a;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            max=b;</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"两个数"</span>+a+<span class="string">"和"</span>+b+<span class="string">"的最大值为："</span>+max);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        MaxDemo maxDemo=<span class="keyword">new</span> MaxDemo();</span><br><span class="line">        <span class="keyword">float</span> a=<span class="number">5</span>,b=<span class="number">3</span>;</span><br><span class="line">        <span class="comment">//前面赋值的a，b只在前一个方法内（大括号中）有效，此方法中需重新定义。</span></span><br><span class="line">        maxDemo.max(a, b);</span><br><span class="line">        <span class="keyword">float</span> m=<span class="number">5.6f</span>,n=<span class="number">8.9f</span>;</span><br><span class="line">        maxDemo.max(m, n);</span><br><span class="line">        maxDemo.max(<span class="number">9.8f</span>, <span class="number">12.8f</span>);</span><br><span class="line">        <span class="comment">//不定义变量直接传值也可以。</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>编程练习</strong></p>
<p>定义一个方法，根据商品总价，计算出对应的折扣并输出。<br>折扣信息如下：<br>1） 总价&lt;100，不打折。<br>2） 总价在100到199之间，打9.5折。<br>3） 总价在200以上，打8.5折。</p>
<p>效果图：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="code"><pre><span class="line">折后商品总价为：142.5</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>任务</strong><br>1、定义一个方法，根据商品总价输出折后总价。<br>2、在主方法中定义对象。<br>3、使用对象调用定义的方法<br>提示：商品总价为150时，可得到如效果图所示的结果。</p>
<p><strong>原题</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisCountDemo</span> </span>{</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">price</span><span class="params">(<span class="keyword">double</span> sum)</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//work.price(sum)是将sum值做为参数调用price方法，不是声明方法。</span></span><br><span class="line"></span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisCountDemo</span> </span>{</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">price</span><span class="params">(<span class="keyword">double</span> sum)</span> </span>{</span><br><span class="line">		<span class="keyword">double</span> sum1=<span class="number">0.00</span>;</span><br><span class="line">		<span class="keyword">if</span>(sum&lt;<span class="number">100</span>) {</span><br><span class="line">			sum1=sum;</span><br><span class="line">		}<span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;=<span class="number">199</span>) {</span><br><span class="line">			sum1=sum*<span class="number">0.98</span>;</span><br><span class="line">		}<span class="keyword">else</span> {</span><br><span class="line">			sum1=sum*<span class="number">0.85</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">return</span> sum1;</span><br><span class="line">	}	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		DisCountDemo work = <span class="keyword">new</span> DisCountDemo();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">double</span> sum= <span class="number">150</span>;</span><br><span class="line">		<span class="keyword">double</span> price = work.price(sum);<span class="comment">//work.price(sum)是将sum值做为参数调用price方法，不是声明方法。</span></span><br><span class="line">		System.out.println(price);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">double</span> sum2= <span class="number">345</span>;</span><br><span class="line">		System.out.println(work.price(sum2));</span><br><span class="line"></span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="有参有返回值的方法"><a href="#有参有返回值的方法" class="headerlink" title="有参有返回值的方法"></a>有参有返回值的方法</h4><p>定义一个求n！的方法，然后再求1!+2!+3!+4!+5!  </p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ARDUINO"><figure class="iseeu highlight /arduino"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fac</span><span class="params">(<span class="keyword">int</span> n)</span></span>{}</span><br></pre></td></tr></tbody></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.method;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FacDemo</span> </span>{</span><br><span class="line">    <span class="comment">//方法不能嵌套定义</span></span><br><span class="line">    <span class="comment">//求阶乘的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fac</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> s=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">            s*=i;<span class="comment">//s=s*i;</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    FacDemo facDemo=<span class="keyword">new</span> FacDemo();</span><br><span class="line">    <span class="keyword">int</span> fac=facDemo.fac(<span class="number">3</span>);</span><br><span class="line">    System.out.println(<span class="string">"3!="</span>+fac);</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//求1!+2!+3!+4!+5!</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++) {</span><br><span class="line">        fac=facDemo.fac(i);</span><br><span class="line">        sum=sum+fac;</span><br><span class="line">    }</span><br><span class="line">    System.out.println(<span class="string">"1!+2!+3!+4!+5!="</span>+sum);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="数组作为方法参数"><a href="#数组作为方法参数" class="headerlink" title="数组作为方法参数"></a>数组作为方法参数</h3><h4 id="数组作为方法参数（上）"><a href="#数组作为方法参数（上）" class="headerlink" title="数组作为方法参数（上）"></a>数组作为方法参数（上）</h4><p>定义方法，打印输出数组元素的值。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ARDUINO"><figure class="iseeu highlight /arduino"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>{}</span><br></pre></td></tr></tbody></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.method;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayMethod</span> </span>{</span><br><span class="line">    <span class="comment">//打印输出数组元素的值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) {</span><br><span class="line">            System.out.print(arr[i]+<span class="string">"  "</span>);</span><br><span class="line">        }</span><br><span class="line">        System.out.println();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span>[] arr= {<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>};</span><br><span class="line">        ArrayMethod am=<span class="keyword">new</span> ArrayMethod();</span><br><span class="line">        am.printArray(arr);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>编程练习</strong></p>
<p>编写方法，求数组元素的平均值。<br>效果图：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="code"><pre><span class="line">数组的平均值为70.1</span><br></pre></td></tr></tbody></table></figure></div>
<p>任务<br>1、定义一个方法，求数组的平均值。<br>2、在方法中先循环遍历数组求和，然后再求平均值，并将平均值返回。</p>
<p>提示：<br>1、本题只需要完成average()方法，并且方法参数不要改变<br>2、本题不需要写主方法对average()方法进行调用，后台会自动进行校验<br>希望大家遵守上述原则，以免影响程序验证，谢谢！</p>
<p><strong>原题</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AverageDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">average</span><span class="params">(<span class="keyword">float</span>[] arr)</span> </span>{</span><br><span class="line">		<span class="comment">//计算数组arr的平均值</span></span><br><span class="line">	</span><br><span class="line">		<span class="comment">//返回平均值</span></span><br><span class="line">		</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AverageDemo</span> </span>{</span><br><span class="line">    <span class="comment">//求数组元素的平均值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">avg</span><span class="params">(<span class="keyword">float</span>[] a)</span></span>{</span><br><span class="line">    <span class="keyword">float</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++){</span><br><span class="line">        sum = sum+a[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">float</span> avg = sum/(a.length);</span><br><span class="line">    System.out.println(avg);</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">//定义对象</span></span><br><span class="line">		AverageDemo av= <span class="keyword">new</span> AverageDemo();</span><br><span class="line">		<span class="comment">//创建float类型的数组并初始化</span></span><br><span class="line">		<span class="keyword">float</span> [] arr ={<span class="number">78.5f</span>,<span class="number">98.5f</span>,<span class="number">65.5f</span>,<span class="number">32.5f</span>};</span><br><span class="line">		<span class="comment">//调用方法求平均值并打印输出</span></span><br><span class="line">		av.avg(arr);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="数组作为方法参数（下）"><a href="#数组作为方法参数（下）" class="headerlink" title="数组作为方法参数（下）"></a>数组作为方法参数（下）</h4><p>例题：查找数组元素的值。</p>
<p>分析：<br>方法参数为：数组、要查找的元素<br>返回值：boolean类型</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span>[] arr)</span></span>{}</span><br></pre></td></tr></tbody></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.method;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySearch</span> </span>{</span><br><span class="line">    <span class="comment">//查找数组元素值的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span>[] arr)</span></span>{</span><br><span class="line">        <span class="keyword">boolean</span> flag=<span class="keyword">false</span>;<span class="comment">//默认是没找到</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) {</span><br><span class="line">            <span class="keyword">if</span>(arr[i]==n) {</span><br><span class="line">                flag=<span class="keyword">true</span>;<span class="comment">//找到了</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span>[] arr1= {<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>};</span><br><span class="line">        Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入要查找的数据："</span>);</span><br><span class="line">        <span class="keyword">int</span> n1=sc.nextInt();</span><br><span class="line">        ArraySearch as=<span class="keyword">new</span> ArraySearch();</span><br><span class="line">        <span class="keyword">boolean</span> flag=as.search(n1, arr1);</span><br><span class="line">        <span class="keyword">if</span>(flag) {</span><br><span class="line">            System.out.println(<span class="string">"找到了！"</span>);</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"没找到！"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>方法名相同，参数列表不同，这里的参数列表不同指的是，参数的<strong>数量</strong>、<strong>数据类型</strong>或者<strong>顺序</strong>不同。</p>
<p>判断下列哪些方法是方法重载：<br>public void hello(){}</p>
<ul>
<li>public int hello(){}//不是,参数列表相同。</li>
<li>public void hello(){}//是</li>
<li>public void hello(int n){}//是</li>
<li>public void hello(float f1,float f2){}//是</li>
<li>public void hello1(){}//不是，方法名不同。</li>
</ul>
<p>例题：定义三个方法，实现int，double和数组类型和的问题。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.method;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathDemo</span> </span>{</span><br><span class="line">        <span class="comment">//求两个int类型数的和</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> m+n;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求两个double类型数的和</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">plus</span><span class="params">(<span class="keyword">double</span> m,<span class="keyword">double</span> n)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> m+n;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求数组元素的累加和</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) {</span><br><span class="line">        sum=sum+arr[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> m=<span class="number">5</span>,n=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span>[] arr= {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>};</span><br><span class="line">    MathDemo mathDemo=<span class="keyword">new</span> MathDemo();</span><br><span class="line">    System.out.println(<span class="string">"int类型的和："</span>+mathDemo.plus(m,n));</span><br><span class="line">    System.out.println(<span class="string">"double类型的和："</span>+mathDemo.plus(<span class="number">5.6</span>,<span class="number">7.8</span>));</span><br><span class="line">    System.out.println(<span class="string">"数组元素的和："</span>+mathDemo.plus(arr)); </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>编程练习</strong></p>
<p>定义两个重载的方法，分别求圆和长方形的面积。<br>效果图：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="code"><pre><span class="line">圆的面积为：63.61725123519331</span><br><span class="line">长方形的面积为：40.0</span><br></pre></td></tr></tbody></table></figure></div>
<p>任务<br>1、定义两个求面积的重载方法，圆周率可以用Math.PI表示<br>2、在主方法中调用方法并将结果输出。<br>注意：当圆的半径为4.5，长方形长和宽分别为8和5时，可得到如效果图所示的结果。</p>
<p>原题</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AreaDemo</span> </span>{</span><br><span class="line">    <span class="comment">//求圆形面积</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//求长方形面积</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义对象</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义一个double类型的变量存放半径，并初始化</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义两个变量存放长和宽，并初始化</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//调用方法，求圆的面积并打印输出</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//调用方法，求长方形面积并打印输出</span></span><br><span class="line"></span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>作答</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AreaDemo</span> </span>{</span><br><span class="line">    <span class="comment">//求圆形面积</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">area</span><span class="params">(<span class="keyword">double</span> r)</span></span>{</span><br><span class="line">        <span class="keyword">double</span> s1=Math.PI*r*r;</span><br><span class="line">        System.out.println(<span class="string">"圆的面积为："</span>+s1);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//求长方形面积</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">area</span><span class="params">(<span class="keyword">double</span> l,<span class="keyword">double</span> w)</span></span>{</span><br><span class="line">	    <span class="keyword">double</span> s2=l*w;</span><br><span class="line">	    System.out.println(<span class="string">"长方形面积为："</span>+s2);</span><br><span class="line">	}</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">//定义对象。</span></span><br><span class="line">		AreaDemo ad=<span class="keyword">new</span> AreaDemo();</span><br><span class="line">		<span class="comment">//定义一个double类型的变量存放半径，并初始化。</span></span><br><span class="line">		<span class="keyword">double</span> r=<span class="number">4.5</span>;</span><br><span class="line">		<span class="comment">//定义两个变量存放长和宽，并初始化。</span></span><br><span class="line">		<span class="keyword">double</span> l=<span class="number">8</span>,w=<span class="number">5</span>;</span><br><span class="line">		<span class="comment">//调用方法，求圆的面积并打印输出。</span></span><br><span class="line">		ad.area(r);</span><br><span class="line">		<span class="comment">//调用方法，求长方形面积并打印输出。</span></span><br><span class="line">		ad.area(l,w);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="方法传值"><a href="#方法传值" class="headerlink" title="方法传值"></a>方法传值</h3><h4 id="基本数据类型的传值"><a href="#基本数据类型的传值" class="headerlink" title="基本数据类型的传值"></a>基本数据类型的传值</h4><p>例题：对两个变量的值进行交换并打印输出。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.method;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExchangeDemo</span> </span>{</span><br><span class="line">    <span class="comment">//交换方法。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        System.out.println(<span class="string">"交换前：a="</span>+a+<span class="string">",b="</span>+b);</span><br><span class="line">        temp=a;a=b;b=temp;</span><br><span class="line">        System.out.println(<span class="string">"交换前：a="</span>+a+<span class="string">",b="</span>+b);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swapTest</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> m=<span class="number">4</span>,n=<span class="number">5</span>;</span><br><span class="line">        ExchangeDemo ed=<span class="keyword">new</span> ExchangeDemo();</span><br><span class="line">        System.out.println(<span class="string">"交换前：m="</span>+m+<span class="string">",n="</span>+n);</span><br><span class="line">        ed.swap(m, n);</span><br><span class="line">        System.out.println(<span class="string">"交换前：m="</span>+m+<span class="string">",n="</span>+n);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ExchangeDemo ed=<span class="keyword">new</span> ExchangeDemo();</span><br><span class="line">        ed.swapTest();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//小结：方法当中值的改变并不对主方法中的值改变。</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>运行结果为：<br><img src="en-resource://database/5833:1" alt="f688aa6a92f369ef2528d275fd04bb61.png"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.method;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExchangeDemo1</span> </span>{</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">		n++;</span><br><span class="line">		System.out.println(<span class="string">"方法中n="</span>+n);</span><br><span class="line">	}</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="keyword">int</span> n=<span class="number">10</span>;</span><br><span class="line">		System.out.println(<span class="string">"方法调用前n的值："</span>+n);</span><br><span class="line">		ExchangeDemo1 ed1=<span class="keyword">new</span> ExchangeDemo1();</span><br><span class="line">		ed1.add(n);</span><br><span class="line">		System.out.println(<span class="string">"方法调用后n的值："</span>+n);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>运行结果为：<br><img src="en-resource://database/5841:1" alt="a6210578b1898fc6760a639976aedd7f.png"></p>
<p><strong>单选题</strong></p>
<p>以下代码的输出结果是什么？（选择一项）<br><img src="en-resource://database/5437:1" alt="83b982e8b4de86c693f0da89b8b0c5dd.png"><br>A.  40        B.  8        C.  4        D.  10</p>
<p>正确答案： D<br><strong>参考解析：</strong><br>本题考查方法的知识点，方法中对z的值的修改，不会对主方法中a的值产生影响，因此a的值依然是10。</p>
<h3 id="数组的传值"><a href="#数组的传值" class="headerlink" title="数组的传值"></a>数组的传值</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.method;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>{</span><br><span class="line">    <span class="comment">//定义一个用于修改某个数组元素值的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateArray</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>{</span><br><span class="line">        a[<span class="number">3</span>]=<span class="number">15</span>;</span><br><span class="line">        System.out.println(<span class="string">"数组a的元素为："</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n:a) {</span><br><span class="line">            System.out.print(n+<span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line">    System.out.println();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ArrayDemo ad = <span class="keyword">new</span> ArrayDemo();</span><br><span class="line">        <span class="keyword">int</span>[] a1 = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>};</span><br><span class="line">        System.out.println(<span class="string">"方法调用前数组A1的元素为："</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n:a1) {</span><br><span class="line">            System.out.print(n+<span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line">        System.out.println();</span><br><span class="line">        ad.updateArray(a1);</span><br><span class="line">        System.out.println(<span class="string">"方法调用后数组a1的元素为："</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n:a1) {</span><br><span class="line">            System.out.print(n+<span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>单选题</strong></p>
<p>以下代码的输出结果是什么？（选择一项）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo2</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> n)</span></span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++){</span><br><span class="line">            arr[i]=arr[i]*n;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        ArrayDemo2 ad=<span class="keyword">new</span> ArrayDemo2();</span><br><span class="line">        <span class="keyword">int</span>[] a={<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>};</span><br><span class="line">        ad.fun(a,<span class="number">2</span>);</span><br><span class="line">        System.out.println(a[<span class="number">2</span>]);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>A.  2        B.  3        C.  4        D.  6</p>
<p>正确答案： D<br><strong>参考解析：</strong><br>本题考查数组作为方法参数。当数组作为方法参数时，方法中对数组中的值的改变，会对主方法中作为实际参数传进来的数组产生影响。因此a[2]即数组中的第3个元素，乘以2之后值为6。故选D。</p>
<h3 id="可变参数列表"><a href="#可变参数列表" class="headerlink" title="可变参数列表"></a>可变参数列表</h3><h4 id="可变参数列表-1"><a href="#可变参数列表-1" class="headerlink" title="可变参数列表"></a>可变参数列表</h4><p>可变参数：参数的数量不确定，它可以随时变化。参数里面可以看做有一个变量，也可以看做有两个变量，甚至N个变量。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>... n)</span></span>{}<span class="comment">//可变参数。</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>例题：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.method;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo</span> </span>{</span><br><span class="line">    <span class="comment">//求和</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>... n)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:n) {<span class="comment">//增强for循环的执行过程：每次都把变量当中一个元素存放到变量n当中，然后进行变量值的输出。</span></span><br><span class="line">            sum=sum+i;</span><br><span class="line">        }</span><br><span class="line">    System.out.println(<span class="string">"sum="</span>+sum);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    ArgsDemo ad=<span class="keyword">new</span> ArgsDemo();</span><br><span class="line">    ad.sum(<span class="number">1</span>);</span><br><span class="line">    ad.sum(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    ad.sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.method;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo1</span> </span>{</span><br><span class="line">    <span class="comment">//查找</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span>... a)</span> </span>{</span><br><span class="line">    <span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> a1:a) {<span class="comment">//增强for循环的执行过程：每次都把变量当中一个元素存放到变量n当中，然后进行变量值的输出。</span></span><br><span class="line">        <span class="keyword">if</span>(a1==n) {</span><br><span class="line">            flag=<span class="keyword">true</span>;<span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(flag) { </span><br><span class="line">        System.out.println(<span class="string">"找到了！"</span>+n);</span><br><span class="line">    }<span class="keyword">else</span> {</span><br><span class="line">        System.out.println(<span class="string">"没找到！"</span>+n);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    ArgsDemo1 ad1=<span class="keyword">new</span> ArgsDemo1();</span><br><span class="line">    ad1.search(<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);<span class="comment">//3被传给int n；12345会被传给int... a；</span></span><br><span class="line">    <span class="keyword">int</span>[] a= {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>};</span><br><span class="line">    ad1.search(<span class="number">3</span>, a);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<ul>
<li>参数列表中如果有两个以上的参数，可变参数一定在最后。</li>
<li>可变参数列表可以与数组进行兼容。就是可以把数组的值传给可变参数列表。</li>
<li>数组作为参数时，是不能将多个值传递给数组的。</li>
<li>一个方法中只能有一个可以变化的参数。</li>
</ul>
<h4 id="多选题"><a href="#多选题" class="headerlink" title="多选题"></a>多选题</h4><p>关于可变参数列表，下列哪个说法是正确的？（选择两项）<br>A.  当可变参数列表作为方法参数时，不能将数组传递给可变参数列表<br>B.  一个方法中，可以有多个可变参数列表作为参数<br>C.  方法的参数列表中，如果有两个以上的参数，可变参数列表一定是放在最后的<br>D.  数组作为方法参数时，不能将多个值同时传递给数组</p>
<p>正确答案： C,D<br><strong>参考解析：</strong><br>本题考查可变参数列表，C,D选项正确。A选项错误，当可变参数列表作为方法参数时，可以将数组传递给可变参数列表。B选项错误，一个方法中，只能有一个可变参数列表作为参数。</p>
<h4 id="可变参数列表作为方法参数的重载问题"><a href="#可变参数列表作为方法参数的重载问题" class="headerlink" title="可变参数列表作为方法参数的重载问题"></a>可变参数列表作为方法参数的重载问题</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.method;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 关于可变参数列表和重载的问题</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> MyPC</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo3</span> </span>{</span><br><span class="line"><span class="comment">//可变参数列表所在的方法是最后被访问的。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public int plus(int a,int b) {</span></span><br><span class="line"><span class="comment">System.out.println("不带可变参数的方法被调用！");</span></span><br><span class="line"><span class="comment">return a+b;</span></span><br><span class="line"><span class="comment">}*/</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span>... a)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n:a) {<span class="comment">//增强for循环的执行过程：每次都把变量当中一个元素存放到变量n当中，然后进行变量值的输出。</span></span><br><span class="line">        sum=sum+n;</span><br><span class="line">    }</span><br><span class="line">    System.out.println(<span class="string">"带可变参数的方法被调用！"</span>);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    ArgsDemo3 ad=<span class="keyword">new</span> ArgsDemo3();</span><br><span class="line">    System.out.println(<span class="string">"和为："</span>+ad.plus(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="多选题-1"><a href="#多选题-1" class="headerlink" title="多选题"></a>多选题</h4><p>关于可变参数列表的描述正确的是（选择两项）<br>A、当可变参数列表作为方法参数时，不能将数组传递给可变参数列表。<br>B、一个方法中，只能有一个可变参数列表作为参数。<br>C、重载的方法中，可变参数列表作为参数的重载方法不会优先被调用。<br>D、数组作为方法参数时，可以将多个值同时传递给数组。</p>
<p>正确答案： B,C<br><strong>参考解析：</strong><br>本题考查可变参数列表。B、C选项的说法是正确的。A选项错误，当可变参数列表作为方法参数时，可以将数组传递给可变参数列表。D选项错误，数组作为方法参数时，不能将多个值同时传递给数组。</p>
</body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java基础通识1.2.1 面向对象</title>
    <url>/posts/163897636/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>一、初识面向对象</li>
<li>二、构造方法介绍</li>
</ul>
<a id="more"></a>

<h3 id="初识面向对象"><a href="#初识面向对象" class="headerlink" title="初识面向对象"></a>初识面向对象</h3><h4 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h4><ul>
<li>类和对象：类是模子，确定对象将会拥有的特征（属性）和行为（方法）。</li>
<li>对象是类的具体实例表现。</li>
<li>类是统称，是对象的类型。</li>
<li>对象是特定类型的数据。</li>
</ul>
<p><strong>属性和方法</strong></p>
<ul>
<li>属性：对象具有的各种静态特征。<ul>
<li>“对象有什么”。</li>
</ul>
</li>
<li>方法：对象具有的各种动态行为。<ul>
<li>“对象能做什么”。</li>
</ul>
</li>
</ul>
<p><strong>类和对象的关系</strong><br><strong>类：</strong></p>
<ul>
<li>抽象的概念，是虚拟的存在。</li>
<li>描述了一个模板。</li>
</ul>
<p>它限定了一种类型当中应该有什么，能做什么对象：由一个“类”实例化的具体体现。一个看得到、摸得着的具体实体。实际的开发项目开发当中，我们会先定义类，再根据类去实例化对象，完成相应的程序逻辑。</p>
<p><strong>对象：</strong></p>
<ul>
<li>一个看得到、摸得着的具体实体。</li>
</ul>
<p><img src="en-resource://database/5442:1" alt="135bcafdb8a83947b7dee5cf6a156e1a.png"></p>
<h4 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h4><p>包的推荐命名规范：</p>
<ul>
<li>英文字母小写。</li>
<li>域名倒序。</li>
<li>最后加上功能模块的名称。</li>
</ul>
<p><strong>Cat.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.animal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 宠物猫类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MyPC</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>{</span><br><span class="line">       <span class="comment">//成员属性：昵称、年龄、体重、品种。</span></span><br><span class="line">       String name;<span class="comment">//昵称。</span></span><br><span class="line">       <span class="keyword">int</span> mouth;<span class="comment">//年龄。</span></span><br><span class="line">       <span class="keyword">double</span> weight;<span class="comment">//体重。</span></span><br><span class="line">       String species;<span class="comment">//品种。</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//成员方法：跑动、吃东西。</span></span><br><span class="line">       <span class="comment">//跑动方法。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">             System.out.println(<span class="string">"小猫快跑。"</span>);</span><br><span class="line">       }</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//方法重载：同一个类中，相同方法名不同参数列表叫做重载。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String name)</span> </span>{</span><br><span class="line">             System.out.println(name+<span class="string">"快跑。"</span>);</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">//吃东西的方法。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">            System.out.println(<span class="string">"小猫吃鱼。"</span>);</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="实例化对象"><a href="#实例化对象" class="headerlink" title="实例化对象"></a>实例化对象</h4><p>选中包，再创建类CatTest.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.animal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatTest</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             <span class="comment">//对象实例化。</span></span><br><span class="line">             Cat one=<span class="keyword">new</span> Cat();</span><br><span class="line">             <span class="comment">//测试。</span></span><br><span class="line">             one.eat();</span><br><span class="line">             one.run();</span><br><span class="line">             System.out.println(<span class="string">"---------------------------"</span>);</span><br><span class="line">             System.out.println(<span class="string">"昵称："</span>+one.name);</span><br><span class="line">             System.out.println(<span class="string">"年龄："</span>+one.mouth);</span><br><span class="line">             System.out.println(<span class="string">"体重："</span>+one.weight);</span><br><span class="line">             System.out.println(<span class="string">"品种："</span>+one.species);</span><br><span class="line">             one.name=<span class="string">"花花"</span>;</span><br><span class="line">             one.mouth=<span class="number">2</span>;</span><br><span class="line">             one.weight=<span class="number">1000</span>;</span><br><span class="line">             one.species=<span class="string">"英国短毛猫"</span>;</span><br><span class="line">             System.out.println(<span class="string">"---------------------------"</span>);</span><br><span class="line">             System.out.println(<span class="string">"昵称："</span>+one.name);</span><br><span class="line">             System.out.println(<span class="string">"年龄："</span>+one.mouth);</span><br><span class="line">             System.out.println(<span class="string">"体重："</span>+one.weight);</span><br><span class="line">             System.out.println(<span class="string">"品种："</span>+one.species);</span><br><span class="line">             System.out.println(<span class="string">"---------------------------"</span>);</span><br><span class="line">             one.run(one.name);</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><img src="en-resource://database/5885:1" alt="f326d562e0b40510254c06bcfd55aa61.png"></p>
<p><strong>成员属性默认值：</strong><br>当把一个变量写在类当中作为成员属性存在的时候，它是有默认值的。</p>
<ul>
<li>String类型默认值null。</li>
<li>int类型默认值0。</li>
<li>double类型默认值0.0。</li>
</ul>
<p><strong>重载：</strong><br>同一个类中，相同方法名不同参数列表叫做重载。</p>
<h4 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h4><p>单一职责原则也称为单一功能原则；<br>有且只有一个引起功能变化的原因。</p>
<p><strong>补充文档资料</strong><br>单一职责原则（SRP：Single responsibility principle）又称单一功能原<br>则，面向对象五个基本原则（SOLID： SRP 单一责任原则、OCP 开放封闭原<br>则、LSP 里氏替换原则、DIP 依赖倒置原则、ISP 接口分离原则）之一。它规<br>定一个类应该只有一个发生变化的原因。该原则由罗伯特·C·马丁（Robert C.<br>Martin）于《敏捷软件开发：原则、模式和实践》一书中给出的。马丁表示此<br>原则是基于汤姆·狄马克(Tom DeMarco)和 Meilir Page-Jones 的著作中的内<br>聚性原则发展出的。<br>所谓职责是指类变化的原因。如果一个类有多于一个的动机被改变，那么<br>这个类就具有多于一个的职责。而单一职责原则就是指一个类或者模块应该有<br>且只有一个改变的原因。<br>单一职责原则告诉我们：一个类不能太“累”！在软件系统中，一个类<br>（大到模块，小到方法）承担的职责越多，它被复用的可能性就越小，而且一<br>个类承担的职责过多，就相当于将这些职责耦合在一起，当其中一个职责变化<br>时，可能会影响其他职责的运作，因此要将这些职责进行分离，将不同的职责<br>封装在不同的类中，即将不同的变化原因封装在不同的类中，如果多个职责总<br>是同时发生改变则可将它们封装在同一类中。<br>之所以会出现单一职责原则就是因为在软件设计时会出现以下类似场景：T<br>负责两个不同的职责：职责 P1，职责 P2。当由于职责 P1 需求发生改变而需要<br>修改类 T 时，有可能会导致原本运行正常的职责 P2 功能发生故障。也就是说<br>职责 P1 和 P2 被耦合在了一起。<br>解决办法：遵守单一职责原则，将不同的职责封装到不同的类或模块中。<br>分别建立两个类 T1、T2，使 T1 完成职责 P1 功能，T2 完成职责 P2 功能。这<br>样，当修改类 T1 时，不会使职责 P2 发生故障风险；同理，当修改 T2 时，也<br>不会使职责 P1 发生故障风险。</p>
<h4 id="new关键字"><a href="#new关键字" class="headerlink" title="new关键字"></a>new关键字</h4><p>实例化对象的过程可以分为两个部分：</p>
<ul>
<li>声明对象  Cat one</li>
<li>实例化对象  new Cat();</li>
</ul>
<p>声明：只是在内存的栈中开辟一块区域取名叫one，此时还不是一个真正的有效对象，因为此时one的空间是空的。如果在这时候用它进行属性方法调用是不被允许的。<br><img src="en-resource://database/5447:1" alt="29ee8a78ca8c61eef6a8c9f5c543ce30.png"></p>
<p>实例化对象：在堆中开辟了新的实例空间<br><img src="en-resource://database/5452:1" alt="43a7d7df0a5a786777056e074ad2836b.png"></p>
<p>通过赋值符号将声明的对象指向实例化的空间。<br><img src="en-resource://database/5457:1" alt="82eceefbaef09159515ebb5f8d0267b3.png"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">Cat one=<span class="keyword">new</span> Cat();</span><br><span class="line">Cat two=<span class="keyword">new</span> Cat();</span><br></pre></td></tr></tbody></table></figure></div>
<p>修改two的信息是不会对one产生影响的。<br><img src="en-resource://database/5467:1" alt="c74c7da29c7857b4dff28536baee1dfd.png"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">Cat one=<span class="keyword">new</span> Cat();</span><br><span class="line">Cat two=one;</span><br></pre></td></tr></tbody></table></figure></div>
<p>修改two的信息对one产生影响。<br><img src="en-resource://database/5462:1" alt="835d264178bdedbddc57fa02c2204546.png"></p>
<p><strong>快捷键</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="code"><pre><span class="line">ctrl+/        注释选中行的代码。</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>选择练习</strong></p>
<p>下面代码运行的正确结果是（）（选择一项）<br><img src="en-resource://database/5887:1" alt="7c5084b396c2a3e04a2ca3ef798bcdd1.png"></p>
<p>A编译错误，无法正常运行<br>B编译正确，但运行时产生错误<br>C.  hello<br>D.  world</p>
<p>正确答案： D<br>参考解析：<br>本题考查的是Java中的对象实例化，通过“=”进行对象复制操作之后，one和two指向内存中同一块区域，因此two的修改会影响one的输出结果，故本题的运行结果为：world，D选项正确。</p>
<p><strong>选择练习</strong></p>
<p>（）空间用于存储使用new关键字所创建的对象（选择一项）<br>A.  堆B.  栈C.  方法区D.  实例区</p>
<p>正确答案： A<br>参考解析：<br>本题考查的是于存储使用new关键字所创建的对象的空间，“堆”空间用于存储使用new关键字所创建的对象；栈空间用于存储程序运行时在方法中声明的所有的局部变量；方法区用于存放类的信息（包括方法）。故本题选择答案“堆“，A选项正确。</p>
<p><strong>编程练习</strong></p>
<p>编写自定义Person类，根据提示以及效果图补全编辑器中代码。<br>程序运行参考效果图如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="code"><pre><span class="line">我是一名学生！</span><br><span class="line">我是一个男孩！</span><br><span class="line">我叫李明，今年10岁了，读小学五年级了。</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>任务</strong><br><strong>1.创建Person类</strong><br>属性：名字（name），年龄（age）,年级（ grade）</p>
<p><strong>方法：</strong><br>1、无参无返回值的student方法，描述为：我是一名学生！<br>2、带参数（性别sex）的方法，描述为：我是一个**孩！（其中，**为传入参数）<br>3、无参无返回值的mySelf方法，介绍自己的姓名、年龄、年级（参数参考效果图）</p>
<p><strong>2. 创建测试类</strong><br>实例化对象，传入参数，调用无参无返回值的student和mySelf方法及带参方法sex</p>
<p><strong>原题</strong><br>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">      <span class="comment">//使用new关键字实例化对象</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//传入name、age、grade的参数值</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//分别调用student、sex、mySelf方法</span></span><br><span class="line"></span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Person.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="comment">//属性：name、age、grade</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建无参无返回值的student方法，描述为：我是一名学生！</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建带参（性别sex）的sex方法，描述为：我是一个**孩！</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建无参无返回值的mySelf方法，分别介绍姓名（name），年龄（age），年级（grade）</span></span><br><span class="line">   </span><br><span class="line">	}	</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答</strong><br>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">      <span class="comment">//使用new关键字实例化对象</span></span><br><span class="line">		Person one = <span class="keyword">new</span> Person();</span><br><span class="line">      <span class="comment">//传入name、age、grade的参数值</span></span><br><span class="line">	    one.name=<span class="string">"李明"</span>	;</span><br><span class="line">	    one.age=<span class="number">10</span>;</span><br><span class="line">	    one.grade=<span class="string">"小学五年级"</span>;</span><br><span class="line">      <span class="comment">//分别调用student、sex、mySelf方法</span></span><br><span class="line">        one.student();</span><br><span class="line">        one.sex(<span class="string">'男'</span>);</span><br><span class="line">        one.mySelf();</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Person.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="comment">//属性：name、age、grade</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String grade;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建无参无返回值的student方法，描述为：我是一名学生！</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">student</span><span class="params">()</span></span>{</span><br><span class="line">	    System.out.println(<span class="string">"我是一名学生！"</span>);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建带参（性别sex）的sex方法，描述为：我是一个**孩！</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sex</span><span class="params">(<span class="keyword">char</span> sex)</span></span>{</span><br><span class="line">	    System.out.println(<span class="string">"我是一个"</span>+sex+<span class="string">"孩！"</span>);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建无参无返回值的mySelf方法，分别介绍姓名（name），年龄（age），年级（grade）</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mySelf</span><span class="params">()</span></span>{</span><br><span class="line">	    System.out.println(<span class="string">"我叫"</span>+name+<span class="string">"，今年"</span>+age+<span class="string">"岁了，读"</span>+grade+<span class="string">"了。"</span>);</span><br><span class="line">	    </span><br><span class="line">	}	</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="构造方法介绍"><a href="#构造方法介绍" class="headerlink" title="构造方法介绍"></a>构造方法介绍</h3><h4 id="构造方法—无参构造方法"><a href="#构造方法—无参构造方法" class="headerlink" title="构造方法—无参构造方法"></a>构造方法—无参构造方法</h4><ul>
<li>构造方法也称为构造函数、构造器，不能被对象单独调用，必须配合new关键字使用。</li>
<li>构造方法与类同名且没有返回值。</li>
<li>只能在对象实例化的时候调用。</li>
<li>当没有指定构造方法时，系统会自动添加无参的构造方法。如果没有无参构造方法，会导致编译错误。</li>
<li>当有指定构造方法，无论是有参、无参的构造方法，都不会自动添加无参的构造方法。</li>
<li>一个类中可以有多个构造方法。</li>
</ul>
<p><strong>语法结构</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> 构造方法名(){ </span><br><span class="line">    <span class="comment">//初始化代码</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><img src="en-resource://database/5889:1" alt="5df8738a3a8a354c84603b4c3d9c7fdd.png"><br><strong>Cat.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.animal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 宠物猫类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MyPC</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>{</span><br><span class="line">       <span class="comment">//成员属性：昵称、年龄、体重、品种。</span></span><br><span class="line">       String name;<span class="comment">//昵称。</span></span><br><span class="line">       <span class="keyword">int</span> mouth;<span class="comment">//年龄。</span></span><br><span class="line">       <span class="keyword">double</span> weight;<span class="comment">//体重。</span></span><br><span class="line">       String species;<span class="comment">//品种。</span></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>{</span><br><span class="line">             System.out.println(<span class="string">"我是无参构造"</span>);</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">//成员方法：跑动、吃东西。</span></span><br><span class="line">       <span class="comment">//跑动方法。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">             System.out.println(<span class="string">"小猫快跑。"</span>);</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">//方法重载：同一个类中，相同方法名不同参数列表叫做重载。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String name)</span> </span>{</span><br><span class="line">             System.out.println(name+<span class="string">"快跑。"</span>);</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">//吃东西的方法。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">             System.out.println(<span class="string">"小猫吃鱼。"</span>);</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>CatTest.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.animal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatTest</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             <span class="comment">//对象实例化。</span></span><br><span class="line">             Cat one=<span class="keyword">new</span> Cat();</span><br><span class="line">             one.run();</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><img src="en-resource://database/5891:1" alt="8ee1294df59196388706ec66a51fa98a.png"></p>
<h4 id="构造方法—带参构造方法"><a href="#构造方法—带参构造方法" class="headerlink" title="构造方法—带参构造方法"></a>构造方法—带参构造方法</h4><ul>
<li>构造方法与类同名且没有返回值，强调：必须与类同名。</li>
<li>只能在对象实例化的时候调用。</li>
<li>当指定构造方法，无论是有参、无参的构造方法，都不会自动添加无参的构造方法。</li>
<li>当没有指定构造方法时，系统会自动添加无参的构造方法，没有无参构造方法，会出现编译错误。</li>
<li>一个类中可以有多个构造方法。</li>
</ul>
<p><img src="en-resource://database/5893:1" alt="a23dfee6df321ca2fb5fe5ac74cc8dd7.png"></p>
<p>注意在程序开发过程中的就近原则:</p>
<ul>
<li>在赋值过程当中，它会优先去找同一个作用作用范围内里面的成员完成赋值操作。只有它找不着的情况下，它才会扩大范围到它所在类里面去找。</li>
</ul>
<p>赋值赋值：<br><img src="en-resource://database/5895:1" alt="e2cf10ac0e2b07383943fdca4b67e4a1.png"></p>
<p><img src="en-resource://database/5897:1" alt="c6332b0c8eb6ed481995b3fa44d2e4d7.png"><br>赋值失败：<br><img src="en-resource://database/5899:1" alt="f8d51c9e0b419b31220ae21acbc18861.png"></p>
<p><strong>选择练习</strong></p>
<p>分析下面的Java代码，编译运行结果是（）（选择一项）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>{</span><br><span class="line">    <span class="keyword">int</span> number;</span><br><span class="line">    String strname;</span><br><span class="line">    Test(<span class="keyword">int</span> num,String name){</span><br><span class="line">        number = num;</span><br><span class="line">        strname = name;</span><br><span class="line">        System.out.println(<span class="string">"学号"</span>+num+<span class="string">"姓名"</span>+name);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        Test obj1 = <span class="keyword">new</span> Test();</span><br><span class="line">        Test obj2 = <span class="keyword">new</span> Test(<span class="number">1</span>,<span class="string">"张三"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>A.  运行结果为：学号：1  姓名：张三。<br>B.  运行结果为：学号：null 姓名：张三。<br>C.  程序出现编译错误。<br>D.  程序出现运行时异常。</p>
<p>正确答案： C<br>参考解析：本题考查的是JAVA中的构造方法。程序中显示添加带参构造方法之后，系统不会提供默认无参构造了，所以在运行时出现编译错误。故C选项正确。</p>
<p><strong>选择练习</strong></p>
<p>下面的哪几项是合法的构造方法重载（）（选择两项）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">display</span>{<span class="comment">//...}</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>A.  public Display(String s){}<br>B.  public int display(int n1,int n2){}<br>C.  Display (int …a){}<br>D.  public display(Strnig s,int a){}</p>
<p>正确答案： A,C<br>参考解析：<br>本题考查的是构造方法重载，类中的构造方法必须与类名相同，没有返回值，访问修饰符可以省略，所以“public Display(Strnig s){}”和“Display (int …a){}”都是合法的构造方法重载。A,C选项正确。B和D选项都不是构造方法。</p>
<p><strong>选择练习</strong></p>
<p>运行结果为（）（选择一项）<br><img src="en-resource://database/5901:1" alt="0c66b603eeb6ec9dfbabf3dd6ebbf1c2.png"></p>
<p>A.  mainboard：华硕，cpu：Intel<br>B.  mainboard：s1，cpu：s2<br>C.  mainboard：Intel，cpu：华硕<br>D.  华硕，Intel</p>
<p>正确答案： A<br>参考解析：<br>本题考查的是调用带参构造函数的运行结果，创建对象时为属性mainboard和cpu进行了赋值，然后用输出语句进行输出，用对象名.属性名获得属性的值。所以该代码的运行结果为：mainboard：华硕，cpu：Intel。故A选项正确。</p>
<p><strong>this关键字</strong></p>
<p>This：当前对象，即谁调用了它谁就算当前对象。</p>
<p><strong>this 关键字的用法</strong><br>this 在类中就是代表当前对象，可以通过 this 关键字完成当前对象的成员属性、成员方法和构造方法的调用。<br><strong>那么何时用 this？</strong><br>当在定义类中的方法时，如果需要调用该类对象，就可以用 this来表示这个对象。也就是说，但凡在本类功能内部使用到了本类对象，都用 this 表示。至于代表哪个对象，就看其所在功能被哪个对象调用，这样就知道谁在参与运算。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.one;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">       <span class="keyword">private</span> String name;</span><br><span class="line">       User(){</span><br><span class="line">             System.out.println(<span class="string">"我是无参构造方法"</span>);</span><br><span class="line">       }</span><br><span class="line">       User(String name){</span><br><span class="line">             <span class="comment">// 用于构造函数间的相互调用，而且只能放在构造函数的第一行。</span></span><br><span class="line">             <span class="keyword">this</span>();<span class="comment">// 表示调用本类中的无参构造方法。</span></span><br><span class="line">             <span class="comment">// 如果在构造方法里使用（name=name），那么其是赋值给他本身，而不是赋值给类里面得属性name。</span></span><br><span class="line">             <span class="keyword">this</span>.name=name;<span class="comment">// this.name=p1.name;</span></span><br><span class="line">             <span class="comment">// 这里写这p1是因为p1这个对象在调用这个函数。一句话，谁调用它，它就代表谁。</span></span><br><span class="line">             <span class="keyword">this</span>.method();<span class="comment">// 其实就是==p1.method。</span></span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>{</span><br><span class="line">             System.out.println(<span class="string">"我是构造方法。"</span>);</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arr)</span> </span>{</span><br><span class="line">             User p1 = <span class="keyword">new</span> User(<span class="string">"李明"</span>);</span><br><span class="line">             System.out.println(p1.name);</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><img src="en-resource://database/5903:1" alt="60fae33048ce548c630eaff99eb24f71.png"></p>
<p><strong>选择练习</strong></p>
<p>在Java中，以下程序编译运行后的输出结果为（ ）（选择一项）<br><img src="en-resource://database/5905:1" alt="5b180bb494ae24d33870b15a600bc6f4.png"></p>
<p>A.  6        B.  3 4        C.  8        D.  7<br>正确答案： D<br>参考解析：<br>本题考查类和对象的定义和使用。分别定义两个Test的对象赋值给pt1和pt2，因此pt1.x值为3，pt2.x值为4，3和4相加后的结果为7，因此输出7，故选D。</p>
<p><strong>构造方法调用（番外）</strong></p>
<p>构造方法必须要和方法名一致，前面可以有访问修饰符，但不能有返回值。<br>那如果就是在这个类当中，创建了一个普通的方法，并且它的方法名与我们的类名一致，会不会报错？</p>
<ul>
<li>从语法本身而言，它是不会报错的，它只会有个警告（警告内容：这个方法与我们的构造方法重名），从语法本身而言，是没有语法性错误的。</li>
<li>甚至在调用的时候，也可以按照普通方法的方式去调用。</li>
<li>但是我们并不推荐这么去写。</li>
<li>构造方法只能在构造方法之间完成。</li>
<li>在带参构造当中通过this()的方式去调用同一个类的构造，但this()必须放在方法体内第一行。</li>
</ul>
<p><strong>编程练习</strong></p>
<p>编写自定义猴子类，按照效果图，在编辑器中对应空白区域编写代码。程序参考运行效果图如下：<br><img src="en-resource://database/5907:1" alt="46878f112c8e21c36ea0ed19908fdd04.png"></p>
<p><strong>任务：</strong><br><strong>1、创建Monkey类</strong><br>属性：名称（name）和特征（feature）     方法：         1） 无参构造方法（默认初始化 name 和 feature 的属性值，属性值参考效果图）         2） 带参构造方法，接收外部传入的参数，分别向 name 和 feature 赋值<br><strong>2、创建测试类</strong><br>分别通过无参构造方法和带参构造方法，完成对象实例化实例化对象，并打印输出对象信息，输出格式如效果图<br><strong>原题</strong><br>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//调用无参构造方法实例对象</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//打印输出对象属性</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用带参构造方法实例对象</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//打印输出对象属性</span></span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Monkey.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Monkey</span> </span>{</span><br><span class="line">    <span class="comment">//属性：姓名（name）、特征（feature）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参的构造方法（默认初始化name和feature的属性值，属性值参考效果图）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//带参的构造方法（接收外部传入的参数，分别向 name 和 feature 赋值）</span></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>作答<br>Monkey.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.one;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Monkey</span> </span>{</span><br><span class="line">    <span class="comment">//属性：姓名（name）、特征（feature）</span></span><br><span class="line">    String name;</span><br><span class="line">    String feature;</span><br><span class="line">    <span class="comment">//无参的构造方法（默认初始化name和feature的属性值，属性值参考效果图）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Monkey</span><span class="params">()</span> </span>{</span><br><span class="line">       <span class="keyword">this</span>.name=<span class="string">"长尾猴"</span>;</span><br><span class="line">       <span class="keyword">this</span>.feature=<span class="string">"尾巴长"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//带参的构造方法（接收外部传入的参数，分别向 name 和 feature 赋值）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Monkey</span><span class="params">(String name,String feature)</span> </span>{</span><br><span class="line">       <span class="keyword">this</span>.name=name;</span><br><span class="line">       <span class="keyword">this</span>.feature=feature;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.one;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">      <span class="comment">//调用无参构造方法实例对象</span></span><br><span class="line">      Monkey one=<span class="keyword">new</span> Monkey();</span><br><span class="line">      <span class="comment">//打印输出对象属性</span></span><br><span class="line">      System.out.println(<span class="string">"我是使用无参构造产生的猴子："</span>);</span><br><span class="line">      System.out.println(one.name);</span><br><span class="line">      System.out.println(one.feature);</span><br><span class="line">      <span class="comment">//调用带参构造方法实例对象</span></span><br><span class="line">      Monkey two=<span class="keyword">new</span> Monkey(<span class="string">"白头叶猴"</span>,<span class="string">"头上有白毛，喜欢吃树叶"</span>);</span><br><span class="line">      <span class="comment">//打印输出对象属性</span></span><br><span class="line">      System.out.println(<span class="string">"=============================="</span>);</span><br><span class="line">      System.out.println(<span class="string">"我是使用带参构造产生的猴子："</span>);</span><br><span class="line">      System.out.println(two.name);</span><br><span class="line">      System.out.println(two.feature);</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>选择练习</strong></p>
<p>在Java中，下列关于this的说法错误的选项是（）（选择两项）<br>A.  在构造方法中如果使用this调用其他构造方法，只能是第一条语句<br>B.  不能在构造方法中调用同一个类的其他构造方法<br>C.  在构造方法中如果使用this调用其他构造方法，语句可以放在任意位置<br>D.  可以使用“this.方法名()”或“this.属性名”来引用当前对象的成员</p>
<p>正确答案： B,C<br><strong>参考解析：</strong><br>本题考查的是Java中的this关键字的应用，可以在构造方法中通过this()的方式调用同类的其他构造方法，但必须放在第一句，因此“不能在构造方法中调用同一个类的其他构造方法”和“在构造方法在中如果使用this调用其他构造方法，语句可以放在任意位置”的说法是错误的。本题选择错误选项，故BC正确。</p>
</body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java基础通识1.3.1 异常</title>
    <url>/posts/3048259575/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>一、Java的编译基础</li>
<li>二、Java程序实际执行细节</li>
<li>三、使用eclipse开发Java程序</li>
</ul>
<a id="more"></a>

<h3 id="导学"><a href="#导学" class="headerlink" title="导学"></a>导学</h3><ul>
<li>如何应用异常处理程序中的问题？难度：♥</li>
<li>如何通过包装器类实现基本数据类型的对象化处理？难度：♥</li>
<li>String、StringBuilder是如何进行字符串信息操作的？难度：♥</li>
<li>常用集合框架及实现类的使用。难度:♥♥♥</li>
<li>如何使用Java输入输出流进行文件读写？难度：♥♥♥♥♥</li>
<li>如何使用多线程实现数据并发通信。难度：♥♥♥♥♥♥♥♥♥♥</li>
</ul>
<h4 id="1-2-课程介绍（00-58）"><a href="#1-2-课程介绍（00-58）" class="headerlink" title="1-2 课程介绍（00:58）"></a>1-2 课程介绍（00:58）</h4><p><strong>内容提要</strong></p>
<ul>
<li>什么是异常</li>
<li>如何处理异常<ul>
<li>try-catch-finally</li>
<li>throw</li>
<li>throws</li>
<li>自定义异常</li>
<li>异常链</li>
</ul>
</li>
</ul>
<h3 id="第2章-异常简介"><a href="#第2章-异常简介" class="headerlink" title="第2章 异常简介"></a>第2章 异常简介</h3><h4 id="2-1-什么是异常（03-06）"><a href="#2-1-什么是异常（03-06）" class="headerlink" title="2-1 什么是异常（03:06）"></a>2-1 什么是异常（03:06）</h4><p>异常本质上是程序上的错误。</p>
<ul>
<li>错误在我们编写程序的过程中会经常发生，包括编译期间和运行期间的错误。</li>
<li>在程序运行过程中，意外发生的情况，背离我们程序本身的意图的表现，都可以理解为异常。</li>
</ul>
<h4 id="2-2-异常分类（03-45）"><a href="#2-2-异常分类（03-45）" class="headerlink" title="2-2 异常分类（03:45）"></a>2-2 异常分类（03:45）</h4><p><img src="en-resource://database/6073:1" alt="d6c3e424794aad6dda971840414c11f4.png"></p>
<p>Error是程序无法处理的错误，表示运行应用程序中较严重问题。<br>这些错误是不可查的，它们是在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。<br>对于设计合理的应用程序来说，即使确实发生了错误，本质上也不应该试图去处理它所引起的异常状况。</p>
<p>Exception是程序本身可以处理的异常。<br>异常处理通常指针对这种类型异常的处理。<br>Unchecked Exception编译器不要求强制处置的异常。包含RuntimeException以及相关子类。<br>Checked Exception编译器要求必须处置的异常。</p>
<h4 id="2-3-选择练习"><a href="#2-3-选择练习" class="headerlink" title="2-3 选择练习"></a>2-3 选择练习</h4><p>多选题下列代码中的异常属于（）（选择两项）<img src="en-resource://database/3387:1" alt="0edcc427be23fa3806b7ae0a9fe6b27b.png"><br>A.非检查型异常<br>B.检查型异常<br>C.Error<br>D.Exception<br>正确答案： A,D 参考解析：本题考查非检查异常。代码中为除0溢出，属于算术异常，是非检查异常，属于RuntimeException，而RuntimeException是Exception的子类。故AD选项正确。</p>
<h3 id="第3章-异常处理简介"><a href="#第3章-异常处理简介" class="headerlink" title="第3章 异常处理简介"></a>第3章 异常处理简介</h3><h4 id="3-1-异常处理分类（02-39）"><a href="#3-1-异常处理分类（02-39）" class="headerlink" title="3-1 异常处理分类（02:39）"></a>3-1 异常处理分类（02:39）</h4><p>在Java应用程序中，异常处理机制为：</p>
<p>抛出异常。<br>出现错误，引发异常时，创建异常对象，交付给运行时系统进行处理。<br>异常对象会包括异常类型、异常出现时的程序状态、··· ···</p>
<p>捕捉异常。</p>
<ul>
<li>对于运行时异常、错误或可查异常，Java技术所要求的异常处理方式有所不同。</li>
</ul>
<p>Java规定：</p>
<ul>
<li>对于可查异常必须捕捉、或者声明抛出。</li>
<li>允许忽略不可查的RuntimeException（含子类）和Error（含子类）。<br><img src="en-resource://database/6075:1" alt="680919518fd3315ff9be2c43be53d993.png"></li>
</ul>
<h4 id="3-2-选择练习"><a href="#3-2-选择练习" class="headerlink" title="3-2 选择练习"></a>3-2 选择练习</h4><p>单选题<br>（）类及其子类所表示的异常是用户程序无法处理的。（选择一项）<br>A、NumberFormatException<br>B、Exception<br>C、Error<br>D、RuntimeException</p>
<p>正确答案： C </p>
<p>参考解析：<br>本题考查异常分类，Error类用于处理致命的、用户程序无法处理的系统程序错误，这些错误用户程序是不需要关注的，故选C。</p>
<h3 id="第4章-使用try…catch…finally实现异常处理"><a href="#第4章-使用try…catch…finally实现异常处理" class="headerlink" title="第4章 使用try…catch…finally实现异常处理"></a>第4章 使用try…catch…finally实现异常处理</h3><h4 id="4-1-try-catch-finally简介（08-39）"><a href="#4-1-try-catch-finally简介（08-39）" class="headerlink" title="4-1 try-catch-finally简介（08:39）"></a>4-1 try-catch-finally简介（08:39）</h4><ul>
<li>try块：用于捕获异常。</li>
<li>catch块：用于处理try捕获到的异常。</li>
<li>finally块：无论是否捕获到异常处理，在这个块的语句都将会被执行。</li>
<li>try块后可接零个或多个catch块，如果没有catch块，则必须跟一个finally块。（即，try必须跟catch或者finally组合使用，不能够单独存在）</li>
</ul>
<p>TryDemoOne.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="4-2-使用try-catch结构处理异常（09-06）"><a href="#4-2-使用try-catch结构处理异常（09-06）" class="headerlink" title="4-2 使用try-catch结构处理异常（09:06）"></a>4-2 使用try-catch结构处理异常（09:06）</h4><p>TryDemoOne.java<br>package com.imooc.test;import java.util.Scanner;public class TryDemoOne {       public static void main(String[] args) {             // 要求：定义两个整数，输出两数之商。//           int one=12;//           int two=2;//           System.out.println("one和two的商是："+(one/two));             //要求：定义两个整数，接受用户的键盘输入，输出两数之商。             Scanner input=new Scanner(System.in);             System.out.println("======运算开始=====");             try {                    System.out.println("请输入第一个整数：");                    int one=input.nextInt();                    System.out.println("请输入第二个整数：");                    int two=input.nextInt();                    System.out.println("one和two的商是："+(one/two));             }catch(Exception e) {                    System.out.println("程序出错啦~~~");                    e.printStackTrace();             }finally {                    System.out.println("======运算结束======");             }       }}</p>
<h4 id="4-3-选择练习"><a href="#4-3-选择练习" class="headerlink" title="4-3 选择练习"></a>4-3 选择练习</h4><p>单选题数组下标越界，则发生异常，提示为（）（选择一项）<br>A.  IOException<br>B.  ArithmeticException<br>C.  SQLException<br>D.  ArrayIndexOutOfBoundsException</p>
<p>正确答案： D<br>参考解析：本题考查异常使用，数组下标越界时，提示的异常为ArrayIndexOutOfBoundsException。故D选项正确。</p>
<h4 id="4-4-选择练习"><a href="#4-4-选择练习" class="headerlink" title="4-4 选择练习"></a>4-4 选择练习</h4><p>单选题<br>运行下列代码，当输入的num值为a时，系统会输出（）（选择一项）<img src="en-resource://database/3393:1" alt="8f84955c0f71c388dd55412cf92e74a2.png"><br>A、<img src="en-resource://database/3395:1" alt="8ad517538ad4c3b483f5861052fb0fc3.png"><br>B、<img src="en-resource://database/3397:1" alt="289660c3d51d335aeac2e1fea912ef40.png"><br>C、<img src="en-resource://database/3399:1" alt="842c3f7e2f8678340715bfbfad177afe.png"><br>D、<img src="en-resource://database/3401:1" alt="a205dbbe993158ee03e86fcd82d26a78.png"></p>
<p>正确答案： B</p>
<p>参考解析：<br>本题考查try-catch-finally结构的使用，输入字符a后会产生异常，所以会输出catch字段内容，而finally字段无论是否发生异常代码总能执行，最后一条输出语句正常执行。因此选项B选项正确。</p>
<h4 id="4-5-使用多重catch结构处理异常（05-00）"><a href="#4-5-使用多重catch结构处理异常（05-00）" class="headerlink" title="4-5 使用多重catch结构处理异常（05:00）"></a>4-5 使用多重catch结构处理异常（05:00）</h4><p>TryDemoOne.java<br>package com.imooc.test;import java.util.InputMismatchException;import java.util.Scanner;public class TryDemoOne {       public static void main(String[] args) {             //要求：定义两个整数，接受用户的键盘输入，输出两数之商。             Scanner input=new Scanner(System.in);             System.out.println("======运算开始=====");             try {                    System.out.println("请输入第一个整数：");                    int one=input.nextInt();                    System.out.println("请输入第二个整数：");                    int two=input.nextInt();                    System.out.println("one和two的商是："+(one/two));             }catch(ArithmeticException e) {                    System.out.println("除数不允许为零");                    e.printStackTrace();             }catch(InputMismatchException e) {                    System.out.println("请输入整数");                    e.printStackTrace();             }catch(Exception e) {                    System.out.println("出错啦~~~");                    e.printStackTrace();             }finally {                    System.out.println("======运算结束======");             }       }}高光部分父类做参数的catch块一定要放在最后一个，做一个收底，如果把它放在前面，后面的的catch块就会失效。</p>
<h4 id="4-6-选择练习"><a href="#4-6-选择练习" class="headerlink" title="4-6 选择练习"></a>4-6 选择练习</h4><p>单选题运行下列代码，输出结果为（）（选择一项）<br><img src="en-resource://database/3403:1" alt="3be685d038239acbefccaa863086cea6.png"><br>A.  a  =  0<br>B.  a  =  0     除数不允许为零<br>C.  a  =  1     数组越界<br>D.  a  =  0     除数不允许为零     数组越界</p>
<p>正确答案： B<br>参考解析：<br>本题考查多重catch语句的异常捕获，捕获的顺序和catch语句的执行顺序有关，当捕获到了一个异常时，剩下的catch语句就不再进行匹配。本题是除数不允许为0的异常，因此B选项正确。</p>
<h4 id="4-7-选择练习"><a href="#4-7-选择练习" class="headerlink" title="4-7 选择练习"></a>4-7 选择练习</h4><p>多选题下列关于异常的描述，错误的是（）（选择两项）<br>A.多重catch应用时，父类异常捕获需要写在子类异常之后。<br>B.    catch块中可以出现同类型异常<br>C.    一个try块可以包含多个catch块<br>D.    捕获到异常后将输出所有catch语句块的内容<br>正确答案： B,D<br>参考解析：<br>本题考查多重catch结构，catch块中不可以出现同类型异常，捕获到异常后将只会输出最先匹配异常的那个catch块内容，故BD选项的说法是错误的。</p>
<h4 id="4-8-终止finally执行的方法（05-48）"><a href="#4-8-终止finally执行的方法（05-48）" class="headerlink" title="4-8 终止finally执行的方法（05:48）"></a>4-8 终止finally执行的方法（05:48）</h4><p>TryDemoOne.javapackage com.imooc.test;import java.util.InputMismatchException;import java.util.Scanner;public class TryDemoOne {       public static void main(String[] args) {             // 要求：定义两个整数，输出两数之商。//           int one=12;//           int two=2;//           System.out.println("one和two的商是："+(one/two));             //要求：定义两个整数，接受用户的键盘输入，输出两数之商。             Scanner input=new Scanner(System.in);             System.out.println("======运算开始=====");             try {                    System.out.println("请输入第一个整数：");                    int one=input.nextInt();                    System.out.println("请输入第二个整数：");                    int two=input.nextInt();                    System.out.println("one和two的商是："+(one/two));             }catch(ArithmeticException e) {                    System.exit(1);//程序无条件终止运行。                    System.out.println("除数不允许为零");                    e.printStackTrace();             }catch(InputMismatchException e) {                    System.out.println("请输入整数");                    e.printStackTrace();             }catch(Exception e) {                    System.out.println("出错啦~~~");                    e.printStackTrace();             }finally {                    System.out.println("======运算结束======");             }       }}</p>
<h4 id="4-9-选择练习"><a href="#4-9-选择练习" class="headerlink" title="4-9 选择练习"></a>4-9 选择练习</h4><p>单选题假设要输入的id值为a101，name值为Tom，程序的执行结果为（）（选择一项）<img src="en-resource://database/3405:1" alt="512c92f79792d21bfdeddef1f76a9b64.png"><br>       A<img src="en-resource://database/3407:1" alt="2967d466ccf1007926d724d6b59bc5fc.png"><br>       B<img src="en-resource://database/3409:1" alt="de0450d700ff46b2c1c994d876d7003b.png"><br>       C<img src="en-resource://database/3411:1" alt="229d8911d8cdf485cb6ca34e8848271f.png"><br>       D<img src="en-resource://database/3413:1" alt="c8c4c7cba8cd2e451fc624c4c849be70.png"><br>       正确答案： C 参考解析：本题考查try-catch-finally语句，输入的id不是整数，所以会产生异常，因为语句System.exit(1)会终止程序的运行，所以程序只会输出catch块中的第一条打印信息，故C选项正确。</p>
<h4 id="4-10-return关键字在异常处理中的作用（11-48）"><a href="#4-10-return关键字在异常处理中的作用（11-48）" class="headerlink" title="4-10 return关键字在异常处理中的作用（11:48）"></a>4-10 return关键字在异常处理中的作用（11:48）</h4><p>笔记有待完善finally语句块中不要使用return语句，不然始终执行finally中return语句块。</p>
<h4 id="4-11-选择练习"><a href="#4-11-选择练习" class="headerlink" title="4-11 选择练习"></a>4-11 选择练习</h4><p>单选题下列代码的运行结果为（）（选择一项）<img src="en-resource://database/3415:1" alt="25d1108890130194792a17485fbc145c.png"><br>       A.  1        B.  10          C.  20        D.  30正确答案： D参考解析：本题考查return关键字在异常处理中的作用。此段代码先执行了try块中的语句，执行return语句，并将加10后的结果20缓存起来，接着跳转到finally语句块执行，由于finally语句块中有return语句，程序就将finally块中新修改的值即30返回了。故选D。</p>
<h3 id="第5章-使用throw和throws实现异常处理"><a href="#第5章-使用throw和throws实现异常处理" class="headerlink" title="第5章 使用throw和throws实现异常处理"></a>第5章 使用throw和throws实现异常处理</h3><h4 id="5-1-使用throws声明异常类（16-53）"><a href="#5-1-使用throws声明异常类（16-53）" class="headerlink" title="5-1 使用throws声明异常类（16:53）"></a>5-1 使用throws声明异常类（16:53）</h4><p>可以通过throws声明将要抛出何种类型的异常，通过throw将产生的异常抛出。如果一个方法可能会出现异常，但没有能力处理这种异常，可以在方法声明处用throws子句来声明抛出异常。throws语句用在方法定义时声明该方法要抛出的异常类型。在throws后面我们可以跟单个或多个异常类型，注意此处跟的是异常类型，而不是异常对象。<img src="en-resource://database/3417:1" alt="38f2a089235ab1b3778ab8d159aaf74a.png"><br>       当方法抛出异常列表中的异常时，方法将不对这些类型及其子类类型的异常作处理，而抛向调用该方法的方法，由他去处理。笔记有待完善。</p>
<h4 id="5-2-使用throw抛出异常对象（15-36）"><a href="#5-2-使用throw抛出异常对象（15-36）" class="headerlink" title="5-2 使用throw抛出异常对象（15:36）"></a>5-2 使用throw抛出异常对象（15:36）</h4><p>throw用来抛出一个异常。例如：throw new IOException();throw抛出的只能够是可抛出类Throwable或者其子类的实例对象。例如：throw new String("出错啦");是错误的。<img src="en-resource://database/3419:1" alt="70b45c60233a97aa14f038ed35592718.png"><br>       对程序异常的处理：规避可能出现的风险。完成一些程序的逻辑。笔记未完成，需分解两个方法，做好笔记记录。</p>
<h4 id="5-3-选择练习"><a href="#5-3-选择练习" class="headerlink" title="5-3 选择练习"></a>5-3 选择练习</h4><pre><code>   多选题下列关于这段代码的说法正确的是（）（选择两项）![2af88df6620d5aa64756deb93a78c09a.png](en-resource://database/3421:1)
   备注：上图代码中 length() 方法，表示求指定字符串长度；nextLine() 方法，表示接收键盘输入，以换行为结束A.  代码错误，没有对test()方法中抛出的异常进行处理B.  若产生异常，将由系统进行异常处理C.  本段代码对throw抛出异常对象的处理方案为自己抛出异常自己处理D.  若输入空字符串，代码运行结果为：![d486b71491ce121610dcc48fac59960e.png](en-resource://database/3423:1)
   正确答案： B,D 参考解析：本题考查使用throw抛出异常，这段代码中若产生异常最终是由主方法声明抛出异常，由系统进行异常处理，故B选项正确，AC选项错误。D选项是正确的，当输入空字符串时，将执行test方法中的throw语句，将抛出参数不能为空的异常。
</code></pre>
<h4 id="5-4-关于通过throw抛出异常类型问题的逼逼叨（03-44）"><a href="#5-4-关于通过throw抛出异常类型问题的逼逼叨（03-44）" class="headerlink" title="5-4 关于通过throw抛出异常类型问题的逼逼叨（03:44）"></a>5-4 关于通过throw抛出异常类型问题的逼逼叨（03:44）</h4><h4 id="5-5-选择练习"><a href="#5-5-选择练习" class="headerlink" title="5-5 选择练习"></a>5-5 选择练习</h4><pre><code>   单选题在下列代码划线处不可以填入选项中的哪一个异常类型（）（选择一项）![12b446788041f60ff6182555725d6b1f.png](en-resource://database/3425:1)
   A.  ThrowableB.  ExceptionC.  InputMismatchExceptionD.  ArithmeticException正确答案： C参考解析：在划线处可以声明抛出与throw对象相同的类型或者其父类，此处是throw后是ArithmeticException，所以应该抛出ArithmeticException或它的父类Throwable和Exception。因此InputMismatchException是不可以写在划线处的，故C选项正确。
</code></pre>
<h3 id="第6章-自定义异常"><a href="#第6章-自定义异常" class="headerlink" title="第6章 自定义异常"></a>第6章 自定义异常</h3><h4 id="6-1-自定义异常类（06-53）"><a href="#6-1-自定义异常类（06-53）" class="headerlink" title="6-1 自定义异常类（06:53）"></a>6-1 自定义异常类（06:53）</h4><p>使用Java内置的异常类可以描述在编程时出现的大部分异常情况。也可以通过自定义异常描述特定业务产生的异常类型。所谓自定义异常，就是定义一个类，去继承Throwable类或者它的子类。HotelAgeException.javapackage com.imooc.test;public class HotelAgeException extends Exception {       public HotelAgeException() {             super("18岁以下，80岁以上的住客必须由亲友陪同。");       }}笔记未完成，需要和DemoFour联动。</p>
<h4 id="6-2-选择练习"><a href="#6-2-选择练习" class="headerlink" title="6-2 选择练习"></a>6-2 选择练习</h4><p>单选题关于下列代码说法正确的是（）（选择一项）<img src="en-resource://database/3427:1" alt="9a7013029f89e8f585a736564b17760a.png"><br>       A.  编译出错，因为没有捕获Exception异常B.  当输入price的值为10时，运行结果为：        The price is too low!C.  当输入price的值为9时，运行结果为：        the price is 9.0D.  当输入price的值为0时，运行结果为：        The price is too low!正确答案： D参考解析：本题考查自定义异常，分析代码可得，当输入的price值小于10时，会产生MyException异常，故D选项正确。</p>
<h4 id="6-3-选择练习"><a href="#6-3-选择练习" class="headerlink" title="6-3 选择练习"></a>6-3 选择练习</h4><p>单选题假设有自定义异常类MyException，那么抛出该异常的语句正确的是（）（选择一项）A.  throw new Exception()B.  throw new MyException()C.  throw MyExceptionD.  throws Exception正确答案： B 参考解析：本题考查自定义异常，抛出异常时抛出的是异常对象，故B选项正确。</p>
<h3 id="第7章-异常链"><a href="#第7章-异常链" class="headerlink" title="第7章 异常链"></a>第7章 异常链</h3><h4 id="7-1-异常链简介（07-45）"><a href="#7-1-异常链简介（07-45）" class="headerlink" title="7-1 异常链简介（07:45）"></a>7-1 异常链简介（07:45）</h4><p>异常链有时候我们会捕获一个异常后再抛出另一个异常。顾名思义就是：将异常发生的原因一个传一个串起来，即把底层的异常信息传给上层，这样逐层抛出。TryDemoFive.javapackage com.imooc.test;public class TryDemoFive {       public static void main(String[] args) {             // TODO Auto-generated method stub             try {                    testThree();             } catch (Exception e) {                    // TODO Auto-generated catch block                    e.printStackTrace();             }       }              public static void testOne() throws HotelAgeException {             throw new HotelAgeException();       }              public static void testTwo() throws Exception {             try {                    testOne();             }catch(HotelAgeException e) {                    throw new Exception("我是新产生的异常1",e);             }       }              public static void testThree() throws Exception{             try {                    testTwo();             } catch(Exception e) {                    Exception e1=new Exception("我是新产生的异常2");                    e1.initCause(e);                    throw e1;//                  throw new Exception("我是新产生的异常2");             }       }}<img src="en-resource://database/3429:1" alt="1e39aa24d3209d6a4116c394c25283df.png"></p>
<h4 id="7-2-选择练习"><a href="#7-2-选择练习" class="headerlink" title="7-2 选择练习"></a>7-2 选择练习</h4><p>单选题若我们想要在位置1处抛出异常的同时保留MyException中的异常信息，则可以在位置1中添加哪句代码（）（选择一项）<img src="en-resource://database/3431:1" alt="4776af0a0165f3112d80c1e175caa0df.png"><br>       A<img src="en-resource://database/3433:1" alt="a0e46fbe30e61700952592686ad39c09.png"><br>       B<img src="en-resource://database/3435:1" alt="94e02e9d563bb6767feb20add415d8eb.png"><br>       C<img src="en-resource://database/3437:1" alt="3d013b8c93110bae144415e6de38eb3d.png"><br>       D<img src="en-resource://database/3439:1" alt="b19dd82e76a78e86d1f682711de2d580.png"><br>       正确答案： A参考解析：本题考查异常链，可以调用Throwable(String message，Throwable cause)来保留底层异常的异常信息。故A选项正确。</p>
<h4 id="7-3-选择练习"><a href="#7-3-选择练习" class="headerlink" title="7-3 选择练习"></a>7-3 选择练习</h4><p>单选题在划线处填入选项中的哪段代码可以实现抛出异常的同时保留原始的异常信息（）（选择一项）<img src="en-resource://database/3441:1" alt="1ec762c08554d11998770749e663e426.png"><br>       A<img src="en-resource://database/3443:1" alt="9a20b165b57b3767764e1059fba60668.png"><br>       B<img src="en-resource://database/3445:1" alt="e977ae559ce758553f085e767d26c2e0.png"><br>       C<img src="en-resource://database/3447:1" alt="54170409a1e1a484e9e1a89066a8efbd.png"><br>       D<img src="en-resource://database/3449:1" alt="464a38d1e93079b4a479148ecf01fa49.png"><br>       正确答案： B参考解析：本题考查异常链，initCause(Throwable cause) 方法用来获取原始异常的描述信息，其中cause是原始异常的对象，故B选项正确。</p>
<h3 id="第8章-课程总结"><a href="#第8章-课程总结" class="headerlink" title="第8章 课程总结"></a>第8章 课程总结</h3><h4 id="8-1-课程总结（05-50）"><a href="#8-1-课程总结（05-50）" class="headerlink" title="8-1 课程总结（05:50）"></a>8-1 课程总结（05:50）</h4><pre><code>   程序中的异常在程序运行过程中，意外发生的情况，背离我们程序本身的意图的表现，都可以理解为异常。利用Java中的异常机制，我们可以更好地提升程序的健壮性。在Java中，通过Throwable及其子类描述各种不同的异常类型。![96c3caec66384a892d9dacf4fa843c7e.png](en-resource://database/3451:1)
   笔记未完成。《Java常见异常类型及原因分析（上）》《Java常见异常类型及原因分析（下）》
</code></pre>
<p><img src="en-resource://database/3453:1" alt="6b67605db9c800b16d7f5e56fff59ea3.png"></p>
</body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java基础通识1.3.2 包装类</title>
    <url>/posts/2589003794/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>一、Java的编译基础</li>
<li>二、Java程序实际执行细节</li>
<li>三、使用eclipse开发Java程序</li>
</ul>
<a id="more"></a>

<h3 id="包装类与基本数据类型"><a href="#包装类与基本数据类型" class="headerlink" title="包装类与基本数据类型"></a>包装类与基本数据类型</h3><ul>
<li><p>Java中的基本数据类型不具有引用特征的，它们不能像对象一样拥有属性和方法，也无法对象或交互。       </p>
</li>
<li><p>包装类可以让基本数据类型获得对象一样的特征，行使对象相关的权益（拥有属性、方法，可以对象化交互）。</p>
</li>
</ul>
<p><strong>包装类与基本数据类型的对应关系：</strong></p>
<table>
<thead>
<tr>
<th align="center">基本数据类型</th>
<th align="center">包装类</th>
</tr>
</thead>
<tbody><tr>
<td align="center">byte</td>
<td align="center">Byte</td>
</tr>
<tr>
<td align="center">short</td>
<td align="center">Short</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center"><strong>Integer</strong></td>
</tr>
<tr>
<td align="center">long</td>
<td align="center">Long</td>
</tr>
<tr>
<td align="center">float</td>
<td align="center">Float</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">Double</td>
</tr>
<tr>
<td align="center">char</td>
<td align="center"><strong>Character</strong></td>
</tr>
<tr>
<td align="center">boolean</td>
<td align="center">Boolean</td>
</tr>
</tbody></table>
<p>大部分包装类的命名是字母首字母改为大写而成。</p>
<p>《包装类型与基本数据类型的异同》</p>
<p><strong>基本数据类型：</strong><br>Java 语言提供了八种基本类型：六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。<br>1、整数：包括 int,short,byte,long ,初始值为 0<br>2、浮点型：float,double ,初始值为 0.0<br>3、字符：char ,初始值为空格，即’’ “，如果输出，在 Console 上是看不到效果的。<br>4、布尔：boolean ,初始值为 false</p>
<table>
<thead>
<tr>
<th>基本型别</th>
<th>大小</th>
<th>最小值</th>
<th>最大值</th>
</tr>
</thead>
<tbody><tr>
<td>boolean</td>
<td>—–</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>char</td>
<td>16bit</td>
<td>Unicode 0</td>
<td>Unicode 2^16-1</td>
</tr>
<tr>
<td>byte</td>
<td>8bit</td>
<td>-128</td>
<td>+127</td>
</tr>
<tr>
<td>short</td>
<td>16bit</td>
<td>-2^15</td>
<td>+2^15-1</td>
</tr>
<tr>
<td>int</td>
<td>32bit</td>
<td>-2^31</td>
<td>+2^31-1</td>
</tr>
<tr>
<td>long</td>
<td>64bit</td>
<td>-2^63</td>
<td>+2^63-1</td>
</tr>
<tr>
<td>float</td>
<td>32bit</td>
<td>IEEE754</td>
<td>IEEE754</td>
</tr>
<tr>
<td>double</td>
<td>64bit</td>
<td>IEEE754</td>
<td>IEEE754</td>
</tr>
<tr>
<td>void</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><strong>注意：</strong><br>表格里的^代表的是次方;<br>Java 采用 unicode 编码，2 个字节来表示一个字符。</p>
<p><strong>包装类：</strong><br>Java 中的包装类包括： Integer、Long、Short、Byte、Character、Double、Float、Boolean、BigInteger、BigDecimal。其中 BigInteger、BigDecimal没有相对应的基本类型，主要应用于高精度的运算，BigInteger 支持任意精度的整数，BigDecimal 支持任意精度带小数点的运算。</p>
<p><strong>基本类型与包装类型的异同：</strong><br>1、在 Java 中，一切皆对象，但八大基本类型却不是对象。<br>2、声明方式的不同，基本类型无需通过 new 关键字来创建，而包装类型需<br>new 关键字。<br>3、存储方式及位置的不同，基本类型是直接存储变量的值保存在栈中能高<br>效的存取，包装类型需要通过引用指向实例，具体的实例保存在堆中。<br>4、初始值的不同，包装类型的初始值为 null，基本类型的的初始值视具体<br>的类型而定，比如 int 类型的初始值为 0，boolean 类型为 false。<br>5、使用方式的不同，比如与集合类合作使用时只能使用包装类型。       </p>
<h4 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a>单选题</h4><p>Java中提供了名为（）的包装类来包装字符类型。（选择一项）</p>
<p>A.  Integer        B.  String        C.  Character        D.  Char</p>
<p>正确答案： C</p>
<p>参考解析：本题考查的是基本数据类型和包装类的对应关系，原始字符类型的包装类名Character，故C选项正确。</p>
<h4 id="单选题-1"><a href="#单选题-1" class="headerlink" title="单选题"></a>单选题</h4><p>以下哪一选项不是基本数据类型（）（选择一项）</p>
<p>A.  boolean        B.  float        C.  Integer        D.  char</p>
<p>正确答案： C</p>
<p>参考解析：本题考查的是Java中的基本数据类型。其中，boolean和float是基本数据类型，Integer是int类型对应的包装类，char是字符型相关类型，所以答案是Integer，C选项正确。</p>
<h4 id="多选题"><a href="#多选题" class="headerlink" title="多选题"></a>多选题</h4><p>下列关于基本类型和包装类的叙述中错误的是（ ）（选择两项）</p>
<p>A.  Java中的数据类型包括基本数据类型和引用类型</p>
<p>B.  Byte是基本数据类型</p>
<p>C.  基本数据类型可以调用方法</p>
<p>D.  每个基本数据类型都有对应的包装类</p>
<p>正确答案： B,C </p>
<p>参考解析：本题考查的是Java中的基本数据类型和包装类的对应关系。Java中的数据类型包含基本数据类型和引用类型，每个基本数据类型都对应有包装类，故AD选项正确。B选项的说法是错误的，byte是基本数据类型，注意Java是区分大小写的，Byte表示byte对应的包装类。C选项说法错误，由于基本数据类型不具有对象特征，也无法调用方法，因此每个基本数据类型都有对应的包装类，可以通过包装类实现对象化操作。</p>
<h3 id="包装类常用方法简介"><a href="#包装类常用方法简介" class="headerlink" title="包装类常用方法简介"></a>包装类常用方法简介</h3><p>JAVA 是一种面向对象语言，JAVA 中的类把方法与数据连接在一起，构成了自包含式的处理单元。但在 JAVA 中不能定义基本类型（primitive type)对象，为了能将基本类型视为对象进行处理，并能连接相关的方法，JAVA 为每个基本类型都提供了包装类。如 int 型数值的包装类 Integer，boolean 型数值的包装类 Boolean 等，这样便可以把这些基本类型转换为对象来处理了。下面将介绍JAVA 中提供的各种包装类。</p>
<p><strong>一、Integer</strong><br>java.lang 包中的 Integer 类、Long 类和 Short 类，分别将基本类型 int、long 和 short 封装成一个类。由于这些类都是 Number 的子类，区别就是封装不同的数据类型，其包含的方法基本相同，下面以 Integer 类为例介绍：Integer 类在对象中包装了一个基本类型 int 的值。该类的对象包含一个 int类型的字段。此外，该类提供了多个方法，能在 int 类型和 String 类型之间互相转换，同时还提供了处理 int 类型时非常有用的其他一些常量和方法。</p>
<p>1、  构造方法有两种：<br>        a) 以 int 型变量作为参数创建 Integer 对象，实例代码如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">Integer number=<span class="keyword">new</span> Integer(<span class="number">7</span>);</span><br></pre></td></tr></tbody></table></figure></div>
<p>b) 以 String 型变量作为参数创建 Integer 对象，实例代码如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">Integer number=<span class="keyword">new</span> Integer(“<span class="number">7</span>”);</span><br></pre></td></tr></tbody></table></figure></div>
<p>2、常用方法：</p>
<p><strong>Integer 类的常用方法</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>返回值</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>byteValue()</td>
<td>byte</td>
<td>以 byte 类型反回该 Integer 的值</td>
</tr>
<tr>
<td>compareTo(Integer anotherInteger)</td>
<td>int</td>
<td>在数字上比较两个 Integer 对象。如果这两个值相等，则返回 0；如果调用对象的数值小于 anotherInteger 的数值，则返回负值；如果调用对象的数值大于anotherInteger 的数值，则返回正值</td>
</tr>
<tr>
<td>equals（Object IntegerObj）</td>
<td>boolean</td>
<td>比较此对象与指定对象是否相等</td>
</tr>
<tr>
<td>intValue()</td>
<td>int</td>
<td>以 int 型返回此 Integer 对象</td>
</tr>
<tr>
<td>shortValue()</td>
<td>short</td>
<td>以 short 型返回此 Integer 对象</td>
</tr>
<tr>
<td>toString()</td>
<td>String</td>
<td>返回一个表示该 Integer 值的 String 对象</td>
</tr>
<tr>
<td>valueOf(String str)</td>
<td>Integer</td>
<td>返回保存指定的 String 值的 Integer 对象</td>
</tr>
<tr>
<td>parseInt(String str)</td>
<td>int</td>
<td>返回包含在由str指定的字符串中的数字的等价整数值</td>
</tr>
</tbody></table>
<p><strong>3、  常用的常量：</strong><br>        a) MAX_VALUE: 表示 int 型可取的最大值<br>        b) MIN_VALUE: 表示 int 型可取的最小值<br>        c) SIZE：表示以二进制补码形式表示 int 值的位数<br>        d) TYPE: 表示基本类型 Class 实例</p>
<p>示例如：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> maxint = Integer.MAX_VALUE;</span><br><span class="line"><span class="keyword">int</span> minint = Integer.MIN_VALUE;</span><br><span class="line"><span class="keyword">int</span> intsize = Integer.SIZE;</span><br><span class="line">System.out.println(<span class="string">"int 类型可取的最大值"</span>+maxint);</span><br><span class="line">System.out.println(<span class="string">"int 类型可取的最小值"</span>+minint);</span><br><span class="line">System.out.println(<span class="string">"int 类型的二进制位数"</span>+intsize);</span><br></pre></td></tr></tbody></table></figure></div>

<p>输出结果为：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>类型可取的最大值<span class="number">2147483647</span></span><br><span class="line"><span class="keyword">int</span>类型可取的最小值-<span class="number">2147483648</span></span><br><span class="line"><span class="keyword">int</span>类型的二进制位数<span class="number">32</span></span><br></pre></td></tr></tbody></table></figure></div>


<p><strong>二、Boolean</strong><br>Boolean 类将基本类型为 boolean 的值包装在一个对象中。一个 Boolean类型的对象只包含一个类型为 boolean 的字段。此外，此类还为 boolean 和String 的相互转换提供了许多方法，并提供了处理 boolean 时非常有用的其他一些常量和方法。<br>1、  构造方法：<br>        e) 创建一个表示 value 参数的 boolean 对象，实例如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">Boolean b = <span class="keyword">new</span> Boolean(<span class="keyword">true</span>);</span><br></pre></td></tr></tbody></table></figure></div>
<p>f) 以 String 变量作为参数，创建 boolean 对象。此时，如果传入的字符<br>串不为 null，且忽略大小写后的内容等于”true”,则生成 Boolean 对象值<br>为 true，反之为 false.<br>示例如：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">Boolean b1 = <span class="keyword">new</span> Boolean(<span class="string">"ok"</span>);</span><br><span class="line">System.out.println(b1);</span><br><span class="line">Boolean b2=<span class="keyword">new</span> Boolean(<span class="string">"TRUE"</span>);</span><br><span class="line">System.out.println(b2);</span><br></pre></td></tr></tbody></table></figure></div>
<p>输出结果为：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>2、常用方法：</p>
<p><strong>Boolean 类的常用方法</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>返回值</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>booleanValue()</td>
<td>boolean</td>
<td>将 Boolean 对象的值以对应的boolean 值返回</td>
</tr>
<tr>
<td>equals(Object obj)</td>
<td>boolean</td>
<td>判断调用该方法的对象与obj是否相等，当且仅当参数不是 null，而且与调用该方法的对象一样都表示同一个 boolean 值的 Boolean 对象时，才返回 true</td>
</tr>
<tr>
<td>parseBoolean(Strings)</td>
<td>boolean</td>
<td>将字符串参数解析为 boolean 值</td>
</tr>
<tr>
<td>toString()</td>
<td>String</td>
<td>返回表示该 boolean 值的 String 对象</td>
</tr>
<tr>
<td>valueOf(String s)</td>
<td>boolean</td>
<td>返回一个用指定的字符串表示值的 boolean 值</td>
</tr>
</tbody></table>
<p>其中 booleanValue()的功能是：将 booleanValue 对象的值以对应的<br>boolean 值返回。<br>示例如：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">Boolean b1 = <span class="keyword">new</span> Boolean(<span class="string">"OK"</span>);</span><br><span class="line">Boolean b2 = <span class="keyword">new</span> Boolean(<span class="keyword">false</span>);</span><br><span class="line">System.out.println(<span class="string">"b1:"</span>+b1.booleanValue());</span><br><span class="line">System.out.println(<span class="string">"b2:"</span>+b2.booleanValue());</span><br></pre></td></tr></tbody></table></figure></div>
<p>结果如图：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">b1:<span class="keyword">false</span></span><br><span class="line">b2:<span class="keyword">false</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>3、常用的常量：<br>        a) TRUE:对应基值 true 的 Boolean 对象；<br>        b) FALSR:对应基值 false 的 Boolean 对象；<br>        c) TYPE:表示基本类型 Class 实例</p>
<p><strong>三、Byte</strong><br>Byte 类将基本类型为 byte 的值包装在一个对象中，一个 byte 类型的对象只包含一个类型为 byte 的对象。此外，该类还为 byte 和 String 之间相互转换提供方法，并提供了一些处理 byte 时非常有用的常量。<br>1、  构造方法<br>        Byte 类提供了两种构造方法的重载形式来创建 BYTE 类对象：<br>        a) Byte(byte value) 通过这种方法创建的 byte 对象，可表示指定的 byte值。<br>例：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"> <span class="keyword">byte</span> mybyte=<span class="number">45</span>;</span><br><span class="line">Byte b = <span class="keyword">new</span> Byte(mybyte);</span><br></pre></td></tr></tbody></table></figure></div>
<p>b) Byte(String str) 通过这种方法创建的 byte 对象，可表示 String 参数<br>指定的 byte 值<br>例：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">Byte mybyte = <span class="keyword">new</span> Byte(<span class="string">"12"</span>)</span><br></pre></td></tr></tbody></table></figure></div>
<p>2、常用方法</p>
<p><strong>Byte 类的常用方法</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>返回值</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>byteValue()</td>
<td>byte</td>
<td>以一个 byte 值返回 Byte 对象</td>
</tr>
<tr>
<td>compareTo(Byte anotherByte)</td>
<td>int</td>
<td>在数字上比较两个 Byte 对象</td>
</tr>
<tr>
<td>doubleValue()</td>
<td>double</td>
<td>以一个 double 值返回此 Byte 值</td>
</tr>
<tr>
<td>intValue()</td>
<td>int</td>
<td>以一个 int 值返回此 Byte 的值</td>
</tr>
<tr>
<td>parseByte(String str)</td>
<td>byte</td>
<td>将 String 型参数解析成等价的字节<br>（byte）形式</td>
</tr>
<tr>
<td>toString()</td>
<td>String</td>
<td>返回此 Byte 的值的 String 对象</td>
</tr>
<tr>
<td>valueOf(String str)</td>
<td>Byte</td>
<td>返回一个保持指定 String 所输出的值的<br>Byte 对象</td>
</tr>
<tr>
<td>equals(Object obj)</td>
<td>boolean</td>
<td>将此对象与指定对象比较，如果调用该方法的对象与 obj 相等，则返回 true，否则返回 false</td>
</tr>
</tbody></table>
<p>3、  常用的常量<br>        a) MIN_VALUE: 最小值<br>        b) MAX_VALUE: 最大值<br>        c) SIZE: 二进制<br>        d) TYPE: 表示基本类型 byte 的 class 实例</p>
<p><strong>四、Character</strong><br>Character 类在对象中包装一个基本类型为 char 的值。一个 Character 对<br>象包含类型为 char 的单个字段。</p>
<p>1、构造方法<br>Character 类的构造方法的语法如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">Character(<span class="keyword">char</span> value)</span><br></pre></td></tr></tbody></table></figure></div>
<p>2、常用方法<br><strong>Character 类的常用方法</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>返回值</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>charValue()</td>
<td>char</td>
<td>返回此 Character 对象的值</td>
</tr>
<tr>
<td>compareTo(Character anotherChara cter)</td>
<td>int</td>
<td>根据数字比较两个 Character 对象，若这两个对象相等则返回 0</td>
</tr>
<tr>
<td>equals(Object obj)</td>
<td>boolean</td>
<td>将调用该方法的对象与指定的对象相比较</td>
</tr>
<tr>
<td>toUpperCase(char ch)</td>
<td>char</td>
<td>将字符参数转换为大写</td>
</tr>
<tr>
<td>toLowerCase(char ch)</td>
<td>char</td>
<td>将字符参数转换为小写</td>
</tr>
<tr>
<td>toString()</td>
<td>String</td>
<td>返回一个表示指定 char 值的 String 对象</td>
</tr>
<tr>
<td>charValue()</td>
<td>char</td>
<td>返回此 Character 对象的值</td>
</tr>
<tr>
<td>isUpperCase(char ch)</td>
<td>boolean</td>
<td>判断指定字符是否是大写字符</td>
</tr>
<tr>
<td>isLowerCase(char ch)</td>
<td>boolean</td>
<td>判断指定字符是否是小写字符</td>
</tr>
</tbody></table>
<p>示例如：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">Character mychar1=<span class="keyword">new</span> Character(<span class="string">'A'</span>);</span><br><span class="line">Character mychar2=<span class="keyword">new</span> Character(<span class="string">'a'</span>);</span><br><span class="line">System.out.println(mychar1+<span class="string">"是大写字母吗</span></span><br><span class="line"><span class="string">"</span>+Character.isUpperCase(mychar1));</span><br><span class="line">System.out.println(mychar2+<span class="string">"是小写字母吗</span></span><br><span class="line"><span class="string">"</span>+Character.isLowerCase(mychar2));</span><br></pre></td></tr></tbody></table></figure></div>
<p>结果如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">A是大写字母吗<span class="keyword">true</span></span><br><span class="line">a是大写字母吗<span class="keyword">true</span></span><br></pre></td></tr></tbody></table></figure></div>


<p><strong>五、Double</strong><br>Double 和 Float 包装类是对 double、float 基本类型的封装，他们都是 Number 类的子类，又都是对小数进行操作，所以常用基本方法相同，Double 类在对象中包装一个基本类型为 double 的值，每个 double 类都包含一个 double 类型的字段。<br>1、  构造方法<br>2、 Double 类提供了两种构造方法来获得 Double 类对象<br>        a) Double（double value): 基于 double 参数创建 Double 类对象；<br>        b) Double（String str): 构造一个新分配的 Double 对象，表示用字符串表示的 Double 类型的浮点值</p>
<p>3、  常用方法<br><strong>Double 类的常用方法</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>返回值</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>byteValue()</td>
<td>byte</td>
<td>以 byte 形式返回 Double 对象值（通过强制转换）</td>
</tr>
<tr>
<td>compareTo(Doubled)</td>
<td>int</td>
<td>对两个 Double 对象进行数值比较。如果两个值相等，则返回 0；如果调<br>用对象的数值小于 d 的数值，则返回负值；如果调用对象的数值大于 d 的数值，则返回正值</td>
</tr>
<tr>
<td>equals( Obje ct obj)</td>
<td>boolean</td>
<td>将此对象与指定的对象相比较</td>
</tr>
<tr>
<td>intValue()</td>
<td>int</td>
<td>以 int 形式返回 Double 值</td>
</tr>
<tr>
<td>isNaN()</td>
<td>boolean</td>
<td>如果此 double 值是非数字（NaN）值，则返回 true；否则返回 false</td>
</tr>
<tr>
<td>toString()</td>
<td>string</td>
<td>返回此Double对象的字符串表示形式</td>
</tr>
<tr>
<td>valueOf(String str)</td>
<td>double</td>
<td>返回保存参数字符串 str 表示的 double 值的 Double 对象</td>
</tr>
<tr>
<td>doubleValue()</td>
<td>double</td>
<td>以 double 形式返回此 Double 对象</td>
</tr>
<tr>
<td>longValue()</td>
<td>long</td>
<td>以 long 形式返回 double 的值（通过强化转换为 long 类型）</td>
</tr>
</tbody></table>
<p><strong>六、Number</strong><br>抽象类 Number 是父类，Number 的子类必须提供将表示的数值转换成 byte、double/float/long/int/short 的方法。Number 类的方法被Number 的各子类所实现，常用方法下：</p>
<p><strong>Number 类的方法</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>返回值</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>byteValue()</td>
<td>byte</td>
<td>以 byte 形式返回指定的数值</td>
</tr>
<tr>
<td>intValue()</td>
<td>int</td>
<td>以 int 形式返回指定的数值</td>
</tr>
<tr>
<td>floatValue()</td>
<td>float</td>
<td>以 float 形式返回指定的数值</td>
</tr>
<tr>
<td>shortValue()</td>
<td>short</td>
<td>以 short 形式返回指定的数值</td>
</tr>
<tr>
<td>longValue()</td>
<td>long</td>
<td>以 long 形式返回指定的数值</td>
</tr>
<tr>
<td>doubleValue()</td>
<td>double</td>
<td>以 double 形式返回指定的数值</td>
</tr>
</tbody></table>
<h4 id="单选题-2"><a href="#单选题-2" class="headerlink" title="单选题"></a>单选题</h4><p>Double 类，Math类，System类分别存储于（）哪个包中？（选择一项）</p>
<p>A.  java.io，java.io，java.lang</p>
<p>B.  java.io，java.util，java.lang</p>
<p>C.  java.io，java.io，java.util</p>
<p>D.  java.lang，java.lang，java.lang</p>
<p>正确答案： D</p>
<p>参考解析：本题考查的是包装类的所在的包，基本数据类型的包装类位于java.lang包中。java.lang中包含有最常用的System类。类Math提供了常用的数学函数，也是存在于java.lang包中的。故D选项正确。</p>
<h4 id="单选题-3"><a href="#单选题-3" class="headerlink" title="单选题"></a>单选题</h4><p>下列选项中继承自Number的是（）（选择一项）</p>
<p>A.  Integer和long</p>
<p>B.  Character和 Integer</p>
<p>C.  Byte和Integer</p>
<p>D.  long和short</p>
<p>正确答案： C</p>
<p>参考解析：本题考察的是包装类的常用方法，数值型包装类是继承自Number的，字符型和布尔型是继承自Object的，故C选项正确。</p>
<h3 id="基本数据类型和包装类之间的转换"><a href="#基本数据类型和包装类之间的转换" class="headerlink" title="基本数据类型和包装类之间的转换"></a>基本数据类型和包装类之间的转换</h3><p>装箱把基本数据类型的值转换成对应包装类的对象。拆箱把包装类对象转换成对应的基本数据类型的值。无论装箱还是拆箱，都有自动和手动两种行为。</p>
<p>WrapTestOne.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WropTestOne</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        <span class="comment">// 装箱：把基本数据类型装换成包装类。</span></span><br><span class="line">        <span class="comment">// 1、自动装箱</span></span><br><span class="line">        <span class="keyword">int</span> t1 = <span class="number">2</span>;</span><br><span class="line">        Integer t3=<span class="keyword">new</span> Integer(t1);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 测试</span></span><br><span class="line">        System.out.println(<span class="string">"int类型变量t1="</span>+t1);</span><br><span class="line">        System.out.println(<span class="string">"Integer类型变量t2="</span>+t2);</span><br><span class="line">        System.out.println(<span class="string">"Integer类型变量t3="</span>+t3);</span><br><span class="line">        System.out.println(<span class="string">"====================="</span>);</span><br><span class="line">        <span class="comment">// 拆箱：把包装类转换成基本数据类型</span></span><br><span class="line">        <span class="comment">// 1、自动拆箱</span></span><br><span class="line">        <span class="keyword">int</span> t4=t2;</span><br><span class="line">        <span class="comment">// 2、手动拆箱</span></span><br><span class="line">        <span class="keyword">int</span> t5=t2.intValue();</span><br><span class="line">        <span class="comment">// 测试</span></span><br><span class="line">        System.out.println(<span class="string">"Integer类型对象t2="</span>+t2);</span><br><span class="line">        System.out.println(<span class="string">"自动拆箱后，int类型变量t4="</span>+t4);</span><br><span class="line">        System.out.println(<span class="string">"手动拆箱后，int类型变量t5="</span>+t5);</span><br><span class="line">        <span class="keyword">double</span> t6=t2.doubleValue();</span><br><span class="line">        System.out.println(<span class="string">"手动拆箱后，double类型变量t6="</span>+t6);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>输出结果：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>类型变量t1=<span class="number">2</span></span><br><span class="line">自动拆箱后，<span class="keyword">int</span>类型变量t4=<span class="number">2</span></span><br><span class="line">手动拆箱后，<span class="keyword">int</span>类型变量t5=<span class="number">2</span></span><br><span class="line">===============================</span><br><span class="line">Integer类型对象t2=<span class="number">2</span></span><br><span class="line">自动拆箱后，<span class="keyword">int</span>类型变量t4=<span class="number">2</span></span><br><span class="line">自动拆箱后，<span class="keyword">int</span>类型变量t5=<span class="number">2</span></span><br><span class="line">手动拆箱后，<span class="keyword">double</span>类型变量t6=<span class="number">2.0</span></span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="单选题-4"><a href="#单选题-4" class="headerlink" title="单选题"></a>单选题</h4><p>下面代码运行的正确结果是（）（选择一项）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuildStuff</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(Boolean b,<span class="keyword">int</span> i)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(b){</span><br><span class="line">            <span class="keyword">return</span> (i / <span class="number">7</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> (i / <span class="number">49</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        Boolean bool = <span class="keyword">new</span> Boolean(<span class="keyword">true</span>);</span><br><span class="line">        Integer x = <span class="number">343</span>;</span><br><span class="line">        Integer y = <span class="keyword">new</span> BuildStuff().test(bool, x);</span><br><span class="line">        System.out.println(y);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>A.  350        B.  49        C.  7        D.  编译错误，无法正常运行</p>
<p>正确答案： B</p>
<p>参考解析：本题考查包装类参与运算，main方法中调用test()方法，实参为true和343，转到test()方法执行，b为true，因此返回值为343/7＝49，因此最后输出结果为49。故B选项正确。</p>
<h4 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h4><p>请按照编辑器中的注释，在对应的空白区域填写对应的代码，完成基本数据类型和包装类之间的转换。程序运行参考效果图如下：</p>
<p><strong>原题:</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 定义int类型变量，值为100</span></span><br><span class="line">        <span class="keyword">int</span> score = <span class="number">100</span>;</span><br><span class="line">        <span class="comment">// 创建Integer包装类对象，表示变量score1的值</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将Integer包装类转换为double类型</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将Integer包装类转换为long类型</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将Integer包装类转换为int类型</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//打印输出</span></span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答:</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 定义int类型变量，值为100</span></span><br><span class="line">        <span class="keyword">int</span> score = <span class="number">100</span>;</span><br><span class="line">        <span class="comment">// 创建Integer包装类对象，表示变量score1的值</span></span><br><span class="line">        Integer score1=score;</span><br><span class="line">        <span class="comment">// 将Integer包装类转换为double类型</span></span><br><span class="line">        <span class="keyword">double</span> score2=score1.doubleValue();</span><br><span class="line">        <span class="comment">// 将Integer包装类转换为long类型</span></span><br><span class="line">        <span class="keyword">long</span> score3=score1.longValue();</span><br><span class="line">        <span class="comment">// 将Integer包装类转换为int类型</span></span><br><span class="line">        <span class="keyword">int</span> score4=score1;</span><br><span class="line">        <span class="comment">//打印输出</span></span><br><span class="line">        System.out.println(<span class="string">"score对应的Integer类型结果为："</span>+score1);</span><br><span class="line">        System.out.println(<span class="string">"score对应的double类型结果为："</span>+score2);</span><br><span class="line">        System.out.println(<span class="string">"score对应的long类型结果为："</span>+score3);</span><br><span class="line">        System.out.println(<span class="string">"重新由Integer转换为int类型的结果为："</span>+score4);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<h3 id="基本数据类型和字符串之间的转换"><a href="#基本数据类型和字符串之间的转换" class="headerlink" title="基本数据类型和字符串之间的转换"></a>基本数据类型和字符串之间的转换</h3><p><strong>WrapTestTwo.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> wrap;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapTestTwo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="comment">//基本数据类型转换成字符串。</span></span><br><span class="line">        <span class="keyword">int</span> t1=<span class="number">2</span>;</span><br><span class="line">        String t2=Integer.toString(t1);</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        System.out.println(<span class="string">"int类型转换为String类型对象t2="</span>+t2);</span><br><span class="line">        System.out.println(<span class="string">"******************************"</span>);</span><br><span class="line">        <span class="comment">//字符串转换为基本数据类型。</span></span><br><span class="line">        <span class="comment">//方法一：包装类的parse。</span></span><br><span class="line">        <span class="keyword">int</span> t3=Integer.parseInt(t2);</span><br><span class="line">        <span class="comment">//方法二：包装类的valueOf  先将字符串转换为包装类，再通过自动拆箱完成基本类型转换。</span></span><br><span class="line">        <span class="keyword">int</span> t4=Integer.valueOf(t2);</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        System.out.println(<span class="string">"int类型转换为String类型对象t3="</span>+t3);</span><br><span class="line">        System.out.println(<span class="string">"int类型转换为String类型对象t4="</span>+t4);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>运行结果：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>类型转换为String类型对象t2=<span class="number">2</span></span><br><span class="line">******************************</span><br><span class="line"><span class="keyword">int</span>类型转换为String类型对象t3=<span class="number">2</span></span><br><span class="line"><span class="keyword">int</span>类型转换为String类型对象t4=<span class="number">2</span></span><br></pre></td></tr></tbody></table></figure></div>


<h4 id="2-12-编程练习"><a href="#2-12-编程练习" class="headerlink" title="2-12 编程练习"></a>2-12 编程练习</h4><p>请按照编辑器中的注释，在对应的空白区域填写对应的代码，完成基本数据类型和包装类之间的转换。程序运行参考效果图如下：</p>
<p><img src="en-resource://database/3473:1" alt="31dee008ca19289a161d8f9cc2bf9002.png"></p>
<p> 原题</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">StringUse.javapublic <span class="class"><span class="keyword">class</span> <span class="title">StringUse</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">double</span> a = <span class="number">12.5</span>;</span><br><span class="line">        <span class="comment">//将基本类型转换为字符串</span></span><br><span class="line">        String str1 =</span><br><span class="line">            System.out.println(<span class="string">"a 转换为String型后+10的结果为："</span>+);</span><br><span class="line">        String str = <span class="string">"2.8"</span>;</span><br><span class="line">        <span class="comment">// 将字符串转换为基本类型</span></span><br><span class="line">        <span class="keyword">double</span> b =</span><br><span class="line">            System.out.println(<span class="string">"str 转换为double型后+10的结果为："</span>+);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>作答</p>
<p>StringUse.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringUse</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">double</span> a = <span class="number">12.5</span>;</span><br><span class="line">        <span class="comment">//将基本类型转换为字符串</span></span><br><span class="line">        String str1 = Double.toString(a);</span><br><span class="line">        System.out.println(<span class="string">"a 转换为String型后+10的结果为："</span>+str1);</span><br><span class="line">        String str = <span class="string">"2.8"</span>;</span><br><span class="line">        <span class="comment">// 将字符串转换为基本类型</span></span><br><span class="line">        <span class="keyword">double</span> b = Double.parseDouble(str);</span><br><span class="line">        System.out.println(<span class="string">"str 转换为double型后+10的结果为："</span>+ b);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<h3 id="需要知道的几点知识（上）"><a href="#需要知道的几点知识（上）" class="headerlink" title="需要知道的几点知识（上）"></a>需要知道的几点知识（上）</h3><ul>
<li><p>包装类对象的初始值</p>
</li>
<li><p>包装类对象间的比较</p>
</li>
</ul>
<p><img src="en-resource://database/3475:1" alt="c02a5702e101a46a32c2642cbd21f6a8.png"></p>
<p>​       Cat.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> wrap;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>{</span><br><span class="line">    <span class="comment">//成员属性</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> month;</span><br><span class="line">    <span class="keyword">double</span> weight;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>CatTest.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> wrap;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="comment">//实例化对象。</span></span><br><span class="line">        Cat one=<span class="keyword">new</span> Cat();</span><br><span class="line">        <span class="comment">//测试输出</span></span><br><span class="line">        System.out.println(<span class="string">"小猫昵称："</span>+one.name);</span><br><span class="line">        System.out.println(<span class="string">"小猫年龄："</span>+one.month);</span><br><span class="line">        System.out.println(<span class="string">"小猫体重："</span>+one.weight);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>运行结果：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">小猫的昵称：<span class="keyword">null</span></span><br><span class="line">小猫的年龄：<span class="number">0</span></span><br><span class="line">小猫的体重：<span class="number">0.0</span></span><br></pre></td></tr></tbody></table></figure></div>

<p>​       Cat.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> wrap;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>{</span><br><span class="line">    <span class="comment">//成员属性</span></span><br><span class="line">    String name;</span><br><span class="line">    Integer month;</span><br><span class="line">    Double weight;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>CatTest.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> wrap;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//实例化对象。</span></span><br><span class="line">        Cat one=<span class="keyword">new</span> Cat();</span><br><span class="line">        <span class="comment">//测试输出</span></span><br><span class="line">        System.out.println(&amp;quot;小猫昵称：&amp;quot;+one.name);</span><br><span class="line">        System.out.println(&amp;quot;小猫年龄：&amp;quot;+one.month);</span><br><span class="line">        System.out.println(&amp;quot;小猫体重：&amp;quot;+one.weight);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>运行结果：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">小猫的昵称：<span class="keyword">null</span></span><br><span class="line">小猫的年龄：<span class="keyword">null</span></span><br><span class="line">小猫的体重：<span class="keyword">null</span></span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="单选题-5"><a href="#单选题-5" class="headerlink" title="单选题"></a>单选题</h4><p>下面代码运行的正确结果是（）（选择一项）</p>
<p><img src="en-resource://database/3481:1" alt="77dae98fadb535d6c8930e2bc8cf4fff.png"></p>
<p>A.  4</p>
<p>B.  8</p>
<p>C.  编译错误，无法正常运行</p>
<p>D.  编译正确，但运行时产生错误</p>
<p>正确答案： D</p>
<p>参考解析：本题考出包装类的运算，代码中Integer i的初始值为null，所以在构造方法中进行加法运算时会抛出空指针异常，因此运行过程编译是成功的，但运行时会产生错误。故D选项正确。</p>
<h4 id="单选题-6"><a href="#单选题-6" class="headerlink" title="单选题"></a>单选题</h4><p>下列关于Integer类中常用方法的描述中，错误的是（）（选择一项）</p>
<p>A.  byteValue( )以byte类型返回该Integer的值</p>
<p>B.  应用构造方法可以实现自动装箱操作</p>
<p>C.  intValue( )以int型返回Integer的值</p>
<p>D.  shortValue( )以short型返回Integer的值</p>
<p>正确答案： B</p>
<p>参考解析：本题考查的是Integer类的常用方法的功能描述，应用构造方法实现的是手动装箱操作，所以B选项的描述是错误的。</p>
<h3 id="需要知道的几点知识（中）"><a href="#需要知道的几点知识（中）" class="headerlink" title="需要知道的几点知识（中）"></a>需要知道的几点知识（中）</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> wrap;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapperTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Integer one=<span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">        Integer two=<span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">        System.out.println(&amp;quot;one==two的结果：&amp;quot;+(one==two));</span><br><span class="line">        <span class="comment">//第一行</span></span><br><span class="line">        Integer three=<span class="number">100</span>;</span><br><span class="line">        <span class="comment">//自动装箱</span></span><br><span class="line">        System.out.println(&amp;quot;three==<span class="number">100</span>的结果：&amp;quot;+(three==<span class="number">100</span>));</span><br><span class="line">        <span class="comment">//第二行    自动拆箱。</span></span><br><span class="line">        <span class="comment">//Integer four=100;</span></span><br><span class="line">        Integer four=Integer.valueOf(<span class="number">100</span>);</span><br><span class="line">        System.out.println(&amp;quot;three==four的结果：&amp;quot;+(three==four));</span><br><span class="line">        <span class="comment">//第三行</span></span><br><span class="line">        Integer five=<span class="number">200</span>;</span><br><span class="line">        System.out.println(&amp;quot;five==<span class="number">200</span>的结果：&amp;quot;+(five==<span class="number">200</span>));</span><br><span class="line">        <span class="comment">//第四行。</span></span><br><span class="line">        Integer six=<span class="number">200</span>; </span><br><span class="line">        System.out.println(&amp;quot;five==six的结果：&amp;quot;+(five==six));</span><br><span class="line">        <span class="comment">//第五行。</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="需要知道的几点知识（下）"><a href="#需要知道的几点知识（下）" class="headerlink" title="需要知道的几点知识（下）"></a>需要知道的几点知识（下）</h3><pre><code>   ![02f47bd00902838edfebbe4b940f8a95.png](en-resource://database/3489:1)
   在Java当中八种数据类型的包装类里面，除了float和double，其他的都可以应用对象常量池概念。package wrap;public class WrapperTest {       public static void main(String[] args) {             Double d1=Double.valueOf(100);             System.out.println(&amp;quot;d1==100的结果：&amp;quot;+(d1==100));                          Double d2=Double.valueOf(100);             System.out.println(&amp;quot;d1==d2的结果：&amp;quot;+(d1==d2));       }}![bb4d469101fd87fc0ce1d695cf9569e7.png](en-resource://database/3491:1)
   详细过程有待完善
</code></pre>
<h4 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h4><p>单选题下面代码运行的正确结果是（）（选择一项）</p>
<p><img src="en-resource://database/3493:1" alt="71a8d200ed6fd893f1950afb0f525bfd.png"></p>
<p>A.    hello        </p>
<p>B.    baby</p>
<p>C.    编译错误，无法正常运行</p>
<p>D.    以上说法都不对</p>
<p>正确答案： A</p>
<p>参考解析：本题考查包装类的使用，可以对Integer对象进行运算，相当于其对应的基本数据类型进行运算，因此运行结果为：hello。故A选项正确。</p>
<h4 id="2-19-编程练习"><a href="#2-19-编程练习" class="headerlink" title="2-19 编程练习"></a>2-19 编程练习</h4><p>   请按照编辑器中的注释，在对应的空白区域填写对应的代码，完成基本数据类型和字符串之间的转换。程序运行参考效果图如下：</p>
<p>原题</p>
<p>HelloWorld.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//定义float类型变量，赋值为88.99</span></span><br><span class="line">        <span class="keyword">float</span> f1 = ;</span><br><span class="line">        <span class="comment">//将基本类型转换为字符串</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//打印输出</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义String类型变量，赋值为&amp;quot;188.55&amp;quot;</span></span><br><span class="line">        String str = ;</span><br><span class="line">        <span class="comment">// 将字符串转换为基本类型double</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//打印输出</span></span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>作答</p>
<p>HelloWorld.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//定义float类型变量，赋值为88.99</span></span><br><span class="line">        <span class="keyword">float</span> f1 = <span class="number">88.99f</span>;</span><br><span class="line">        <span class="comment">//将基本类型转换为字符串</span></span><br><span class="line">        String str1=Float.toString(f1)+<span class="number">20</span>;</span><br><span class="line">        <span class="comment">//打印输出</span></span><br><span class="line">        System.out.println(<span class="string">"f1转换为String型后与整数20求和的结果为："</span>+str1);</span><br><span class="line">        <span class="comment">//定义String类型变量，赋值为&amp;quot;188.55&amp;quot;</span></span><br><span class="line">        String str = <span class="string">"188.55"</span>;</span><br><span class="line">        <span class="comment">// 将字符串转换为基本类型double</span></span><br><span class="line">        <span class="keyword">double</span> d1=Double.valueOf(str);</span><br><span class="line">        <span class="comment">//打印输出</span></span><br><span class="line">        System.out.println(<span class="string">"str转换为double型后与整数20求和的结果为："</span>+d1+<span class="number">20</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java基础通识1.3.3 字符串</title>
    <url>/posts/4120623261/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>一、Java的编译基础</li>
<li>二、Java程序实际执行细节</li>
<li>三、使用eclipse开发Java程序</li>
</ul>
<a id="more"></a>

<h3 id="第1章-概述"><a href="#第1章-概述" class="headerlink" title="第1章 概述"></a>第1章 概述</h3><h4 id="1-1-字符串概述"><a href="#1-1-字符串概述" class="headerlink" title="1-1 字符串概述"></a>1-1 字符串概述</h4><p><strong>主要内容</strong></p>
<ul>
<li>如何创建String对象</li>
<li>String对象的常用方法</li>
<li>==和equals方法的区别</li>
<li>String的不可变性<h3 id="第2章-String类"><a href="#第2章-String类" class="headerlink" title="第2章 String类"></a>第2章 String类</h3><h4 id="2-1-String常用方法简介"><a href="#2-1-String常用方法简介" class="headerlink" title="2-1 String常用方法简介"></a>2-1 String常用方法简介</h4></li>
</ul>
<p><strong>创建String对象的方法</strong></p>
<p><img src="en-resource://database/3497:1" alt="456f98211e8afb1a21eb2b6d6c382b09.png"></p>
<p><img src="en-resource://database/3499:1" alt="bfb59d0cb9f2eb716dc6f112f7af0524.png"></p>
<h4 id="2-2-String常用方法（上）"><a href="#2-2-String常用方法（上）" class="headerlink" title="2-2 String常用方法（上）"></a>2-2 String常用方法（上）</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.string;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo1</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             <span class="comment">// 定义一个字符串"JAVA 编程 基础"</span></span><br><span class="line">             String str=<span class="string">"JAVA 编程 基础"</span>;</span><br><span class="line">             <span class="comment">//打印输出字符串的长度。</span></span><br><span class="line">             System.out.println(<span class="string">"字符串的长度是："</span>+str.length());</span><br><span class="line">             <span class="comment">//取出字符"程"并输出。</span></span><br><span class="line">             System.out.println(str.charAt(<span class="number">6</span>));</span><br><span class="line">             <span class="comment">//取出字符"编程 基础"并输出。</span></span><br><span class="line">             System.out.println(str.substring(<span class="number">5</span>));</span><br><span class="line">             <span class="comment">//取出字符"编程"并输出。</span></span><br><span class="line">             System.out.println(str.substring(<span class="number">5</span>,<span class="number">7</span>));<span class="comment">//第二个index值不是对应的值，而需要在对应值的基础上+1。</span></span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="2-3-选择题"><a href="#2-3-选择题" class="headerlink" title="2-3 选择题"></a>2-3 选择题</h4><p>单选题<br>给出如下语句，以下哪个结果是正确的（选择一项）<br><img src="en-resource://database/3501:1" alt="b84c1f37bf1e32fa68b2167eb5a481eb.png"></p>
<p>A.  编译错误        B.  输出字符o       C.  输出字符l       D.  发生运行时异常</p>
<p>正确答案： D</p>
<p><strong>参考解析：</strong><br>本题考查String的charAt()方法的使用，charAt方法的参数最大值是字符串str的长度-1，超过长度范围会发生运行时异常。故D选项正确。</p>
<h4 id="2-4-选择题"><a href="#2-4-选择题" class="headerlink" title="2-4 选择题"></a>2-4 选择题</h4><p>单选题<br>给出如下语句：以下哪个结果是正确的（选择一项）</p>
<p>A.  输出字符c       B.  输出字符d<br>C.  输出字符e       D.  输出字符f</p>
<p>正确答案： C</p>
<p><strong>参考解析：</strong><br>本题考查substring()和charAt()方法的使用，str.substring(3,6)取出子串”def”，再调用charAt(1)，取出子串”def”中index值为1的字符，即第二个字符e。故C选项正确。</p>
<h4 id="2-5-String常用方法（下）"><a href="#2-5-String常用方法（下）" class="headerlink" title="2-5 String常用方法（下）"></a>2-5 String常用方法（下）</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.string;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo2</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             <span class="comment">// 定义一个字符串"JAVA编程基础,我喜欢java编程"</span></span><br><span class="line">             String str=<span class="keyword">new</span> String(<span class="string">"JAVA编程基础,我喜欢java编程"</span>);</span><br><span class="line">             <span class="comment">//查找字符"A"在字符串中第一次出现的位置。</span></span><br><span class="line">             System.out.println(<span class="string">"字符'A'在字符串中第一次出现的位置"</span>+str.indexOf(<span class="string">'A'</span>));</span><br><span class="line">             <span class="comment">//查找子串"编程"在字符串中第一次出现的位置。</span></span><br><span class="line">             System.out.println(<span class="string">"子串\"编程\"在字符串中第一次出现的位置"</span>+str.indexOf(<span class="string">"编程"</span>));<span class="comment">//在字符串中再次出现双引号需要用用转译字符。</span></span><br><span class="line">             <span class="comment">//查找子串"编程"在字符串中最后一次出现的位置。</span></span><br><span class="line">             System.out.println(<span class="string">"字符'A'在字符串中最后一次出现的位置"</span>+str.lastIndexOf(<span class="string">'A'</span>));</span><br><span class="line">             <span class="comment">//查找子串"编程"在字符串中最后一次出现的位置。</span></span><br><span class="line">             System.out.println(<span class="string">"子串\"编程\"在字符串中最后一次出现的位置"</span>+str.lastIndexOf(<span class="string">"编程"</span>));  </span><br><span class="line">             <span class="comment">//在字符串index值为8的位置开始，查找子串"编程"在字符串中第一次出现的位置。</span></span><br><span class="line">             System.out.println(<span class="string">"在字符串index值为8的位置开始，查找子串\"编程\"在字符串中第一次出现的位置"</span>+str.indexOf(<span class="string">"编程"</span>,<span class="number">8</span>));</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="2-6-编程练习"><a href="#2-6-编程练习" class="headerlink" title="2-6 编程练习"></a>2-6 编程练习</h4><p>使用String类常用方法完成字符串处理。<br><strong>任务</strong></p>
<p>1、 定义一个字符串”abcdefg”<br>2、 取出子串cde并转换为大写<br>3、 将DE替换为MM<br>4、 最后得到结果CMM</p>
<p><strong>原题</strong><br>StringDemo.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">/*已知字符串"abcdefg"，使之经过处理得到字符串"CDE",并进一步</span></span><br><span class="line"><span class="comment">        将“DE”替换为“MM”，得到结果：CMM */</span></span><br><span class="line">        </span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<p><strong>作答</strong><br>StringDemo.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//1、定义一个字符串。</span></span><br><span class="line">        String str=<span class="string">"abcdefg"</span>;</span><br><span class="line">        <span class="comment">//2、取出子串cde，substring（字符串开始位置，结束位置）。</span></span><br><span class="line">        str=str.substring(<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//将cde转换成大写的，使用toUpperCase();</span></span><br><span class="line">        str=str.toUpperCase();</span><br><span class="line">        <span class="comment">//将“DE”替换为“MM”，得到结果：CMM</span></span><br><span class="line">        System.out.println(str.replace(<span class="string">"DE"</span>,<span class="string">"MM"</span>));</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="2-7-选择题"><a href="#2-7-选择题" class="headerlink" title="2-7 选择题"></a>2-7 选择题</h4><p>单选题<br>给出如下语句：  以下哪个输出结果是正确的？（选择一项）</p>
<p><img src="en-resource://database/3503:1" alt="14f155c7640f9cc45a37d506783f4a87.png"></p>
<p>Anull<br>B编译错误<br>C没有任何输出结果<br>D发生运行时异常</p>
<p>正确答案： A</p>
<p><strong>参考解析：</strong><br>本题考查字符串引用赋值为null时的输出问题，null值将被直接输出，故A选项正确。</p>
<h4 id="2-8-选择题"><a href="#2-8-选择题" class="headerlink" title="2-8 选择题"></a>2-8 选择题</h4><p>单选题<br>关于字符串的equals()和compareTo()方法，选项中描述错误的是（选择一项）</p>
<p>A.  方法equels()比较两个字符串内容是否相等<br>B.  方法compareTo()比较两个字符串大小<br>C.  方法equels()返回值是boolean类型的值<br>D.  方法compareTo()返回值是String类型的值</p>
<p>正确答案： D</p>
<p><strong>参考解析：</strong><br>本题考查的是字符串方法equals()和compareTo()的区别，方法equels（）比较两个字符串内容是否相等，返回值是boolean类型的值；方法compareTo（）比较两个字符串大小，返回值是int的值。D选项的描述是错误的，故选D。</p>
<h4 id="2-9-例：字符串与byte数组间的相互转换"><a href="#2-9-例：字符串与byte数组间的相互转换" class="headerlink" title="2-9 例：字符串与byte数组间的相互转换"></a>2-9 例：字符串与byte数组间的相互转换</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo3</span> </span>{</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>{</span><br><span class="line"></span><br><span class="line">             <span class="comment">// 字符串和byte数组之间的相互转换。</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">//定义一个字符串。</span></span><br><span class="line"></span><br><span class="line">             String str=<span class="keyword">new</span> String(<span class="string">"JAVA 编程 基础"</span>);</span><br><span class="line"></span><br><span class="line">             <span class="comment">//将字符串转换成byte数组，并打印输出。</span></span><br><span class="line"></span><br><span class="line">             <span class="keyword">byte</span>[] arrs=str.getBytes(<span class="string">"GBK"</span>);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arrs.length;i++) {</span><br><span class="line"></span><br><span class="line">                    System.out.println(arrs[i]+<span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">             }</span><br><span class="line"></span><br><span class="line">             </span><br><span class="line">             System.out.println();</span><br><span class="line"></span><br><span class="line">             <span class="comment">//将byte数组转换为字符串。</span></span><br><span class="line"></span><br><span class="line">             String  str1=<span class="keyword">new</span> String(arrs,<span class="string">"GBK"</span>);</span><br><span class="line"></span><br><span class="line">             System.out.println(str1);</span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><img src="en-resource://database/3505:1" alt="458d0bc2cc1d668223df576d8d4fe137.png"></p>
<p><strong>小结</strong></p>
<ul>
<li>字符串和byte数组间的相互转换。</li>
<li>编码问题：GBK编码和UTF-8编码。</li>
</ul>
<p>可以更完善。</p>
<h4 id="2-10-选择题"><a href="#2-10-选择题" class="headerlink" title="2-10 选择题"></a>2-10 选择题</h4><p>单选题<br>已知字符串的定义如下：以下哪个语句不能将字符串转换成byte数组？（选择一项）<br>String str=”Hello,Imooc!”;</p>
<p>A.  byte[] arr=str.getBytes();<br>B.  byte[] arr=str.getBytes(“GBK”);<br>C.  byte[] arr=str.getBytes(“UTF-8”);<br>D.<br>byte[] arr;<br>str.getBytes(arr,”GBK”);</p>
<p>正确答案： D</p>
<p><strong>参考解析：</strong><br>本题考查getBytes()方法的使用，byte[] arr; str.getBytes(arr,“GBK”);中的getBytes方法时错误的，没有arr作为参数的方法。故D选项正确。</p>
<h4 id="2-11-等于运算符与equals方法的区别"><a href="#2-11-等于运算符与equals方法的区别" class="headerlink" title="2-11 等于运算符与equals方法的区别"></a>2-11 等于运算符与equals方法的区别</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo5</span> </span>{</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">             <span class="comment">// ==和equals方法的区别。</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">//定义三个字符串，内容都是&lt;u&gt;imooc&lt;/u&gt;。</span></span><br><span class="line"></span><br><span class="line">             String str1=<span class="string">"imooc"</span>;</span><br><span class="line"></span><br><span class="line">             String str2=<span class="string">"imooc"</span>;</span><br><span class="line"></span><br><span class="line">             String str3=<span class="keyword">new</span> String(<span class="string">"inooc"</span>);</span><br><span class="line"></span><br><span class="line">             System.out.println(<span class="string">"str1和str2的内容相同"</span>+(str1.equals(str2)));</span><br><span class="line"></span><br><span class="line">             System.out.println(<span class="string">"str1和str2的内容相同"</span>+(str1.equals(str3)));</span><br><span class="line"></span><br><span class="line">             </span><br><span class="line"></span><br><span class="line">             System.out.println(<span class="string">"str1和str2的地址相同"</span>+(str1==str2));</span><br><span class="line"></span><br><span class="line">             System.out.println(<span class="string">"str1和str2的地址相同"</span>+(str1==str3));</span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p><img src="en-resource://database/3507:1" alt="5d72aa685cf2fbd9ef80e42f1f430967.png"></p>
<h4 id="2-12-选择题"><a href="#2-12-选择题" class="headerlink" title="2-12 选择题"></a>2-12 选择题</h4><p>单选题<br>给出如下语句：下面哪个选项返回值为true？（选择一项）</p>
<p><img src="en-resource://database/3509:1" alt="294f97acb8a69ced504e4d4664ec460a.png"></p>
<p>A.  s1.equals(s2);<br>B.  s1.equals(c);<br>C.  s1.equals(new String());<br>D.  s1==c;</p>
<p>正确答案： A</p>
<p><strong>参考解析：</strong><br>本题考查字符串的equals()方法的使用。A选项正确，s1和s2的值是相等的。B选项，s1.equals(c);，字符串和字符数组的存储方式不一样，因此调用equals方法二者不相等，返回false。C选项，s1.equals(new String());，new String()定义的是空串，与”imooc”不相等，返回值为false。D选项，s1==c;，s1和c是不同的对象，因此不相等，返回值为false。</p>
<h4 id="2-13-选择题"><a href="#2-13-选择题" class="headerlink" title="2-13 选择题"></a>2-13 选择题</h4><p><strong>单选题</strong><br>下列运行结果是false的是（）（选择一项）</p>
<p><img src="en-resource://database/3511:1" alt="87823168515780542eb1509a4b309a23.png"></p>
<p>A.  System.out.println(str1.equals(str2));<br>B.  System.out.println(str1.equals(str3));<br>C.  System.out.println(str1==str2);<br>D.  System.out.println(str1==str3);</p>
<p>正确答案： D</p>
<p><strong>参考解析：</strong><br>本题考查的是==和equals方法的区别；str1和str2以及str3的内容是相同的，str1和str2的地址是相同的，因为他们指向的是同一个字符串常量。str1和str3的地址是不相同的，因此str1==str3的运行结果是false，故D选项正确。</p>
<h4 id="2-14-字符串的不可变性"><a href="#2-14-字符串的不可变性" class="headerlink" title="2-14 字符串的不可变性"></a>2-14 字符串的不可变性</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo6</span> </span>{</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">             <span class="comment">// String的不可变性。</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">// String对象一旦被创建，则不能修改，是不可变得。</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">//所谓的修改其实是创建了新的对象，所指向的内存空间不变。</span></span><br><span class="line"></span><br><span class="line">             String s1=<span class="string">"imooc"</span>;</span><br><span class="line"></span><br><span class="line">             String s2=<span class="string">"hello,"</span>+s1;</span><br><span class="line"></span><br><span class="line">             </span><br><span class="line"></span><br><span class="line">             <span class="comment">//s1不再指向&lt;u&gt;imooc&lt;/u&gt;所在的内存空间，而是指向了"hello,&lt;u&gt;imooc&lt;/u&gt;"。</span></span><br><span class="line"></span><br><span class="line">             System.out.println(<span class="string">"s1="</span>+s1);</span><br><span class="line"></span><br><span class="line">             System.out.println(<span class="string">"s2="</span>+s2);</span><br><span class="line"></span><br><span class="line">             </span><br><span class="line"></span><br><span class="line">             String s3=<span class="keyword">new</span> String(<span class="string">"hello,imooc!"</span>);</span><br><span class="line"></span><br><span class="line">             System.out.println(<span class="string">"子串："</span>+s3.substring(<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">             System.out.println(<span class="string">"s3="</span>+s3);</span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="2-15-选择题"><a href="#2-15-选择题" class="headerlink" title="2-15 选择题"></a>2-15 选择题</h4><p>多选题<br>已知如下代码：  以下哪个说法是正确的？（选择两项）</p>
<p><img src="en-resource://database/3513:1" alt="04d32db1bbbb5bf9042aee4a226cafc7.png"></p>
<p>A.  str1.equals(str2)的结果为true</p>
<p>B.<br>输出结果为：<br>HelloHello<br>HelloHello</p>
<p>C.  str1==str2的结果为true</p>
<p>D.<br>输出结果为：<br>HelloHello<br>Hello</p>
<p>正确答案： A,D</p>
<p><strong>参考解析：</strong><br>本题考查字符串的不可变性，<br>A选项正确，str1和str2的内容是相等的，因此str1.equals(str2)的结果为true<br>B选项错误，str1.concat(str2)是把str1和str2的内容连接起来，然后把连接后的值输出，但是连接操作并没有改变str1和str2的值，一次str1的值还是Hello，也因此D选项正确<br>C选项错误，str1和str2不是同一个对象，因此str1==str2的结果为false</p>
<h3 id="第3章-StringBuilder类"><a href="#第3章-StringBuilder类" class="headerlink" title="第3章 StringBuilder类"></a>第3章 StringBuilder类</h3><h4 id="3-1-StringBuilder概述"><a href="#3-1-StringBuilder概述" class="headerlink" title="3-1 StringBuilder概述"></a>3-1 StringBuilder概述</h4><p><strong>String和StringBuilder的区别：</strong><br>    String具有不可变性，而StringBuilder不具备。</p>
<p><strong>建议：</strong><br>    当频繁操作字符串时，使用StringBuilder。</p>
<p><strong>StringBuilder和StringBuffer</strong></p>
<ul>
<li>二者基本相似</li>
<li>StringBuffer是线程安全的，StringBuilder则没有，所以性能略高。</li>
</ul>
<h4 id="3-2-StringBuilder常用方法"><a href="#3-2-StringBuilder常用方法" class="headerlink" title="3-2 StringBuilder常用方法"></a>3-2 StringBuilder常用方法</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilderDemo1</span> </span>{</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">// 定义一个字符串"你好"</span></span><br><span class="line">		StringBuilder str=<span class="keyword">new</span> StringBuilder(<span class="string">"你好"</span>);</span><br><span class="line">		<span class="comment">//在"你好"后面添加内容，将字符串变成"你好,imooc!"。</span></span><br><span class="line"><span class="comment">//		str.append(',');</span></span><br><span class="line"><span class="comment">//		str.append("imooc!");</span></span><br><span class="line"><span class="comment">//		System.out.println("str="+str);</span></span><br><span class="line">		System.out.println(<span class="string">"str="</span>+str.append(<span class="string">','</span>).append(<span class="string">"imooc!"</span>));</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//将字符串变成“你好，iMOOC!”。</span></span><br><span class="line">		<span class="comment">//两种方式：</span></span><br><span class="line">		<span class="comment">//1、使用delete方法删除mooc，然后在插入MOOC</span></span><br><span class="line">		System.out.println(<span class="string">"替换后："</span>+str.delete(<span class="number">4</span>,<span class="number">8</span>).insert(<span class="number">4</span>,<span class="string">"MOOC"</span>));</span><br><span class="line">		<span class="comment">//2、使用replace方法直接替换。</span></span><br><span class="line">		System.out.println(<span class="string">"替换后："</span>+str.replace(<span class="number">4</span>,<span class="number">8</span>,<span class="string">"MOOC"</span>));</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//在字符串"你好,iMOOC"中取出"你好"并输出。</span></span><br><span class="line">		System.out.println(str.substring(<span class="number">0</span>,<span class="number">2</span>));</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>小结</strong></p>
<ul>
<li>StringBuilder append(String str)</li>
<li>StringBuilder delete(int start, int end)</li>
<li>StringBuilder insert(int offset, String str)</li>
<li>StringBuilder replace(int start, int end, String str)</li>
</ul>
<h4 id="3-3-选择题"><a href="#3-3-选择题" class="headerlink" title="3-3 选择题"></a>3-3 选择题</h4><p>单选题<br>给出如下语句:</p>
<p>上述代码的输出结果是什么?（选择一项）</p>
<p><img src="en-resource://database/3515:1" alt="4fa9ccc451bf41bb8ff9227d5e4e76e7.png"></p>
<p>A.  abeCDfg         B.  abCDefg<br>C.  abcCDefg        D.  abefCDg</p>
<p>正确答案： A</p>
<p><strong>参考解析：</strong><br>本题考查StringBuilder的常用方法，调用delete方法时，删除掉cd两个字符，字符串变为abefg，然后在第三个字符的后面插入CD两个字符，即为abeCDfg，故A选项正确。</p>
<h4 id="3-4-编程练习"><a href="#3-4-编程练习" class="headerlink" title="3-4 编程练习"></a>3-4 编程练习</h4><p>定义一个字符串，利用StringBuilder完成如下效果。<br>效果图:</p>
<p><img src="en-resource://database/3517:1" alt="cfd94b8d8fc54538d0df381dad55d5b0.png"></p>
<p>任务</p>
<ol>
<li><pre><code> 定义一个字符串”欢迎来到“
</code></pre>
</li>
<li><pre><code> 在"欢迎来到"后面添加内容，将字符串变成"欢迎来到imooc"
</code></pre>
</li>
<li><pre><code> 使用delete方法删除"欢迎来到",然后插入“你好！”
</code></pre>
</li>
<li><pre><code> 将字符串变成“你好，imooc”
</code></pre>
</li>
<li><pre><code> 使用replace方法替换
</code></pre>
</li>
</ol>
<p><strong>原题</strong></p>
<p>StringTest.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">//定义一个字符串"欢迎来到"</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//在"欢迎来到"后面添加内容，将字符串变成"欢迎来到imooc"</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//使用delete方法删除"欢迎来到",然后插入“你好！”</span></span><br><span class="line">        </span><br><span class="line">		<span class="comment">//将字符串变成“你好，imooc”</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//使用replace方法替换</span></span><br><span class="line">		</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p><strong>作答</strong></p>
<p>StringTest.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//定义一个字符串"欢迎来到"</span></span><br><span class="line">        StringBuilder str = <span class="keyword">new</span> StringBuilder(<span class="string">"欢迎来到"</span>);</span><br><span class="line">        <span class="comment">//在"欢迎来到"后面添加内容，将字符串变成"欢迎来到imooc"</span></span><br><span class="line">        System.out.println(str.append(<span class="string">"imooc"</span>));</span><br><span class="line">        <span class="comment">//使用delete方法删除"欢迎来到",然后插入“你好！”</span></span><br><span class="line">        str.delete(<span class="number">0</span>,<span class="number">4</span>).insert(<span class="number">0</span>,<span class="string">"你好！"</span>);</span><br><span class="line">        <span class="comment">//将字符串变成“你好，imooc”</span></span><br><span class="line">        System.out.println(<span class="string">"删除插入后 "</span> + str.insert(<span class="number">2</span>,<span class="string">","</span>));</span><br><span class="line">        <span class="comment">//使用replace方法替换</span></span><br><span class="line">        System.out.println(<span class="string">"替换后："</span> + str.replace(<span class="number">0</span>,<span class="number">3</span>,<span class="string">"欢迎来到"</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>代码精炼性有待考究。</p>
<h4 id="3-5-选择题"><a href="#3-5-选择题" class="headerlink" title="3-5 选择题"></a>3-5 选择题</h4><p>单选题<br>给出如下语句:下面哪个代码块, 插入到第3行，可以得到输出结果 “123abc 123abc”?（选择一项）</p>
<p><img src="en-resource://database/3519:1" alt="ac9caa823e270aeecd77310d8342ecc9.png"></p>
<p>A.<br>sb1.append(“abc”);<br>s1.append(“abc”);</p>
<p>B.<br>sb1.append(“abc”);<br>s1.concat(“abc”);</p>
<p>C.<br>sb1.concat(“abc”);<br>s1.append(“abc”);</p>
<p>D.<br>sb1.concat(“abc”);<br>s1.concat(“abc”);</p>
<p>E.<br>sb1.append(“abc”);<br>s1 = s1.concat(“abc”);</p>
<p>F.<br>sb1.append(“abc”);<br>s1 = s1 + s1.concat(“abc”);</p>
<p>正确答案： E</p>
<p><strong>参考解析：</strong><br>本题考查StringBuilder常用方法的使用，<br>E选项正确，执行sb1.append(“abc”);,sb1变为123abc。执行 s1 = s1.concat(“abc”);，s1变为123abc。String类型没有append方法，故A、C选项错误。<br>D选项中：sb1.concat(“abc”);  ：sb1是StringBuilder对象，StringBuilder对象没有concat方法,故D选择错误，<br>B选项中：s1.concat(“abc”);：s1调用concat()方法后，没有把新生成的字符串赋值回s1，只是生成了一个新的字符串而已，所以，s1的值并不会发生变化。故B选项错误。<br>F选项，s1 = s1 + s1.concat(“abc”);执行完s1.concat(“abc”)后的值为”123abc”，再和前面的s1进行字符串连接，变成123123abc，因此最后s1的值就为123123abc，故F选项也是错误的。</p>
<h3 id="第4章-课程总结"><a href="#第4章-课程总结" class="headerlink" title="第4章 课程总结"></a>第4章 课程总结</h3><h4 id="4-1-课程总结"><a href="#4-1-课程总结" class="headerlink" title="4-1 课程总结"></a>4-1 课程总结</h4><ul>
<li>String和StringBuilder</li>
<li>介绍了这两个类的常用方法。</li>
<li>在String中介绍了==和equals()方法的区别</li>
<li>介绍了String和StringBuilder的区别，主要是不可变性</li>
<li>通过学习，进一步掌握java文档的使用。</li>
</ul>
<h4 id="4-2-选择题"><a href="#4-2-选择题" class="headerlink" title="4-2 选择题"></a>4-2 选择题</h4><p>单选题<br>给出如下语句：</p>
<p>以下哪个结果是正确的？（选择一项）</p>
<p><img src="en-resource://database/3521:1" alt="322439fe7b5340942567e6e15dab507c.png"></p>
<p>A.  true true<br>B.  false true<br>C.  true false<br>D.  false false<br>E.  Compilation fails.<br>F.  An exception is thrown at runtime.</p>
<p>正确答案： B</p>
<p><strong>参考解析：</strong></p>
<p> 本题考查StringBuilder的常用方法，B选项正确。<br>执行Integer x=400;这段代码会创建一个Integer对象，x的引用指向它；执行Integer y = x;这段代码，y的引用和x的引用指向了同一片内存空间。这时，x和y指向同一个对象。之后，执行x++，将会创建一个新的Integer对象401，然后x的引用指向新创建的对象。这时x和y不再指向同一个对象。执行x==y得到结果为false；<br>执行StringBuilder sb1 = new StringBuilder(“123”);这段代码时，在堆中生成一个StringBulider对 象，内容为：123，这时有一个sb1的引用指向”123”这个内容。执行StringBuilder sb2 = sb1;这段代 码，sb2的引用同样指向”123”这个内容。在执行sb1.append(“5”);时，会在内存中”123”这个位置变成 了”1235”，这时没有在内存当中生成新的对象，也没有新的字符串常量，而是在原来的基础上进行了修 改。sb1和sb2指向的是同一个对象，所以执行sb1==sb2得到结果为true。 </p>
<h4 id="4-3-编程练习"><a href="#4-3-编程练习" class="headerlink" title="4-3 编程练习"></a>4-3 编程练习</h4><p>定义一个字符串，使用StringBuilder的常用方法对字符串进行操作。</p>
<p>任务</p>
<p>1、 定义字符串”abc”<br>2、 使之经过处理得到字符串”fed—cba”,并进一步得到字符串”fedcba”</p>
<p><strong>原题</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">//定义字符串"abc"</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//经过处理得到字符串"fed---cba"</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//进一步变换得到字符串"fedcba"</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">//定义字符串"abc"</span></span><br><span class="line">        StringBuilder str=<span class="keyword">new</span> StringBuilder(<span class="string">"abc"</span>);</span><br><span class="line">        <span class="comment">//经过处理得到字符串"fed---cba"</span></span><br><span class="line">        System.out.println(str.reverse().insert(<span class="number">0</span>, <span class="string">"fed---"</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//进一步变换得到字符串"fedcba"</span></span><br><span class="line">        System.out.println(str.delete(<span class="number">3</span>, <span class="number">6</span>));</span><br><span class="line">        </span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java基础通识1.3.5 集合排序</title>
    <url>/posts/3636024360/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>一、Java的编译基础</li>
<li>二、Java程序实际执行细节</li>
<li>三、使用eclipse开发Java程序</li>
</ul>
<a id="more"></a>

<h3 id="第1章-概述"><a href="#第1章-概述" class="headerlink" title="第1章 概述"></a>第1章 概述</h3><h4 id="1-1-集合排序概述-（03-49）"><a href="#1-1-集合排序概述-（03-49）" class="headerlink" title="1-1 集合排序概述 （03:49）"></a>1-1 集合排序概述 （03:49）</h4><p><strong>主要内容</strong></p>
<ul>
<li>集合中的基本数据类型排序。</li>
<li>集合中的字符串。</li>
<li>Comparator接口。</li>
<li>Comparable接口。</li>
</ul>
<p><strong>数组的排序</strong></p>
<p><img src="en-resource://database/3551:1" alt="ad9fdca7a5fac72fc506a8bb874ac183.png"></p>
<p><strong>集合排序</strong></p>
<ul>
<li>使用Collection类的sort()方法。</li>
<li>sort（List<t> list）<ul>
<li>根据元素的自然顺序对指定列表按升序惊吓排序。</li>
</ul>
</t></li>
</ul>
<h3 id="第2章-对基本数据类型和字符串类型进行排序"><a href="#第2章-对基本数据类型和字符串类型进行排序" class="headerlink" title="第2章 对基本数据类型和字符串类型进行排序"></a>第2章 对基本数据类型和字符串类型进行排序</h3><h4 id="2-1-案例：对整型进行排序（06-16）"><a href="#2-1-案例：对整型进行排序（06-16）" class="headerlink" title="2-1 案例：对整型进行排序（06:16）"></a>2-1 案例：对整型进行排序（06:16）</h4><p><strong>例题</strong></p>
<ul>
<li>例1：对存放在List中的整型数据进行排序。</li>
<li>例2：对存放在List中的字符串进行排序。</li>
</ul>
<p><strong>例1</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.sort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">intSort</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">             <span class="comment">// 对存放在List中的整型数据进行排序。</span></span><br><span class="line"></span><br><span class="line">             List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">             list.add(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">             list.add(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">             list.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">             list.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">             System.out.println(<span class="string">"排序前："</span>);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> n:list) {</span><br><span class="line"></span><br><span class="line">                    System.out.print(n+<span class="string">"  "</span>);</span><br><span class="line"></span><br><span class="line">             }</span><br><span class="line"></span><br><span class="line">             System.out.println();</span><br><span class="line"></span><br><span class="line">             <span class="comment">//对List中的数据进行排序。</span></span><br><span class="line"></span><br><span class="line">             Collections.sort(list);</span><br><span class="line"></span><br><span class="line">             System.out.println(<span class="string">"排序后："</span>);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> n:list) {</span><br><span class="line"></span><br><span class="line">                    System.out.print(n+<span class="string">"  "</span>);</span><br><span class="line"></span><br><span class="line">             }</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="2-2-选择练习"><a href="#2-2-选择练习" class="headerlink" title="2-2 选择练习"></a>2-2 选择练习</h4><p>多选题<br>在下面代码中的(1)(2)处可以填写（）（选择两项）<br><img src="en-resource://database/3553:1" alt="fc2ba4aec6bdebe45ec5cd83f1d85b50.png"></p>
<p>A.  int int<br>B.  Integer  Integer<br>C.  String  String<br>D.  string  string</p>
<p>正确答案： B,C</p>
<p><strong>参考解析：</strong><br>本题考查使用ArrayList创建对象时使用泛型类型参数，(1)(2)处是不可以使用基本数据类型的，因此不能使用int。string不是字符串类型，字符串类型的应该是String。故B、C选项正确。</p>
<h4 id="2-3-案例：对字符串进行排序-（03-39）"><a href="#2-3-案例：对字符串进行排序-（03-39）" class="headerlink" title="2-3 案例：对字符串进行排序 （03:39）"></a>2-3 案例：对字符串进行排序 （03:39）</h4><p><strong>例2</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.sort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringSort</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">             <span class="comment">// 对存放在List中的字符串进行排序。</span></span><br><span class="line"></span><br><span class="line">             List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">             list.add(<span class="string">"orange"</span>);</span><br><span class="line"></span><br><span class="line">             list.add(<span class="string">"blue"</span>);</span><br><span class="line"></span><br><span class="line">             list.add(<span class="string">"yellow"</span>);</span><br><span class="line"></span><br><span class="line">             list.add(<span class="string">"gray"</span>);</span><br><span class="line"></span><br><span class="line">             System.out.println(<span class="string">"排序前："</span>);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">for</span>(String s:list) {</span><br><span class="line"></span><br><span class="line">                    System.out.print(s+<span class="string">"  "</span>);</span><br><span class="line"></span><br><span class="line">             }</span><br><span class="line"></span><br><span class="line">             System.out.println();</span><br><span class="line"></span><br><span class="line">             Collections.sort(list);</span><br><span class="line"></span><br><span class="line">             System.out.println(<span class="string">"排序后："</span>);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">for</span>(String s:list) {</span><br><span class="line"></span><br><span class="line">                    System.out.print(s+<span class="string">"  "</span>);</span><br><span class="line"></span><br><span class="line">             }</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="2-4-编程练习"><a href="#2-4-编程练习" class="headerlink" title="2-4 编程练习"></a>2-4 编程练习</h4><p>对英文单词进行排序，效果图如下：<br><img src="en-resource://database/3555:1" alt="6fdd1e8f3a345640be7bcc011e21dc60.png"></p>
<p>任务</p>
<p>1、 给list添加元素<br>2、 输出排序前list中的内容<br>3、对list中的元素进行排序<br>4、输出排序后list中的内容</p>
<p><strong>原题</strong><br><strong>StringSort.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringSort</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//给list添加元素</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//输出排序前list中的内容</span></span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">       <span class="comment">//对list中的元素进行排序</span></span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">       <span class="comment">//输出排序后list中的内容</span></span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答</strong><br><strong>StringSort.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringSort</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">	    <span class="comment">//给list添加元素</span></span><br><span class="line">        List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        list.add(<span class="string">"orange"</span>);</span><br><span class="line">        list.add(<span class="string">"tomato"</span>);</span><br><span class="line">        list.add(<span class="string">"apple"</span>);</span><br><span class="line">        list.add(<span class="string">"litchi"</span>);</span><br><span class="line">        list.add(<span class="string">"banana"</span>);</span><br><span class="line">       <span class="comment">//输出排序前list中的内容</span></span><br><span class="line">       System.out.println(<span class="string">"排序前："</span>);</span><br><span class="line">       <span class="keyword">for</span>(String n:list){</span><br><span class="line">           System.out.print(n + <span class="string">"  "</span>);</span><br><span class="line">       }</span><br><span class="line">       System.out.println();</span><br><span class="line">        </span><br><span class="line">       <span class="comment">//对list中的元素进行排序</span></span><br><span class="line">       Collections.sort(list);</span><br><span class="line">       </span><br><span class="line"> </span><br><span class="line">       <span class="comment">//输出排序后list中的内容</span></span><br><span class="line">       System.out.println(<span class="string">"排序后："</span>);</span><br><span class="line">       <span class="keyword">for</span>(String n:list){</span><br><span class="line">           System.out.print(n + <span class="string">"  "</span>);</span><br><span class="line">       }</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="第3章-Comparator接口"><a href="#第3章-Comparator接口" class="headerlink" title="第3章 Comparator接口"></a>第3章 Comparator接口</h3><h4 id="3-1-Comparator接口介绍-（05-09）"><a href="#3-1-Comparator接口介绍-（05-09）" class="headerlink" title="3-1 Comparator接口介绍 （05:09）"></a>3-1 Comparator接口介绍 （05:09）</h4><p>疑问：宠物猫如何排序？<br>解决办法：使用Comparable或者Comparator接口。</p>
<p><strong>Comparator接口</strong></p>
<ul>
<li><p>强行对某个对象进行整体排序的比较函数。</p>
</li>
<li><p>可以将Comparator传递给sort方法（如Collections.sort或者Attays.sort）</p>
</li>
<li><p>int compate(T o1, T o2)比较用来排序的两个参数。</p>
<ul>
<li>如果o1&lt;o2，返回负整数。</li>
<li>如果o1=o2，返回0。</li>
<li>如果o1&gt;o2，返回正整数。</li>
</ul>
</li>
<li><p>boolean equals(Object obj)指示某个其他对象是否“等于”此Comparator。</p>
</li>
<li><p>此方法可以被Object类中的equals方法 覆盖，不必重写。</p>
</li>
<li><p>例题：对宠物猫分别进行按名称升序、年龄降序排列。</p>
</li>
</ul>
<h4 id="3-2-选择练习"><a href="#3-2-选择练习" class="headerlink" title="3-2 选择练习"></a>3-2 选择练习</h4><p>单选题<br>下列说法中不正确的是：（选择一项）</p>
<p>A.  Comparator接口用于对自定义类进行整体排序。<br>B.  Comparator接口可以将Comparator传递给sort方法。<br>C.  int compare（T o1，T o2）比较用来排序的两个对象。<br>D.  boolean equals（Object obj）指示对象obj是否是“等于”当前对象。此方法不可以被Object类中的equals方法覆盖。</p>
<p>正确答案： D</p>
<p><strong>参考解析：</strong><br>本题考查Comparator接口的使用。boolean equals（Object obj）指示对象obj是否是“等于”当前对象，此方法可以被Object类中的equals方法覆盖，故D选项中的说法是错误的，选D。</p>
<h4 id="3-3-案例：对宠物猫按名字进行排序-（14-28）"><a href="#3-3-案例：对宠物猫按名字进行排序-（14-28）" class="headerlink" title="3-3 案例：对宠物猫按名字进行排序 （14:28）"></a>3-3 案例：对宠物猫按名字进行排序 （14:28）</h4><p><strong>Cat.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.sort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>{</span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span> String name;<span class="comment">// 名字。</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">int</span> month;<span class="comment">// 年龄。</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span> String species;<span class="comment">// 品种。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 构造方法。</span></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name, <span class="keyword">int</span> month, String species)</span> </span>{</span><br><span class="line"></span><br><span class="line">             <span class="keyword">super</span>();</span><br><span class="line"></span><br><span class="line">             <span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">this</span>.month = month;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">this</span>.species = species;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">             <span class="keyword">return</span> name;</span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line"></span><br><span class="line">             <span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMonth</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">             <span class="keyword">return</span> month;</span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMonth</span><span class="params">(<span class="keyword">int</span> month)</span> </span>{</span><br><span class="line"></span><br><span class="line">             <span class="keyword">this</span>.month = month;</span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getSpecies</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">             <span class="keyword">return</span> species;</span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSpecies</span><span class="params">(String species)</span> </span>{</span><br><span class="line"></span><br><span class="line">             <span class="keyword">this</span>.species = species;</span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">             <span class="keyword">return</span> <span class="string">"[姓名："</span> + name + <span class="string">", 年龄："</span> + month + <span class="string">", 品种："</span> + species </span><br><span class="line">+ <span class="string">"]"</span>;</span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>NameComparator.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.sort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Cat</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Cat o1, Cat o2)</span> </span>{</span><br><span class="line"></span><br><span class="line">             <span class="comment">// 按名字升序排序。</span></span><br><span class="line"></span><br><span class="line">             String name1=o1.getName();</span><br><span class="line"></span><br><span class="line">             String name2=o2.getName();</span><br><span class="line"></span><br><span class="line">             int &lt;u&gt;n&lt;/u&gt;=name1.compareTo(name2);//正序排序。</span><br><span class="line"></span><br><span class="line">             <span class="comment">// 倒序排序。&lt;u&gt;int&lt;/u&gt; n=name2.compareTo(name1);</span></span><br><span class="line"></span><br><span class="line">             <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>CatTest.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.sort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatTest</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">             <span class="comment">// 按名字升序排序。</span></span><br><span class="line"></span><br><span class="line">             Cat huahua=<span class="keyword">new</span> Cat(<span class="string">"huahua"</span>,<span class="number">5</span>,<span class="string">"英国短毛猫"</span>);</span><br><span class="line"></span><br><span class="line">             Cat fanfan=<span class="keyword">new</span> Cat(<span class="string">"fanfan"</span>,<span class="number">2</span>,<span class="string">"中华田园猫"</span>);</span><br><span class="line"></span><br><span class="line">             Cat maomao=<span class="keyword">new</span> Cat(<span class="string">"maomao"</span>,<span class="number">3</span>,<span class="string">"中华田园猫"</span>);</span><br><span class="line"></span><br><span class="line">             List&lt;Cat&gt; catList=<span class="keyword">new</span> ArrayList&lt;Cat&gt;();</span><br><span class="line"></span><br><span class="line">             catList.add(huahua);</span><br><span class="line"></span><br><span class="line">             catList.add(fanfan);</span><br><span class="line"></span><br><span class="line">             catList.add(maomao);</span><br><span class="line"></span><br><span class="line">             <span class="comment">//按名字排序前。</span></span><br><span class="line"></span><br><span class="line">             System.out.println(<span class="string">"排序前："</span>);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">for</span>(Cat cat:catList) {</span><br><span class="line"></span><br><span class="line">                    System.out.println(cat);</span><br><span class="line"></span><br><span class="line">             }</span><br><span class="line"></span><br><span class="line">             <span class="comment">//按名字排序后。</span></span><br><span class="line"></span><br><span class="line">             Collections.sort(catList,<span class="keyword">new</span> NameComparator());</span><br><span class="line"></span><br><span class="line">             System.out.println(<span class="string">"排序后："</span>);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">for</span>(Cat cat:catList) {</span><br><span class="line"></span><br><span class="line">                    System.out.println(cat);</span><br><span class="line"></span><br><span class="line">             }</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="3-4-案例：对宠物猫按年龄降序排序-（06-12）"><a href="#3-4-案例：对宠物猫按年龄降序排序-（06-12）" class="headerlink" title="3-4 案例：对宠物猫按年龄降序排序 （06:12）"></a>3-4 案例：对宠物猫按年龄降序排序 （06:12）</h4><p><strong>AgeComparator</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgeComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Cat</span>&gt;</span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Cat o1, Cat o2)</span> </span>{</span><br><span class="line"></span><br><span class="line">             <span class="comment">// 按年龄降序排序。</span></span><br><span class="line"></span><br><span class="line">             <span class="keyword">int</span> age1=o1.getMonth();</span><br><span class="line"></span><br><span class="line">             <span class="keyword">int</span> age2=o2.getMonth();</span><br><span class="line"></span><br><span class="line">             <span class="keyword">return</span> age2-age1;</span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>CatTest</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatTest</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">             <span class="comment">// 按名字升序排序。</span></span><br><span class="line"></span><br><span class="line">             Cat huahua=<span class="keyword">new</span> Cat(<span class="string">"huahua"</span>,<span class="number">5</span>,<span class="string">"英国短毛猫"</span>);</span><br><span class="line"></span><br><span class="line">             Cat fanfan=<span class="keyword">new</span> Cat(<span class="string">"fanfan"</span>,<span class="number">2</span>,<span class="string">"中华田园猫"</span>);</span><br><span class="line"></span><br><span class="line">             Cat maomao=<span class="keyword">new</span> Cat(<span class="string">"maomao"</span>,<span class="number">3</span>,<span class="string">"中华田园猫"</span>);</span><br><span class="line"></span><br><span class="line">             List&lt;Cat&gt; catList=<span class="keyword">new</span> ArrayList&lt;Cat&gt;();</span><br><span class="line"></span><br><span class="line">             catList.add(huahua);</span><br><span class="line"></span><br><span class="line">             catList.add(fanfan);</span><br><span class="line"></span><br><span class="line">             catList.add(maomao);</span><br><span class="line"></span><br><span class="line">             <span class="comment">//按名字排序前。</span></span><br><span class="line"></span><br><span class="line">             System.out.println(<span class="string">"排序前："</span>);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">for</span>(Cat cat:catList) {</span><br><span class="line"></span><br><span class="line">                    System.out.println(cat);</span><br><span class="line"></span><br><span class="line">             }</span><br><span class="line"></span><br><span class="line">             <span class="comment">//按名字排序后。</span></span><br><span class="line"></span><br><span class="line">             Collections.sort(catList,<span class="keyword">new</span> NameComparator());</span><br><span class="line"></span><br><span class="line">             System.out.println(<span class="string">"按名字升序排序后："</span>);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">for</span>(Cat cat:catList) {</span><br><span class="line"></span><br><span class="line">                    System.out.println(cat);</span><br><span class="line"></span><br><span class="line">             }</span><br><span class="line"></span><br><span class="line">             <span class="comment">//按年龄进行降序排序。</span></span><br><span class="line"></span><br><span class="line">             Collections.sort(catList,<span class="keyword">new</span> NameComparator());</span><br><span class="line"></span><br><span class="line">             System.out.println(<span class="string">"按名字降序排序后："</span>);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">for</span>(Cat cat:catList) {</span><br><span class="line"></span><br><span class="line">                    System.out.println(cat);</span><br><span class="line"></span><br><span class="line">             }</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="3-5-编程练习"><a href="#3-5-编程练习" class="headerlink" title="3-5 编程练习"></a>3-5 编程练习</h4><p>定义一个学生信息类，包括学号，姓名，年龄三个成员变量，然后按名字进行升序排序。(使用Comparator接口)<br>运行效果图：<br><img src="en-resource://database/3557:1" alt="cefb3c7e57ecb28225399e381badf1ea.png"></p>
<p>任务</p>
<p>1、定义学生类Student，内容如下：<br>三个成员变量：学号、姓名、年龄<br>构造方法<br>getter和setter方法<br>重写toString()方法<br>2、定义测试类StudentTest，完成如下功能：<br>实现Comparator接口<br>在主方法中定义Student类的对象，并添加到列表中，进行排序，输出排序前和排序后的内容</p>
<p><strong>原题</strong><br><strong>StudentTest.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//实现Comparator接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span></span>{</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实现接口中的方法</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        <span class="comment">//定义Student类的对象</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将对象添加到List中</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//输出排序前的数据</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//输出排序后的数据</span></span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>Student.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>{</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//getter和setter方法</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//toString()方法</span></span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答</strong><br><strong>StudentTest.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//实现Comparator接口</span></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span></span>{</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实现接口中的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NewComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student</span>&gt;</span>{</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>{</span><br><span class="line">		<span class="comment">//按名字升序排列</span></span><br><span class="line">		String name1 = o1.getName();<span class="comment">//使用getname方法取出给name1</span></span><br><span class="line">		String name2 = o2.getName();<span class="comment">//使用getname方法取出给name2</span></span><br><span class="line">		<span class="keyword">return</span> name1.compareTo(name2);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        <span class="comment">//定义Student类的对象</span></span><br><span class="line">        Student student1 = <span class="keyword">new</span> Student(<span class="number">40</span>,<span class="number">20</span>,<span class="string">"peter"</span>);</span><br><span class="line">        Student student2 = <span class="keyword">new</span> Student(<span class="number">28</span>,<span class="number">5</span>,<span class="string">"angel"</span>);</span><br><span class="line">        Student student3 = <span class="keyword">new</span> Student(<span class="number">35</span>,<span class="number">18</span>,<span class="string">"tom"</span>);</span><br><span class="line">        <span class="comment">//将对象添加到List中</span></span><br><span class="line">        List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">        list.add(student1);</span><br><span class="line">        list.add(student2);</span><br><span class="line">        list.add(student3);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//输出排序前的数据</span></span><br><span class="line">        System.out.println(<span class="string">"按名字排序前："</span>);</span><br><span class="line">        <span class="keyword">for</span>(Student s:list) {</span><br><span class="line">			System.out.println(s);</span><br><span class="line">		}</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> NewComparator());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//输出排序后的数据</span></span><br><span class="line">        System.out.println(<span class="string">"按名字排序后："</span>);</span><br><span class="line">        <span class="keyword">for</span>(Student s:list) {</span><br><span class="line">			System.out.println(s);</span><br><span class="line">		}        </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>Student.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>{</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>{</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> age, String name)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//getter和setter方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//toString()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"[学号:"</span>+<span class="keyword">this</span>.id+<span class="string">",年龄："</span>+<span class="keyword">this</span>.age+<span class="string">",姓名："</span>+<span class="keyword">this</span>.name+<span class="string">"]"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="第4章-Comparable接口"><a href="#第4章-Comparable接口" class="headerlink" title="第4章 Comparable接口"></a>第4章 Comparable接口</h3><h4 id="4-1-Comparable概述-（03-21）"><a href="#4-1-Comparable概述-（03-21）" class="headerlink" title="4-1 Comparable概述 （03:21）"></a>4-1 Comparable概述 （03:21）</h4><ul>
<li>此接口强行对实现他的每个类的对象进行整体排序。</li>
<li>这种排序被称为类的自然排序，类的compareTo方法被称为它的自然比较方法。</li>
<li>对于集合，通过调用Collection.sort方法进行排序。</li>
<li>对于数组，通过调用Arrays.sort方法进行排序。</li>
<li>int compareTo(T o)方法。</li>
<li>该对象小于、等于或大于指定对象，则分别返回负整数、零或者正整数。</li>
</ul>
<h4 id="4-2-选择练习"><a href="#4-2-选择练习" class="headerlink" title="4-2 选择练习"></a>4-2 选择练习</h4><p>单选题<br>关于Comparable接口的说法，以下哪个是错误的？（选择一项）</p>
<p>A.  Comparable位于java.lang包<br>B.  调用sort方法时，需要指定Comparable接口的实现类<br>C.  Comparable接口的抽象方法是 int compareTo(T t)<br>D.  Comparable接口还可以用于数组的排序</p>
<p>正确答案： B</p>
<p><strong>参考解析：</strong><br>本题考查Comparable接口，调用sort方法进行排序时，不需要指定Comparable接口的实现类，故B选项的说法错误，选B。</p>
<h4 id="4-3-案例：对商品价格进行降序排序-（11-04）"><a href="#4-3-案例：对商品价格进行降序排序-（11-04）" class="headerlink" title="4-3 案例：对商品价格进行降序排序 （11:04）"></a>4-3 案例：对商品价格进行降序排序 （11:04）</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsTest</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">             Goods g1=<span class="keyword">new</span> Goods(<span class="string">"s00001"</span>,<span class="string">"手机"</span>,<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">             Goods g2=<span class="keyword">new</span> Goods(<span class="string">"s00002"</span>,<span class="string">"冰箱"</span>,<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">             Goods g3=<span class="keyword">new</span> Goods(<span class="string">"s00003"</span>,<span class="string">"电视机"</span>,<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">             List&lt;Goods&gt; goodsList=<span class="keyword">new</span> ArrayList&lt;Goods&gt;();</span><br><span class="line"></span><br><span class="line">             goodsList.add(g1);</span><br><span class="line"></span><br><span class="line">             goodsList.add(g2);</span><br><span class="line"></span><br><span class="line">             goodsList.add(g3);</span><br><span class="line"></span><br><span class="line">             <span class="comment">//排序前</span></span><br><span class="line"></span><br><span class="line">             System.out.println(<span class="string">"排序前："</span>);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">for</span>(Goods goods:goodsList) {</span><br><span class="line"></span><br><span class="line">                    System.out.println(goods);</span><br><span class="line"></span><br><span class="line">             }</span><br><span class="line"></span><br><span class="line">             Collections.sort(goodsList);</span><br><span class="line"></span><br><span class="line">             <span class="comment">//排序后</span></span><br><span class="line"></span><br><span class="line">             System.out.println(<span class="string">"排序后："</span>);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">for</span>(Goods goods:goodsList) {</span><br><span class="line"></span><br><span class="line">                    System.out.println(goods);</span><br><span class="line"></span><br><span class="line">             }</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="4-4-编程练习"><a href="#4-4-编程练习" class="headerlink" title="4-4 编程练习"></a>4-4 编程练习</h4><p>定义一个员工信息类，包括编号，姓名，工资三个成员变量，要求工资定义为float类型，然后按工资进行降序排序。(使用Comparable接口)<br>运行效果图：</p>
<p>任务</p>
<p>1、定义员工信息类Employee，实现Comparable接口，内容如下：<br>三个成员变量：编号、姓名、工资<br>构造方法<br>getter和setter方法<br>重写toString()方法<br>2、定义测试类EmployeeTest，完成如下功能：<br>在主方法中定义3个Employee类的对象，并添加到列表中，进行排序，输出排序前和排序后的内容。</p>
<p><strong>原题</strong><br><strong>EmployeeTest.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeTest</span></span>{</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        <span class="comment">//定义Employee类的对象</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将对象添加到List中</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//输出排序前的数据</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//输出排序后的数据</span></span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>Employee.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//实现Comparable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>{</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//getter和setter方法</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//toString()方法</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答</strong><br><strong>EmployeeTest.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeTest</span></span>{</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        <span class="comment">//定义Employee类的对象</span></span><br><span class="line">        Employee e1=<span class="keyword">new</span> Employee(<span class="string">"emp001"</span>,<span class="string">"张三"</span>,<span class="number">1800</span>);</span><br><span class="line">        Employee e2=<span class="keyword">new</span> Employee(<span class="string">"emp002"</span>,<span class="string">"李四"</span>,<span class="number">2500</span>);</span><br><span class="line">        Employee e3=<span class="keyword">new</span> Employee(<span class="string">"emp003"</span>,<span class="string">"王五"</span>,<span class="number">1600</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将对象添加到List中</span></span><br><span class="line">        List&lt;Employee&gt; em=<span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br><span class="line">        em.add(e1);</span><br><span class="line">        em.add(e2);</span><br><span class="line">        em.add(e3);</span><br><span class="line">        <span class="comment">//输出排序前的数据</span></span><br><span class="line">        System.out.println(<span class="string">"排序前："</span>);</span><br><span class="line">        <span class="keyword">for</span>(Employee e:em){</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        Collections.sort(em);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//输出排序后的数据</span></span><br><span class="line">        System.out.println(<span class="string">"排序后："</span>);</span><br><span class="line">        <span class="keyword">for</span>(Employee e:em){</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>Employee.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//实现Comparable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Employee</span>&gt;</span>{</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String No;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Employee e)</span></span>{</span><br><span class="line">        <span class="keyword">double</span> salary1=<span class="keyword">this</span>.getSalary();</span><br><span class="line">        <span class="keyword">double</span> salary2=e.getSalary();</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)(salary2-salary1);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span></span>{</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String No,String name,<span class="keyword">double</span> salary)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.No=No;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.salary=salary;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//getter和setter方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNo</span><span class="params">(String No)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.No=No;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNo</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.No;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.salary=salary;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.salary;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//toString()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"员工[编号："</span>+<span class="keyword">this</span>.getNo()+<span class="string">"，姓名:"</span>+<span class="keyword">this</span>.getName()+<span class="string">"，工资："</span>+<span class="keyword">this</span>.getSalary()+<span class="string">"]"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="第5章-课程总结"><a href="#第5章-课程总结" class="headerlink" title="第5章 课程总结"></a>第5章 课程总结</h3><h4 id="5-1-集合排序总结-（03-59）"><a href="#5-1-集合排序总结-（03-59）" class="headerlink" title="5-1 集合排序总结 （03:59）"></a>5-1 集合排序总结 （03:59）</h4><p><img src="en-resource://database/3559:1" alt="9bd1f7568c41003f00be080646c8e078.png"></p>
<p><strong>Comparator</strong></p>
<ul>
<li>第一步：实现要排序的接口。</li>
<li>第二步：实现comparator接口。</li>
<li>第三步：测试。</li>
</ul>
<p><strong>Comparable</strong></p>
<ul>
<li>第一步：定义要比较的类，并实现Comparable接口。</li>
<li>第二步：测试。</li>
</ul>
<h4 id="5-2-选择练习"><a href="#5-2-选择练习" class="headerlink" title="5-2 选择练习"></a>5-2 选择练习</h4><p>多选题<br>下列关于接口Comparable和Comparator的说法正确的是（选择两项）</p>
<p>A.  它们都是java的接口<br>B.  都是用来对自定义的类进行大小比较<br>C.  Comparable接口在要比较的类的之外实现<br>D.  Comparator在定义要比较的类的同时实现</p>
<p>正确答案： A,B<br><strong>参考解析：</strong><br>本题考查的是接口Comparable和Comparator的区别，都是java的一个接口, 并且是用来对自定义的类进行大小比较；故A、B选项正确。<br>Comparable 接口的实现与要比较的类的定义一起完成；Comparator 接口在要比较的类之外实现。故C、D选项的说法是错误的。</p>
</body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JavaSpring4.1.2 Spring Bean管理</title>
    <url>/posts/508712296/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>Spring的工厂类。</li>
<li>Spring的Bean管理（XML方式）</li>
<li>Spring的属性注入（XML方式）</li>
<li>Spring的Bean管理（注解方式）</li>
<li>Spring的属性注入（注解方式）</li>
</ul>
<a id="more"></a>

<h3 id="Spring的工厂类介绍"><a href="#Spring的工厂类介绍" class="headerlink" title="Spring的工厂类介绍"></a>Spring的工厂类介绍</h3><p><img src="en-resource://database/6242:1" alt="fbc3b69c440b76809857b89900e67431.png"></p>
<h5 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a>单选题</h5><p>在Spring中，加载类路径下的配置文件使用的是（）（选择一项）</p>
<p>AFileSystemXmlApplicationContext<br>BClassPathXmlApplicationContext<br>CAbstractXmlApplicationContext<br>DApplicationContext</p>
<p>正确答案： B</p>
<h3 id="Spring-Bean管理——XML方式（上）"><a href="#Spring-Bean管理——XML方式（上）" class="headerlink" title="Spring Bean管理——XML方式（上）"></a>Spring Bean管理——XML方式（上）</h3><h4 id="Bean的实例化三种方式"><a href="#Bean的实例化三种方式" class="headerlink" title="Bean的实例化三种方式"></a>Bean的实例化三种方式</h4><ul>
<li>使用类构造器实例化（默认无参数）</li>
<li>使用静态工厂方法实例（简单工厂模式化）</li>
<li>使用实例工厂方法实例化（工厂方法模式）</li>
</ul>
<p><strong>第一种构造方式：使用类构造器实例化（默认无参数）</strong></p>
<p>applicationContext.xml</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  IOC(控制反转 - 将UserService的创建权交给了Spring)  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.demo1.UserServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  DI(依赖注入)  设置属性  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"香蕉"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"kind"</span> <span class="attr">value</span>=<span class="string">"水果"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"taste"</span> <span class="attr">value</span>=<span class="string">"甜甜的"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  Bean的实例化的三种方式================================================  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  第一种：无参构造器的方式  最常用的方式  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean1"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.demo2.Bean1"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  第二种:静态工厂的方式  如果类构造特别复杂的情况使用  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean2"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.demo2.Bean2Factory"</span> <span class="attr">factory-method</span>=<span class="string">"createBean2"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  第三种：实例工厂的方式  如果类构造特别复杂的情况使用  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean3Factory"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.demo2.Bean3Factory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean3"</span> <span class="attr">factory-bean</span>=<span class="string">"bean3Factory"</span> <span class="attr">factory-method</span>=<span class="string">"createBean3"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>Bean1</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bean的实例化的三种方式之一：采用无参数的构造方法的方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean1</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bean1</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"Bean1被实例化了。。。"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>SpringDemo</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bean的实例化的三种方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDemo2</span> </span>{</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">// 创建工厂</span></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">// 通过工厂获得类的实例：</span></span><br><span class="line">        Bean1 bean1 = (Bean1)applicationContext.getBean(<span class="string">"bean1"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">// 创建工厂</span></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">// 通过工厂获得类的实例：</span></span><br><span class="line">        Bean2 bean2 = (Bean2) applicationContext.getBean(<span class="string">"bean2"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">// 创建工厂</span></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">// 通过工厂获得类的实例：</span></span><br><span class="line">        Bean3 bean3 = (Bean3) applicationContext.getBean(<span class="string">"bean3"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>第二种构造方式：使用静态工厂方法实例（简单工厂模式化）</strong></p>
<p>applicationContext.xml</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  Bean的实例化的三种方式================================================  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  第一种：无参构造器的方式  最常用的方式  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean1"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.demo2.Bean1"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  第二种:静态工厂的方式  如果类构造特别复杂的情况使用  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean2"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.demo2.Bean2Factory"</span> <span class="attr">factory-method</span>=<span class="string">"createBean2"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  第三种：实例工厂的方式  如果类构造特别复杂的情况使用  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean3Factory"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.demo2.Bean3Factory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean3"</span> <span class="attr">factory-bean</span>=<span class="string">"bean3Factory"</span> <span class="attr">factory-method</span>=<span class="string">"createBean3"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>Bean2</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bean的实例化的三种方式之二：静态工厂实例化方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean2</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Bean2Factory</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bean2的静态工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean2Factory</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bean2 <span class="title">createBean2</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"Bean2Factory的方法已经执行了。"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bean2();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<p>SpringDemo</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bean的实例化的三种方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDemo2</span> </span>{</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">// 创建工厂</span></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">// 通过工厂获得类的实例：</span></span><br><span class="line">        Bean1 bean1 = (Bean1)applicationContext.getBean(<span class="string">"bean1"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">// 创建工厂</span></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">// 通过工厂获得类的实例：</span></span><br><span class="line">        Bean2 bean2 = (Bean2) applicationContext.getBean(<span class="string">"bean2"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">// 创建工厂</span></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">// 通过工厂获得类的实例：</span></span><br><span class="line">        Bean3 bean3 = (Bean3) applicationContext.getBean(<span class="string">"bean3"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>第三种构造方式：使用实例工厂方法实例化（工厂方法模式）</strong></p>
<p>applicationContext.xml</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  Bean的实例化的三种方式================================================  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  第一种：无参构造器的方式  最常用的方式  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean1"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.demo2.Bean1"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  第二种:静态工厂的方式  如果类构造特别复杂的情况使用  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean2"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.demo2.Bean2Factory"</span> <span class="attr">factory-method</span>=<span class="string">"createBean2"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  第三种：实例工厂的方式  如果类构造特别复杂的情况使用  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean3Factory"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.demo2.Bean3Factory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean3"</span> <span class="attr">factory-bean</span>=<span class="string">"bean3Factory"</span> <span class="attr">factory-method</span>=<span class="string">"createBean3"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>Bean3</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bean的实例化的三种方式之三：实例工厂实例化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean3</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Bean3Factory</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bean3的实例工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean3Factory</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bean3 <span class="title">createBean3</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"Bean3Factory执行了。。。"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bean3();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>SpringDemo</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bean的实例化的三种方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDemo2</span> </span>{</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">// 创建工厂</span></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">// 通过工厂获得类的实例：</span></span><br><span class="line">        Bean1 bean1 = (Bean1)applicationContext.getBean(<span class="string">"bean1"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">// 创建工厂</span></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">// 通过工厂获得类的实例：</span></span><br><span class="line">        Bean2 bean2 = (Bean2) applicationContext.getBean(<span class="string">"bean2"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">// 创建工厂</span></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">// 通过工厂获得类的实例：</span></span><br><span class="line">        Bean3 bean3 = (Bean3) applicationContext.getBean(<span class="string">"bean3"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<h5 id="单选题-1"><a href="#单选题-1" class="headerlink" title="单选题"></a>单选题</h5><p>在Spring中，已知Student类的定义，以下哪一项属于无参构造器的方式来实例化Bean的方式（选择一项）</p>
<p>A<bean id="bean1" class="com.imooc.demo.Student"><br>B<bean id="bean1" class="com.imooc.demo.Student" factory-bean="createBean1"><br>C<bean id="bean1" factory-bean="createBean1"><br>D<bean id="bean1" factory-bean="bean1Factory" factory-method="createBean1"></bean></bean></bean></bean></p>
<p>正确答案： A</p>
<h4 id="Bean的常用配置"><a href="#Bean的常用配置" class="headerlink" title="Bean的常用配置"></a>Bean的常用配置</h4><p><strong>id和name</strong></p>
<ul>
<li>一般情况下，装配一个Bean时，通过指定一个id属性作为Bean的名称。</li>
<li>id属性在IOC容器当中必须是唯一的。name虽然没有唯一性的约束，但是我们在使用过程中最好保证name的唯一性。</li>
<li>如果Bean的名称中含有特殊字符，就需要使用name属性。</li>
</ul>
<p><strong>class</strong></p>
<ul>
<li>class用于设置一个类的完全路径名称，主要作用是IOC容器类的实例。</li>
</ul>
<p><strong>Bean的作用域</strong></p>
<table>
<thead>
<tr>
<th>类别</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>singleton</td>
<td>在SpringIOC容器中仅存一个Bean实例，Bean以单实例的方式存在。</td>
</tr>
<tr>
<td>prototype</td>
<td>每次调用getBean()时都会返回一个新的实例。</td>
</tr>
<tr>
<td>request</td>
<td>每次HTTP请求都会创建一个新的Bean，该作用域适用于WebApplicationContext环境。</td>
</tr>
<tr>
<td>session</td>
<td>同一个HTTP Session共享一个Bean，不同的HTTP Session使用不同的Bean。该作用域仅适用于WebApplicationContext环境。</td>
</tr>
</tbody></table>
<p>applicationContext.xml</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  Bean的作用范围  scope默认singleton（单例），可切换成prototype（多例）  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.demo3.Person"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>Person</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>SpringDemo</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bean的作用范围的测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDemo3</span> </span>{</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span></span>{</span><br><span class="line">        ApplicationContext applicationContext= <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        Person person1 = (Person) applicationContext.getBean(<span class="string">"person"</span>);</span><br><span class="line">        Person person2 = (Person) applicationContext.getBean(<span class="string">"person"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(person1);</span><br><span class="line">        System.out.println(person2);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="Bean的生命周期的配置"><a href="#Bean的生命周期的配置" class="headerlink" title="Bean的生命周期的配置"></a>Bean的生命周期的配置</h4><p>Spring初始化bean或销毁bean时，有时需要做一些处理工作，因此spring可以在创建和销毁bean的时候调用bean的两个生命周期方法。</p>
<p>applicationContext.xml</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  Bean生命周期的配置=======================================================  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;bean id="xxx" class="xxx" init-method="init" destroy-method="destroy"/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  当bean被载入到容器的时候调用init  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  当bean从容器中删除的时候调用destroy(scope=singleton有效)  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"man"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.demo3.Man"</span> <span class="attr">init-method</span>=<span class="string">"setup"</span> <span class="attr">destroy-method</span>=<span class="string">"teardown"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div>
<p>Man</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Man</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"Man被实例化了。。。"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"Man被初始化了。。。"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teardown</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"Man被销毁了。。。"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>SpringDemo</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span></span>{</span><br><span class="line">        ApplicationContext applicationContext= <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        Man man = (Man) applicationContext.getBean(<span class="string">"man"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(man);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>运行结果 ：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tbody><tr><td class="code"><pre><span class="line">Man被实例化了。。。</span><br><span class="line">Man被初始化了。。。</span><br><span class="line">com.imooc.ioc.demo3.Man@<span class="number">179</span>ece50</span><br><span class="line"></span><br><span class="line">Process finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure></div>
<h5 id="多选题"><a href="#多选题" class="headerlink" title="多选题"></a>多选题</h5><p>在Spring中，Bean在配置时，初始化和销毁方法配置在&lt;bean ../&gt;中的标签名是（）（选择两项）</p>
<p><strong>A、</strong>init-method</p>
<p><strong>B、</strong>destroy-method</p>
<p><strong>C、</strong>init</p>
<p><strong>D、</strong>destroy</p>
<p>正确答案：A、B</p>
<h4 id="Bean的生命周期的完整过程"><a href="#Bean的生命周期的完整过程" class="headerlink" title="Bean的生命周期的完整过程"></a>Bean的生命周期的完整过程</h4><ul>
<li>instantiate</li>
<li>Populate properties</li>
<li>BeanNameAware’s setBeanName()</li>
<li>BeanFactoryAware’s setBeanFactory()</li>
<li>Pre-initialization BeanPostProcessors</li>
<li>InitializingBean’s afterPropertiesSet()</li>
<li>Call custom init-method</li>
<li>Post-initialization BeanPostProcessors</li>
<li>Bean is Ready To Use<ul>
<li>Container Is Shutdown</li>
</ul>
</li>
<li>DisposableBean’s destroy()</li>
<li>Call custom destroy-method</li>
</ul>
<p>具体实现步骤：</p>
<ol>
<li>instantiate bean 对象实例化</li>
<li>populate properties 封装属性</li>
<li>如果Bean实现BeanNameAware执行setBeanName</li>
<li>如果Bean实现BeanFactoryAware 或者ApplicationContextAware设置工厂setBeanFactory或者上下文对象setApplicationContext</li>
<li>如果存在类实现 BeanPostProcessor(后处理Bean)，执行postProcessBeforeInitialization</li>
<li>如果Bean实现InitializingBean执行afterPropertiesSet</li>
<li>调用<bean init-method="init"> 指定初始化方法 init</bean></li>
<li>如果存在类实现BeanPostProcessor（处理Bean），执行postProcessAfterInitialization</li>
<li>执行业务处理</li>
<li>如果Bean实现 DisposableBean执行destroy</li>
<li>调用<bean destroy-method="customerDestroy">指定销毁方法 customerDestroy</bean></li>
</ol>
<p>applicationContext.xml</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  Bean生命周期的完整过程=======================================================  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"man"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.demo3.Man"</span> <span class="attr">init-method</span>=<span class="string">"setup"</span> <span class="attr">destroy-method</span>=<span class="string">"teardown"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.demo3.MyBeanPostProcessor"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>Man</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanNameAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">implements</span> <span class="title">BeanNameAware</span>, <span class="title">ApplicationContextAware</span>, <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"第二步：设置属性"</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Man</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"第一步：初始化"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"第七步：Man被初始化了。。。"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teardown</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"第十一步：Man被销毁了。。。"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"第三步：设置bean名称"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>{</span><br><span class="line">        System.out.println(<span class="string">"第四步：了解工厂的信息"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        System.out.println(<span class="string">"第六步：属性设置后"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"第九步：执行业务方法"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        System.out.println(<span class="string">"第十步：执行Spring的销毁方法"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>MyBeanPostProcessor</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean,String beanName)</span> <span class="keyword">throws</span> BeansException</span>{</span><br><span class="line">        System.out.println(<span class="string">"第五步：初始化前方法。。。"</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean,String beanName)</span> <span class="keyword">throws</span> BeansException</span>{</span><br><span class="line">        System.out.println(<span class="string">"第八步：初始化后方法。。。"</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<p>SpringDemo</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span></span>{</span><br><span class="line">        ClassPathXmlApplicationContext applicationContext= <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        Man man = (Man) applicationContext.getBean(<span class="string">"man"</span>);</span><br><span class="line"></span><br><span class="line">        man.run();</span><br><span class="line"></span><br><span class="line">        applicationContext.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>运行结果 ：</p>
<figure class="highlight inform7"><table><tbody><tr><td class="code"><pre><span class="line">第一步：初始化</span><br><span class="line">第二步：设置属性</span><br><span class="line">第三步：设置bean名称</span><br><span class="line">第四步：了解工厂的信息</span><br><span class="line">第五步：初始化前方法。。。</span><br><span class="line">第六步：属性设置后</span><br><span class="line">第七步：<span class="keyword">Man</span>被初始化了。。。</span><br><span class="line">第八步：初始化后方法。。。</span><br><span class="line">第九步：执行业务方法</span><br><span class="line">第十步：执行Spring的销毁方法</span><br><span class="line">第十一步：<span class="keyword">Man</span>被销毁了。。。</span><br></pre></td></tr></tbody></table></figure>


<h5 id="单选题-2"><a href="#单选题-2" class="headerlink" title="单选题"></a>单选题</h5><p>在Spring中，假设某个bean要使用某种类型的资源,那么一般情况下应该把资源的释放到bean的生命周期中（）阶段（选择一项）</p>
<p><strong>A、</strong>定义</p>
<p><strong>B、</strong>初始化</p>
<p><strong>C、</strong>使用</p>
<p><strong>D、</strong>销毁</p>
<p>正确答案：D</p>
<h4 id="BeanPostProcessor的作用"><a href="#BeanPostProcessor的作用" class="headerlink" title="BeanPostProcessor的作用"></a>BeanPostProcessor的作用</h4><p>applicationContext.xml</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  BeanPostProcessor的作用  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.demo3.MyBeanPostProcessor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.demo3.UserDaoImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>Man</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanNameAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">implements</span> <span class="title">BeanNameAware</span>, <span class="title">ApplicationContextAware</span>, <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"第二步：设置属性"</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Man</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"第一步：初始化"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"第七步：Man被初始化了。。。"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teardown</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"第十一步：Man被销毁了。。。"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"第三步：设置bean名称"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>{</span><br><span class="line">        System.out.println(<span class="string">"第四步：了解工厂的信息"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        System.out.println(<span class="string">"第六步：属性设置后"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"第九步：执行业务方法"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        System.out.println(<span class="string">"第十步：执行Spring的销毁方法"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>UserDao.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>UserDaoImpl.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"查询用户。。。"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"保存用户。。。"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"修改用户。。。"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"删除用户。。。"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>MyBeanPostProcessor</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean,String beanName)</span> <span class="keyword">throws</span> BeansException</span>{</span><br><span class="line">        System.out.println(<span class="string">"第五步：初始化前方法。。。"</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean,String beanName)</span> <span class="keyword">throws</span> BeansException</span>{</span><br><span class="line">        System.out.println(<span class="string">"第八步：初始化后方法。。。"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"userDao"</span>.equals(beanName)){</span><br><span class="line">            Object proxy=Proxy.newProxyInstance(bean.getClass().getClassLoader(), bean.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() {</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"save"</span>.equals(method.getName())){</span><br><span class="line">                        System.out.println(<span class="string">"权限调用==============="</span>);</span><br><span class="line">                        <span class="keyword">return</span> method.invoke(bean,args);</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">return</span> method.invoke(bean,args);</span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line">            <span class="keyword">return</span> proxy;</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> bean;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<p>SpringDemo</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span></span>{</span><br><span class="line">        ApplicationContext applicationContext= <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        UserDao userDao = (UserDao) applicationContext.getBean(<span class="string">"userDao"</span>);</span><br><span class="line"></span><br><span class="line">        userDao.findAll();</span><br><span class="line">        userDao.save();</span><br><span class="line">        userDao.delete();</span><br><span class="line">        userDao.update();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>运行结果 ：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DIFF"><figure class="iseeu highlight /diff"><table><tbody><tr><td class="code"><pre><span class="line">第五步：初始化前方法。。。</span><br><span class="line">第八步：初始化后方法。。。</span><br><span class="line">查询用户。。。</span><br><span class="line">权限调用<span class="comment">===============</span></span><br><span class="line">保存用户。。。</span><br><span class="line">删除用户。。。</span><br><span class="line">修改用户。。。</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="Spring-Bean管理——XML方式（下）"><a href="#Spring-Bean管理——XML方式（下）" class="headerlink" title="Spring Bean管理——XML方式（下）"></a>Spring Bean管理——XML方式（下）</h3><p>-对于类成员变量，注入方式有三种：</p>
<ol>
<li>构造函数注入</li>
<li>属性setter方式注入</li>
<li>接口注入</li>
</ol>
<p>Spring支持前两种。</p>
<p>Spring的属性注入 - 构造方法注入</p>
<ul>
<li>通过构造方法注入Bean的属性值或依赖的对象，它保证了Bean实例在实例化后就可以使用。</li>
<li>构造器注入在<constructor-arg>元素里声明的属性。</constructor-arg></li>
</ul>
<h4 id="属性注入方式及构造方法的属性注入"><a href="#属性注入方式及构造方法的属性注入" class="headerlink" title="属性注入方式及构造方法的属性注入"></a>属性注入方式及构造方法的属性注入</h4><p>applicationContext.xml</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  Bean构造方法的属性注入 =============================  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.demo4.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"23"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>User.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, Integer age)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<p>SpringDemo4.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDemo4</span> </span>{</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span></span>{</span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        User user = (User) applicationContext.getBean(<span class="string">"user"</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>运行结果 ：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tbody><tr><td class="code"><pre><span class="line">User{<span class="attribute">name</span>=<span class="string">'张三'</span>, <span class="attribute">age</span>=23}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="set方法的属性注入"><a href="#set方法的属性注入" class="headerlink" title="set方法的属性注入"></a>set方法的属性注入</h4><ul>
<li>使用set方法注入，在Spring配置文件中，通过<property>设置注入的属性。</property></li>
</ul>
<p>applicationContext.xml</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.demo4.Person"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"李四"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"32"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cat"</span> <span class="attr">ref</span>=<span class="string">"cat"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.demo4.Cat"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"ketty"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>Cat.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Cat{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Person.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCat</span><span class="params">(Cat cat)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.cat = cat;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", cat="</span> + cat +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div>


<p>SpringDemo4.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDemo4</span> </span>{</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span></span>{</span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        Person person = (Person) applicationContext.getBean(<span class="string">"person"</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>运行结果 ：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tbody><tr><td class="code"><pre><span class="line">User{<span class="attribute">name</span>=<span class="string">'张三'</span>, <span class="attribute">age</span>=23}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="p名称空间的属性注入"><a href="#p名称空间的属性注入" class="headerlink" title="p名称空间的属性注入"></a>p名称空间的属性注入</h4><ul>
<li>使用p命名空间是为了简化XML文件配置，Spring从2.5开始引入一个新的p名称空间。</li>
<li>p:&lt;属性名&gt;=”xxx” 引入常量值</li>
<li>p:&lt;属性名&gt;-ref=”xxx” 引入其他Bean对象</li>
</ul>
<p>applicationContext.xml</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span> // 这里要加入<span class="attr">P</span>命名空间</span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  Bean的p名称空间的属性注入 =============================  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.demo4.Person"</span> <span class="attr">p:name</span>=<span class="string">"大黄"</span> <span class="attr">p:age</span>=<span class="string">"34"</span> <span class="attr">p:cat-ref</span>=<span class="string">"cat"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.demo4.Cat"</span> <span class="attr">p:name</span>=<span class="string">"小菊"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>


<h5 id="多选题-1"><a href="#多选题-1" class="headerlink" title="多选题"></a>多选题</h5><p>以下关于p名称空间的说法正确的是（）（选择两项）  </p>
<p><strong>A、</strong>通过p:age= “18” 引入常量值</p>
<p><strong>B、</strong>通过p:age= “18” 引入Bean对象</p>
<p><strong>C、</strong>通过p:test -ref= “test” 引入常量值</p>
<p><strong>D、</strong>通过p:test -ref= “test” 引入Bean对象</p>
<p>正确答案：A、D</p>
<h4 id="SpEL的属性注入"><a href="#SpEL的属性注入" class="headerlink" title="SpEL的属性注入"></a>SpEL的属性注入</h4><ul>
<li><p>SpEL：spring expression language，spring表达式语言，对依赖注入进行简化。</p>
</li>
<li><p>语法：#{表达式}</p>
</li>
<li><bean id="" value="#{表达式}">

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="code"><pre><span class="line">#{}</span><br><span class="line">#{'hello'}使用字符串</span><br><span class="line">#{beanId}使用另一个bean</span><br><span class="line">#{beanId.content.toUpperCase()}使用指定名属性，并使用方法</span><br><span class="line">#{T(java.lang.Math).PI}使用静态字段或方法</span><br></pre></td></tr></tbody></table></figure></div>
<p>applicationContext.xml</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span> // 这里要加入<span class="attr">P</span>命名空间</span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  Bean的SpEL的属性注入 =============================  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"category"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.demo4.Category"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#{'服装'}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"productInfo"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.demo4.ProductInfo"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"product"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.demo4.Product"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#{'男装'}"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"#{productInfo.calculatePrice()}"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"#{category}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>


</bean></li>
</ul>
<h5 id="选择练习"><a href="#选择练习" class="headerlink" title="选择练习"></a>选择练习</h5><p>单选题</p>
<p>Spring属性注入中，关于SpEL注入方式的说法错误的是（）（选择一项）</p>
<p><strong>A、</strong>SpEL是对Spring expression language的简称</p>
<p><strong>B、</strong>SpEL的语法是：#{表达式}</p>
<p><strong>C、</strong>SpEL的语法是：${表达式}</p>
<p><strong>D、</strong>使用另外一个bean的书写格式是：#{beanId}</p>
<p><strong>正确答案：</strong> C</p>
<h4 id="复杂类型的属性注入"><a href="#复杂类型的属性注入" class="headerlink" title="复杂类型的属性注入"></a>复杂类型的属性注入</h4><ul>
<li>数组类型的属性注入</li>
<li>List集合类型的属性注入</li>
<li>Set集合类型的属性注入</li>
<li>Map集合类型的属性注入</li>
<li>Properties类型的属性注入</li>
</ul>
<p>applicationContext.xml</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span> // 这里要加入<span class="attr">P</span>命名空间</span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">&lt;!--  集合类型（复杂类型）的属性注入  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"collectionBean"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.demo5.CollectionBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  数组类型  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arrs"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  List集合的属性注入  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>111<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>222<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>333<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  Set集合的属性注入  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"Set"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>ddd<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>eee<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>fff<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  Set集合的属性注入  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"Map"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"aaa"</span> <span class="attr">value</span>=<span class="string">"111"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"bbb"</span> <span class="attr">value</span>=<span class="string">"222"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ccc"</span> <span class="attr">value</span>=<span class="string">"333"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  Properties的属性注入  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>CollectionBean.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionBean</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String[] arrs; <span class="comment">// 数组类型。</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list; <span class="comment">// List集合类型。</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set; <span class="comment">// Set集合类型。</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Integer&gt; map; <span class="comment">// Map集合类型。</span></span><br><span class="line">    <span class="keyword">private</span> Properties properties; <span class="comment">// 属性类型。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getArrs() {</span><br><span class="line">        <span class="keyword">return</span> arrs;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArrs</span><span class="params">(String[] arrs)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.arrs = arrs;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getList</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;String&gt; list)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getSet</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> set;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSet</span><span class="params">(Set&lt;String&gt; set)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.set = set;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Integer&gt; <span class="title">getMap</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map&lt;String, Integer&gt; map)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Properties <span class="title">getProperties</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"CollectionBean{"</span> +</span><br><span class="line">                <span class="string">"arrs="</span> + Arrays.toString(arrs) +</span><br><span class="line">                <span class="string">", list="</span> + list +</span><br><span class="line">                <span class="string">", set="</span> + set +</span><br><span class="line">                <span class="string">", map="</span> + map +</span><br><span class="line">                <span class="string">", properties="</span> + properties +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div>
<p>SpringDemo5.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.ioc.demo5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDemo5</span> </span>{</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span></span>{</span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        CollectionBean collectionBean= (CollectionBean) applicationContext.getBean(<span class="string">"collectionBean"</span>);</span><br><span class="line">        System.out.println(collectionBean);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="选择练习-1"><a href="#选择练习-1" class="headerlink" title="选择练习"></a>选择练习</h4><p>多选题</p>
<p>在SpringBean注入中，如果需要对Map进行数据注入，需要用到哪些标签（选择三项）</p>
<p><strong>A、</strong><property></property></p>
<p><strong>B、</strong><map></map></p>
<p><strong>C、</strong><entry></entry></p>
<p><strong>D、</strong><value></value></p>
<p><strong>正确答案：</strong> <strong>A,B,C</strong></p>
<h3 id="Spring-Bean管理——注解方式"><a href="#Spring-Bean管理——注解方式" class="headerlink" title="Spring Bean管理——注解方式"></a>Spring Bean管理——注解方式</h3><h4 id="Bean的管理"><a href="#Bean的管理" class="headerlink" title="Bean的管理"></a>Bean的管理</h4><ul>
<li>Spring2.5引入使用注解去定义Bean<ul>
<li>@Component  描述Spring框架中Bean</li>
</ul>
</li>
<li>除了@Component外，Spring提供了3个功能基本和@Component等效的注解<ul>
<li>@Repository 用于对DAO实现类进行注解</li>
<li>@Service 用于对Service实现类进行注解</li>
<li>@Controller 用于对Controller实现类进行注解</li>
</ul>
</li>
</ul>
<p>注意：这三个注解是为了让标注本身的用途清晰，Spring在后续的版本会对其增强。</p>
<h5 id="选择练习-2"><a href="#选择练习-2" class="headerlink" title="选择练习"></a>选择练习</h5><p>多选题</p>
<p>Spring2.5以后引入了注解定义Bean，那么定义Dao层的Bean可以使用下列哪个注解（选择两项）</p>
<p><strong>A、</strong>@Component</p>
<p><strong>B、</strong>@Repository</p>
<p><strong>C、</strong>@Service</p>
<p><strong>D、</strong>@Controller</p>
<p><strong>正确答案：</strong> <strong>A,B</strong></p>
<h4 id="属性注入的注解"><a href="#属性注入的注解" class="headerlink" title="属性注入的注解"></a>属性注入的注解</h4><ul>
<li>使用@Autowired进行自动注入。</li>
<li>@Autowired默认按照类型进行注入。<ul>
<li>如果存在两个相同Bean类型相同，则按照名称注入。</li>
</ul>
</li>
<li>@Autowired注入时可以针对成员变量或者set方法。</li>
<li>通过@Autowired的required属性，设置一定要找到匹配的Bean。</li>
<li>通过@Qualifier指定注入的名称。</li>
<li>使用Qualifier指定Bean名称后，注解Bean必须指定相同名称。</li>
<li>Spring提供对JSR-250中定义@Resource标准注解的支持。</li>
<li>@Resource和@Autowired注解功能相似。</li>
</ul>
<h5 id="单选题-3"><a href="#单选题-3" class="headerlink" title="单选题"></a>单选题</h5><p>在Spring的Bean注入中，如果使用注解的方式对属性进行注入，以下说法正确的是（）（选择一项）</p>
<p><strong>A、</strong>类中如果有setter方法和getter方法，既可以将注解加到属性上方，也可以加到setter方法上方，也可以加到getter方法上</p>
<p><strong>B、</strong>注解必须要加到属性上方</p>
<p><strong>C、</strong>注解必须加到getter方法上方</p>
<p><strong>D、</strong>类中如果有setter方法，那么注解需要加到setter方法上方</p>
<p><strong>正确答案：</strong> <strong>D</strong></p>
<h4 id="其他注解"><a href="#其他注解" class="headerlink" title="其他注解"></a>其他注解</h4><p>@PostConstruct 初始化</p>
<p>@PreDestroy 销毁</p>
<p><strong>Bean的作用范围</strong></p>
<ul>
<li>使用注解配置的Bean和<bean>配置的一样，作用范围都是singleton。</bean></li>
<li>@Scope注解用于指定Bean的作用范围。</li>
</ul>
<h3 id="Spring的XML和注解整合开发"><a href="#Spring的XML和注解整合开发" class="headerlink" title="Spring的XML和注解整合开发"></a>Spring的XML和注解整合开发</h3><ul>
<li>XML方式的优势。<ul>
<li>结构清晰，易于阅读。</li>
</ul>
</li>
<li>注解方式的优势。<ul>
<li>开发敏捷，属性注入方便。</li>
</ul>
</li>
<li>XML与注解的整合开发<ol>
<li>引入context命名空间。</li>
<li>在配置文件中添加context:annotation-config标签。</li>
</ol>
</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java基础通识1.2.2 封装</title>
    <url>/posts/4198401309/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>一、Java的编译基础</li>
<li>二、Java程序实际执行细节</li>
<li>三、使用eclipse开发Java程序</li>
</ul>
<a id="more"></a>

<h3 id="封装的实现"><a href="#封装的实现" class="headerlink" title="封装的实现"></a>封装的实现</h3><h4 id="封装的概念和特点"><a href="#封装的概念和特点" class="headerlink" title="封装的概念和特点"></a>封装的概念和特点</h4><ul>
<li>隐藏对象的信息，同时留出访问的接口。<ul>
<li>将类的某些信息藏在类内部，不允许外部程序直接访问。</li>
<li>通过该类提供的方法来实现对隐藏信息的操作和访问。</li>
</ul>
</li>
</ul>
<p>特点：</p>
<ul>
<li>只能通过规定的方法访问数据。</li>
<li>隐藏类的实例细节，方便修改和实现。</li>
</ul>
<h4 id="封装的代码实现（上）"><a href="#封装的代码实现（上）" class="headerlink" title="封装的代码实现（上）"></a>封装的代码实现（上）</h4><p>实现步骤：</p>
<ul>
<li><p>修改对象的访问修饰符，设为private。</p>
</li>
<li><p>创建getter/setter方法，设为public，用于属性的读写（getter取值，setter赋值）。</p>
</li>
<li><p>在getter/setter方法中加入属性控制语句，对属性值的合法性进行判断。</p>
<p><img src="en-resource://database/5477:1" alt="68f36d30aa85ccdab01c5b55dbbce78d.png"></p>
</li>
</ul>
<h4 id="封装的代码实现（下）"><a href="#封装的代码实现（下）" class="headerlink" title="封装的代码实现（下）"></a>封装的代码实现（下）</h4><p>注意：</p>
<ul>
<li>只有getXXX方法的属性是只读属性。</li>
<li>只有setXXX方法的属性是只写属性。</li>
</ul>
<h5 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h5><p>编写自定义类实现图书信息设置。请按照编辑器中的注释，在对应的空白区域填写对应的代码，完成程序设计。</p>
<p>运行参考效果如下所示：<br><img src="en-resource://database/5483:1" alt="980a21005a6e90db4633c47dbd3769a1.png"></p>
<p><strong>任务</strong><br>属性：书名、作者、出版社、价格<br>方法：信息介绍<br>要求：<br>1、 设计构造函数实现对属性赋值。<br>2、 设置私有属性，get/set方法实现对属性的访问。<br>3、 限定图书价格必须大于10，如果无效需进行提示，并强制赋值为10。<br>4、 限定作者、书名均为只读属性。<br>5、信息介绍方法描述图书所有信息。</p>
<p><strong>原题</strong><br>BookTest.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookTest</span> </span>{</span><br><span class="line">    <span class="comment">// 测试方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    <span class="comment">//实例化对象，调用相关方法实现运行效果</span></span><br><span class="line">    </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Book.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>{</span><br><span class="line"><span class="comment">//私有属性：书名、作者、出版社、价格 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过构造方法实现属性赋值</span></span><br><span class="line"><span class="comment">/*通过公有的get/set方法实现属性的访问，其中：</span></span><br><span class="line"><span class="comment">1、限定图书价格必须大于10，如果无效需进行提示，并强制赋值为10    </span></span><br><span class="line"><span class="comment">2、限定作者、书名均为只读属性    */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//信息介绍方法，描述图书所有信息}</span></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答</strong><br>Book.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.one;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>{</span><br><span class="line"></span><br><span class="line">       <span class="comment">//私有属性：书名、作者、出版社、价格 </span></span><br><span class="line">       <span class="keyword">private</span> String book;</span><br><span class="line">       <span class="keyword">private</span> String author;</span><br><span class="line">       <span class="keyword">private</span> String press;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//通过构造方法实现属性赋值</span></span><br><span class="line">       <span class="comment">/*通过公有的get/set方法实现属性的访问，其中：</span></span><br><span class="line"><span class="comment">       1、限定图书价格必须大于10，如果无效需进行提示，并强制赋值为10    </span></span><br><span class="line"><span class="comment">       2、限定作者、书名均为只读属性    */</span></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getBook</span><span class="params">(String book)</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> book;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">(String author)</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> author;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPress</span><span class="params">(String press)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.press=press;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getPress</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> press;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.price=price;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> price;</span><br><span class="line">       } </span><br><span class="line">       <span class="comment">//信息介绍方法，描述图书所有信息}</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notice</span><span class="params">(String book,String author)</span> </span>{</span><br><span class="line">             <span class="keyword">if</span>(price&lt;<span class="number">10</span>) {</span><br><span class="line">                    price=<span class="number">10</span>;</span><br><span class="line">                    System.out.println(<span class="string">"图书价格最低"</span>+price+<span class="string">"元"</span>);</span><br><span class="line">             }</span><br><span class="line">             System.out.println(<span class="string">"书名："</span>+<span class="keyword">this</span>.getBook(book));</span><br><span class="line">             System.out.println(<span class="string">"作者："</span>+<span class="keyword">this</span>.getAuthor(author));</span><br><span class="line">             System.out.println(<span class="string">"出版社："</span>+<span class="keyword">this</span>.getPress());</span><br><span class="line">             System.out.println(<span class="string">"价格："</span>+<span class="keyword">this</span>.getPrice());</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>BookTest.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.one;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookTest</span> </span>{</span><br><span class="line">    <span class="comment">// 测试方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    <span class="comment">//实例化对象，调用相关方法实现运行效果</span></span><br><span class="line">       Book a=<span class="keyword">new</span> Book();</span><br><span class="line">       a.setPress( <span class="string">"人民文学出版社"</span>);</span><br><span class="line">       a.setPrice(<span class="number">1</span>);</span><br><span class="line">       a.notice(<span class="string">"红楼梦"</span>, <span class="string">"曹雪芹"</span> );</span><br><span class="line">       System.out.println(<span class="string">"==========================================="</span>);</span><br><span class="line">       a.setPress( <span class="string">"中国长安出版社"</span>);</span><br><span class="line">       a.setPrice(<span class="number">55.5</span>);</span><br><span class="line">       a.notice(<span class="string">"小李飞刀"</span>, <span class="string">"古龙"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="使用包进行类管理–创建包"><a href="#使用包进行类管理–创建包" class="headerlink" title="使用包进行类管理–创建包"></a>使用包进行类管理–创建包</h4><p>管理Java文件解决同名文件冲突:</p>
<ul>
<li>Java中一个Package里不能存在同名类。</li>
<li>Package命名方式：<br>域名倒序+模块+功能（推荐命名全部小写，写大写虽然不算语法错误，但是不推荐这么做）。<br><img src="en-resource://database/5488:1" alt="ea453cfb073582bd06561b870e4946ff.png"></li>
<li>定义包必须放在Java源文件中的第一行。<br><img src="en-resource://database/5493:1" alt="107cdc0416686e403b2ab26f0c5ddeec.png">。</li>
<li>建议每个包内存储信息功能单一。</li>
</ul>
<h4 id="使用包进行类管理–导入包"><a href="#使用包进行类管理–导入包" class="headerlink" title="使用包进行类管理–导入包"></a>使用包进行类管理–导入包</h4><ul>
<li><p>通过”import 包名.*；”的方式加载包下所有类。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.imooc.animal.*;</span><br></pre></td></tr></tbody></table></figure></div></li>
<li><p>建议采用”import 包名.类名;”的方式加载指定包下指定类，提高效率。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.imooc.animal.Cat;</span><br></pre></td></tr></tbody></table></figure></div></li>
<li><p>直接加载</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;<span class="comment">//定义包。</span></span><br><span class="line"><span class="keyword">import</span> com.imooc.animal.*;<span class="comment">//加载com.imooc.animal下所有类。</span></span><br><span class="line"><span class="keyword">import</span> com.imooc.animal.Cat;<span class="comment">//加载com.imooc.animal下指定的Cat类。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        Cat cat=<span class="keyword">new</span> Cat();</span><br><span class="line">        <span class="comment">//直接加载com.imooc.animal.CatTest。</span></span><br><span class="line">        com.imooc.animal.CatTest tex=<span class="keyword">new</span> com.imooc.animal.CatTest();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><img src="en-resource://database/5921:1" alt="c127411bc5490cdde59be2445f28597b.png"></p>
</li>
<li><p>在两个不同的包中，调用同一名称的类，加载类的顺序跟import导入语句的位置无关，而是去找能够直接解析到的类。</p>
</li>
</ul>
<p><img src="en-resource://database/5923:1" alt="478d933d6c1b35d79e01eef15db12f27.png"></p>
<ul>
<li>“import 包名.*;”只能访问指定包名下的类，无法访问子包下的类。</li>
</ul>
<p><strong>包</strong><br>作用：管理Java文件，解决同名文件冲突。</p>
<p><strong>定义包</strong><br>语法：”package 包名；”</p>
<p>每个企业有自己的命名方式，可以根据情况灵活变化。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.animal;</span><br></pre></td></tr></tbody></table></figure></div>
<p>注意：</p>
<ul>
<li>必须放在Java源文件中的第一行</li>
<li>一个Java源文件中只能有一个package语句</li>
<li>包名全部英文小写</li>
<li>命名方式：域名倒序+模块+功能（推荐命名全部小写）</li>
</ul>
<p><strong>导入包</strong><br>语法：import 包名.类名；</p>
<p>例：<br>导入包中全部类：<br>import com.imooc.*;</p>
<p>导入包中指定类：<br>import com.imooc.animal.Cat;</p>
<p><img src="en-resource://database/5498:1" alt="409dfd22bd01500d909299ecaa3924d4.png"></p>
<blockquote>
<h3 id="package-和-import-的使用"><a href="#package-和-import-的使用" class="headerlink" title="package 和 import 的使用**"></a>package 和 import 的使用**</h3><h4 id="1、打包–package"><a href="#1、打包–package" class="headerlink" title="1、打包–package"></a>1、打包–package</h4><p>包名一般为小写，而类名的第一个字母一般为大写，这样在引用时，可以明显的分<br>辨出包名和类名。如果在类的定义之前没有使用package定义包名，那么该类就属于缺<br>省的包。</p>
<h4 id="1-1、-包的作用"><a href="#1-1、-包的作用" class="headerlink" title="1.1、 包的作用"></a>1.1、 包的作用</h4><p>可以更好的组织类，包与文件夹类似，文件夹可以将不同的文件放在同一个文件夹<br>中，而包也可以将不同的类文件放在同一包中。<br>减少类名的冲突问题，这也与文件夹类似，同一文件夹中的文件不能重名，不同文<br>件中的 文件可以重名，同一包中的类名不能重复，不同包中的类名可以重复。<br>对包中的类起了一定的保护作用，详见 Java 的访问控制（在后面的课程中会详细<br>讲解~~）。</p>
<h4 id="1-2、-包的使用"><a href="#1-2、-包的使用" class="headerlink" title="1.2、 包的使用"></a>1.2、 包的使用</h4><p>使用 package 关键字指明类所在的包。 package 语句必须在文件的最前面。 编译<br>时可使用 javac –d . Test.java 自动产生包需要目录。 可以使用 java testPackage.Test<br>来执行编译后的代码。</p>
<h5 id="2、导入–import"><a href="#2、导入–import" class="headerlink" title="2、导入–import"></a>2、导入–import</h5><p>使用了包机制后，如果在一个类中使用了其他包中的类，需要使用 import 来引入。</p>
<h4 id="2-1-import-的使用"><a href="#2-1-import-的使用" class="headerlink" title="2.1 import 的使用"></a>2.1 import 的使用</h4><p>直接引用指定的类，如 import java.util.Vector。<br>引用一个包中的多个类，如 import java.awt.*。 *号代替类名，但不能代替包名，如<br>import java.awt.*，只引用 java.awt 下的类，而不引用 java.awt 下的子包里面的类。<br>import java.awt.F*，这种使用方法是错误的。<br>import 语句在所有类定义之前，在 package 定义之后。 import 只告诉编译器及解<br>释器哪里可以找到类、变量、方法的定义，而并没有将这些定义 引入代码中。</p>
<h4 id="2-2-包中类的使用"><a href="#2-2-包中类的使用" class="headerlink" title="2.2 包中类的使用"></a>2.2 包中类的使用</h4><p>如果要使用的类是属于 java.lang 包的，那么可以直接使用类名来引用指定的类，而<br>不需要加上包名，因为包 java.lang 不用显示使用 import，它是缺省引入的。 如果要使<br>用的类在其它包（java.lang 除外）中，那么可以通过包名加上类名来引用该类， 如<br>java.awt.Font。<br>对于经常要使用的类（该类在其它包中），那么最好使用 import 引用指定的包，如<br>java.awt.*。<br>如果import引入的不同的包中包含有相同的类名，那么这些类的使用必须加上包名。</p>
</blockquote>
<h5 id="选择练习"><a href="#选择练习" class="headerlink" title="选择练习"></a>选择练习</h5><p>下面代码的运行结果是（）（选择一项）<br><img src="en-resource://database/5500:1" alt="8294dedc42d94fc21c6e30462c115f8e.png"></p>
<p>A.  我是一名学生。<br>B.  我是一个即将大学毕业的学生。<br>C我是一名学生。我是一个即将大学毕业的学生。<br>D.  编译错误</p>
<p>正确答案： A<br>参考解析：本题考查不同包中同名类的导入和使用。<strong>程序运行时是先执行import 包名+类名的语句，</strong> 故本题的运行结果为：我是一名学生，故A选项正确。</p>
<h5 id="选择练习-1"><a href="#选择练习-1" class="headerlink" title="选择练习"></a>选择练习</h5><p>关于package+包名；的说法不正确的是（）（选择一项）<br>A.  一个java源文件可以有多个package语句。<br>B.  建议包名应该全部英文小写。<br>C.  建议包名命名方式：域名倒叙+模块+功能。<br>D.  "package+包名；"必须放在java源文件中的第一行。</p>
<p>正确答案： A<br>参考解析：<br>本题考查包的定义，一个java源文件只能有一个package语句，因此A选项的描述是错误的，故选A。BCD选项是包名的规范和正确定义方式，都是正确的。</p>
<h5 id="选择练习-2"><a href="#选择练习-2" class="headerlink" title="选择练习"></a>选择练习</h5><p>下面关于import，class和package的声明顺序哪个是正确的（选择一项）<br>A.  package，import，class<br>B.  class，import，package<br>C.  import，package，class<br>D.  package，class，import</p>
<p>正确答案： A</p>
<h5 id="编程练习-1"><a href="#编程练习-1" class="headerlink" title="编程练习"></a>编程练习</h5><p>编写自定义类实现用户信息类。请按照编辑器中的注释，在对应的空白区域填写对应的代码，完成程序设计。</p>
<p>程序参考运行效果图如下：<br><img src="en-resource://database/5502:1" alt="c01ea63558957d13c7c4fa687f75bc0b.png"></p>
<p><strong>任务</strong></p>
<ul>
<li>用户类：<br>属性：用户名、密码</li>
<li>用户管理类：<br>方法：用户信息验证</li>
</ul>
<p><strong>要求：</strong><br>1、 设计构造函数实现对属性赋值<br>2、 设置私有属性，get/set方法实现对属性的访问<br>3、用户信息验证判断两个用户信息是否一致。当用户名和密码都一致的时候返回：用户名和密码一致，否则返回：用户名或密码不一致</p>
<p><strong>PS:</strong> 可以通过equals（）方法进行字符串内容的判断，如果内容相等返回值为true，反之为false，如当str代表用户性别时，可以通过如下代码，判断性别为“男”还是“女”<br><img src="en-resource://database/5504:1" alt="c92abbb2c30349af8b2c1790414eb81b.png"></p>
<p><strong>提示：</strong> 本次编程作业可以参考教辅区的《引用数据类型作为方法参数》教辅，建议看完教辅再来完成！</p>
<p><strong>原题</strong><br>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>{</span><br><span class="line">    <span class="comment">// 测试方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{ </span><br><span class="line">        <span class="comment">//实例化对象，调用相关方法实现运行效果</span></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>User.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>{</span><br><span class="line">    <span class="comment">//定义属性用户名、密码</span></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>UserManager.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserManager</span></span>{</span><br><span class="line">    <span class="comment">// 用户信息验证的方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">checkUser</span><span class="params">(User one, User two)</span> </span>{</span><br><span class="line">    <span class="comment">// 判断用户名和密码是否为空，是否一致</span></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答</strong><br>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="comment">// 测试方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//实例化对象，调用相关方法实现运行效果</span></span><br><span class="line">        User one=<span class="keyword">new</span> User(<span class="string">"Lucy"</span>,<span class="string">"123456"</span>);</span><br><span class="line">        User two=<span class="keyword">new</span> User(<span class="string">"Mike"</span>,<span class="string">"123456"</span>);</span><br><span class="line">        UserManager um=<span class="keyword">new</span> UserManager();</span><br><span class="line">        System.out.println(um.checkUser(one,two));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>User.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String username,pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username,String pwd)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.username=username;</span><br><span class="line">        <span class="keyword">this</span>.pwd=pwd;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>{}</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span></span>{</span><br><span class="line">    <span class="keyword">this</span>.username = username;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span></span>{</span><br><span class="line">    <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>UserManager.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserManager</span> </span>{</span><br><span class="line">    <span class="comment">// 用户信息验证的方法</span></span><br><span class="line">    <span class="comment">// 用户信息验证的方法，注意方法的返回值是一个字符串，需要有return，并且在主方法中需要有System输出.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">checkUser</span><span class="params">(User one, User two)</span> </span>{<span class="comment">//就是把实例化的2个new对象复制到这里面的参数进行比较返回结果</span></span><br><span class="line">        <span class="comment">// 判断用户名和密码是否为空，是否一致</span></span><br><span class="line">        <span class="keyword">if</span>(one.getUsername()==<span class="string">""</span>||one.getPwd()==<span class="string">""</span>||two.getUsername()==<span class="string">""</span>||two.getPwd()==<span class="string">""</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"用户名或密码不能为空！"</span>;</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"用户名"</span>+one.getUsername()+<span class="string">"\n密码："</span>+one.getPwd()+<span class="string">"\n用户名"</span>+two.getUsername()+<span class="string">"\n密码："</span>+two.getPwd());</span><br><span class="line">            System.out.println(<span class="string">"=============================="</span>);</span><br><span class="line">            <span class="keyword">if</span>((one.getUsername().equals(two.getUsername()))&amp;(one.getPwd().equals(two.getPwd()))){</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"用户名密码一致"</span>;</span><br><span class="line">            }<span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">return</span>  <span class="string">"用户名密码不一致"</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>建议同学创建无参构造，因当没有写构造方法，系统会默认添加一个无参构造，但是当写了有参构造后，系统不会再默认添加一个，如果只写了一个带参构造，假如有一个子类继承了它，一般子类的无参构造默认去调用的是父类的无参构造(而此时父类并没有无参构造)，这个时候就会报错了。所以建议同学把无参构造写上。</p>
<blockquote>
<h3 id="引用数据类型作为方法参数"><a href="#引用数据类型作为方法参数" class="headerlink" title="引用数据类型作为方法参数"></a>引用数据类型作为方法参数</h3><p>在之前的学习中，我们接触到很多方法的定义，大多是用基本数据类型作为方法参数。<br>其实数据类型分为基本数据类型和引用数据类型，像之前学习的 String 和数组，都是引用数据类型。下面我们就来看一下，如何用我们自定义的类作为方法参数类型。<br>在该案例中，将定义三个类，分别是 Cat、CatManage 和 CatTest，下面分别介绍一下这个三个类：<br>Cat 类：包括名字和年龄属性，以及属性相关的 get 和 set 方法。</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>{</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//名字。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;<span class="comment">//年龄。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<blockquote>
<p>CatManage 类，该类中有一个方法用于对 Cat 属性信息进行输出，方法参数类型是Cat 类型。</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatManage</span></span>{</span><br><span class="line">    <span class="comment">//用于输出Cat对象信息的方法，方法参数类型是引用数据类型Cat。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showCat</span><span class="params">(Cat cat)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"name:"</span>+cat.getName());</span><br><span class="line">        System.out.println(<span class="string">"age:"</span>+cat.getAge());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<blockquote>
<p>CatTest 类，测试类，对 Cat 和 CatManage 类的方法进行调用</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatTest</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        <span class="comment">//创建Cat对象。</span></span><br><span class="line">        Cat cat=<span class="keyword">new</span> Cat();</span><br><span class="line">        <span class="comment">//为名字属性赋值。</span></span><br><span class="line">        cat.setName(<span class="string">"huahua"</span>);</span><br><span class="line">        <span class="comment">//为年龄赋值。</span></span><br><span class="line">        cat.setAge(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//创建CatManage对象。</span></span><br><span class="line">        CatManage catManage=<span class="keyword">new</span> CatManage();</span><br><span class="line">        <span class="comment">//调用showCat()，cat对象作为参数传到方法中。</span></span><br><span class="line">        catManage.showCat(cat);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h3><h4 id="static关键字（基本概念）"><a href="#static关键字（基本概念）" class="headerlink" title="static关键字（基本概念）"></a>static关键字（基本概念）</h4><p>static关键字作用解释：</p>
<ul>
<li>表示静态的，用static修饰的成员我们称之为静态成员、也称为类成员（属于这个类的成员）。</li>
<li>无论这个类实例化多少个对象，都会共用同一个静态空间。<img src="en-resource://database/5509:1" alt="3871c96361373eb3cbc76bcf244898bd.png"></li>
</ul>
<p>对于普通的成员而言，当这个对象实例产生的时候，它的相关成员会产生，当这个对象销毁的时候，这些成员就会资源释放。</p>
<p>静态成员则不然，从类第一次加载的时候，它就会产生，一直到这个类不再有任何对象不再被使用，也就是他彻底的销毁的时候，静态成员才会进行资源的释放。</p>
<p>static：</p>
<ul>
<li>类对象共享</li>
<li>类加载时产生，销毁时释放，生命周期长静态成员。</li>
</ul>
<p>访问方式：</p>
<ul>
<li>对象.成员</li>
<li>类.成员</li>
</ul>
<p>推荐调用方式：类名.静态成员</p>
<h4 id="static关键字（调用方式）"><a href="#static关键字（调用方式）" class="headerlink" title="static关键字（调用方式）"></a>static关键字（调用方式）</h4><p>推荐调用方式：类名.静态成员</p>
<ul>
<li>可以有静态属性，静态方法，但是没有静态类（static+类 – 》 不存在。</li>
<li>static + 方法内的局部变量 – 》 也是不存在的。</li>
<li>在成员方法中，可以直接访问类中静态成员。</li>
<li>静态方法中不能直接访问同一个类中非静态成员，只能直接调用同一个类中的静态成员。只能通过对象实例化后，对象.成员方法的方式访问非静态成员。静态方法中不能使用this。</li>
<li><strong>非静态方法中可以直接调用同一个类中的非静态变量和静态变量，静态方法中只能直接调用同类中的静态成员，如果调用非静态成员，需要通过对象调用，类外调用静态方法时可以通过类名，也可以通过对象名，非静态方法在类外只能通过对象调用</strong><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.animal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 宠物猫类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MyPC</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//static+类 -- 》 不存在。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>{</span><br><span class="line">       <span class="comment">//成员属性：昵称、年龄、体重、品种。</span></span><br><span class="line">       <span class="comment">//修改属性的可见性----限定只能在当前类内访问。</span></span><br><span class="line">       <span class="keyword">private</span> String name;<span class="comment">//昵称。</span></span><br><span class="line">       <span class="keyword">int</span> mouth;<span class="comment">//年龄。</span></span><br><span class="line">       <span class="keyword">double</span> weight;<span class="comment">//体重。</span></span><br><span class="line">       String species;<span class="comment">//品种。</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//static:静态 静态成员 类成员。</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> price;<span class="comment">//售价。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>{</span><br><span class="line">             System.out.println(<span class="string">"我是宠物猫"</span>);</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">//创建get/set方法。</span></span><br><span class="line">       <span class="comment">//在get/set方法中添加对属性的限定（在方法当中写他对应的方法体）。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{ <span class="comment">//什么情况下需要返回值，什么情况下不需要？</span></span><br><span class="line">             <span class="keyword">this</span>.name=name;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{<span class="comment">//既然需要取值的，我们需要把这个属性带出去，那这里就需要方法的返回值类型了。对于要取值的方法，我们通常可以不加参数。</span></span><br><span class="line">             <span class="keyword">return</span> <span class="string">"我是一只名叫"</span>+<span class="keyword">this</span>.name+<span class="string">"的猫咪"</span>;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMouth</span><span class="params">()</span> </span>{</span><br><span class="line">                    <span class="keyword">return</span> mouth;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMouth</span><span class="params">(<span class="keyword">int</span> mouth)</span> </span>{</span><br><span class="line">             <span class="keyword">if</span>(mouth&lt;=<span class="number">0</span>) {</span><br><span class="line">                    System.out.println(<span class="string">"输入的信息错误，宠物猫的年龄必须大于0"</span>);</span><br><span class="line">             }<span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">this</span>.mouth = mouth;</span><br><span class="line">             }</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWeight</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> weight;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeight</span><span class="params">(<span class="keyword">double</span> weight)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.weight = weight;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getSpecies</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> species;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSpecies</span><span class="params">(String species)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.species = species;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">//成员方法：跑动、吃东西。</span></span><br><span class="line">       <span class="comment">//跑动方法。</span></span><br><span class="line">       <span class="comment">//成员方法当中，可以直接访问类中静态成员的。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">             eat();</span><br><span class="line">             <span class="keyword">this</span>.name=<span class="string">"妞妞"</span>;<span class="comment">//静态方法中不能使用this.因为this代表当前实例，static代表类共享。</span></span><br><span class="line">             <span class="keyword">this</span>.price=<span class="number">20</span>;<span class="comment">//静态方法中不能使用this.因为this代表当前实例，static代表类共享。</span></span><br><span class="line">             System.out.println(<span class="string">"售价是"</span>+Cat.price+<span class="string">"的"</span>+<span class="keyword">this</span>.name+<span class="string">"快跑。"</span>);<span class="comment">//静态方法中不能使用this.因为this代表当前实例，static代表类共享。</span></span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">//方法重载：同一个类中，相同方法名不同参数列表叫做重载。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String name)</span> </span>{</span><br><span class="line">             System.out.println(name+<span class="string">"快跑。"</span>);</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">//吃东西的方法。</span></span><br><span class="line">       <span class="comment">//static+方法 --》 类方法、静态方法。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">             <span class="comment">//静态方法中不能直接访问同一个类中的非静态成员（方法、属性），只能直接调用同一个类中的静态成员（方法、属性）。</span></span><br><span class="line">             <span class="comment">//只能通过对象实例化后，对象.成员方法的方式访问非静态成员。</span></span><br><span class="line">             Cat temp=<span class="keyword">new</span> Cat();</span><br><span class="line">             temp.run();</span><br><span class="line">             temp.name=<span class="string">"小小"</span>;</span><br><span class="line">             <span class="keyword">this</span>.name=<span class="string">"小小"</span>;<span class="comment">//静态方法中不能使用this.因为this代表当前实例，static代表类共享。</span></span><br><span class="line">             name=<span class="string">"小小"</span>;<span class="comment">//非静态成员（方法、属性）都不能再静态方法中直接访问。</span></span><br><span class="line">             price=<span class="number">1500</span>;</span><br><span class="line">             System.out.println(<span class="string">"小猫吃鱼。"</span>);</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.animal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatTest</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">       </span><br><span class="line">             <span class="comment">//对象实例化。</span></span><br><span class="line">             Cat one = <span class="keyword">new</span> Cat();</span><br><span class="line">             </span><br><span class="line">             <span class="comment">//测试</span></span><br><span class="line">             one.setName(<span class="string">"花花"</span>);</span><br><span class="line">             one.setMouth(<span class="number">2</span>);</span><br><span class="line">             one.setSpecies(<span class="string">"英国短毛猫"</span>);</span><br><span class="line">             </span><br><span class="line">             <span class="comment">//静态成员访问方式：1、对象.成员   2、类.成员</span></span><br><span class="line">             one.price=<span class="number">2000</span>;<span class="comment">//静态访问方法--对象.成员。</span></span><br><span class="line">             Cat.price=<span class="number">3000</span>;<span class="comment">//静态访问方法--类.成员。</span></span><br><span class="line"></span><br><span class="line">             one.eat();</span><br><span class="line">             Cat.eat();</span><br><span class="line">             Cat two=<span class="keyword">new</span> Cat();</span><br><span class="line">             two.setName(<span class="string">"凡凡"</span>);</span><br><span class="line">             two.setMouth(<span class="number">1</span>);</span><br><span class="line">             one.setSpecies(<span class="string">"中华田园猫"</span>);</span><br><span class="line">             one.price=<span class="number">150</span>;</span><br><span class="line">             </span><br><span class="line">             System.out.println(one.getName()+"的售价"+one.&lt;u&gt;price&lt;/u&gt;);</span><br><span class="line">             System.out.println(two.getName()+"的售价"+two.&lt;u&gt;price&lt;/u&gt;);</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h5 id="选择练习-3"><a href="#选择练习-3" class="headerlink" title="选择练习"></a>选择练习</h5></li>
</ul>
<p>以下代码运行结果为：（）.（选择一项）<br><img src="en-resource://database/5511:1" alt="5ff6a62d012942ea611aeecd515fe93d.png"><br>A.  编译出错。<br>B.  输出：c。<br>C.  编译正常，运行时报错。<br>D.  编译正常，运行时无输出结果。</p>
<p>正确答案： A<br>参考解析：本题中考查的说Java中的static关键字的应用，静态方法中不能直接访问同一个类中的非静态成员，所以会编译出错，A选项是正确的。</p>
<h5 id="选择练习-4"><a href="#选择练习-4" class="headerlink" title="选择练习"></a>选择练习</h5><p>下列关于static的说法不正确的是（）（选择一项）<br>A.  可以定义静态方法，但不能定义静态变量。<br>B.  class前不可以是用static作为修饰符。<br>C.  static可以把普通的成员方法变为一个静态方法。<br>D.  static可以把一个普通方法变为一个类方法。</p>
<p>正确答案： A<br>参考解析：本题考查static关键字的使用，static是可以修饰变量的，因此A选项的描述是错误的，故选A。</p>
<h5 id="选择练习-5"><a href="#选择练习-5" class="headerlink" title="选择练习"></a>选择练习</h5><p>关于静态方法和非静态方法，以下描述正确的是（）（选择一项）<br>A.  非静态方法只能访问非静态变量。<br>B.  静态方法既可以直接访问本类的静态变量，也可以直接访问本类的非静态变量。<br>C.  静态方法在类外只能通过类名来调用。<br>D.  非静态方法在类外只能通过对象来调用。</p>
<p>正确答案：D<br>参考解析：<br>本题考查静态方法和非静态方法的区别。关于Java中的非静态方法和静态方法中对于非静态变量和静态变量的使用，<strong>非静态方法中可以直接调用同一个类中的非静态变量和静态变量，</strong> 故A选项错误。但是<strong>静态方法中只能直接调用同类中的静态成员，如果调用非静态成员，需要通过对象调用，</strong> 故B选项错误。<strong>类外调用静态方法时可以通过类名，也可以通过对象名，</strong> 故C选项错误。<strong>非静态方法在类外只能通过对象调用，</strong> 故D选项正确。</p>
<h5 id="选择练习-6"><a href="#选择练习-6" class="headerlink" title="选择练习"></a>选择练习</h5><p>下面这段代码中，报错的地方原因是（）（选择两项）<br><img src="en-resource://database/5513:1" alt="f184f8b731c4f3f29d1c79635ccb9173.png"><br>A.  没有传入参数<br>B.  没有使用类方法来调用<br>C.  不能使用静态引用去访问非静态的方法<br>D.  只要实例化对象就不会报错了</p>
<p>正确答案： A,C<br>参考解析：本题考查静态方法，报错的原因是：不能在静态方法中，直接调用同类中的非静态方法。run()方法缺少参数传递。故A、C选项正确。</p>
<h4 id="static关键字（执行顺序）"><a href="#static关键字（执行顺序）" class="headerlink" title="static关键字（执行顺序）"></a>static关键字（执行顺序）</h4><p>普通代码块：</p>
<ul>
<li>按顺序执行，先出现先执行。</li>
</ul>
<p><img src="en-resource://database/5925:1" alt="36091132f29f612f465f154d9b415096.png"></p>
<p>构造代码块：</p>
<ul>
<li>直接在类中定义时，是构造代码块。</li>
<li>在创建对象时调用，优先于构造方法执行。</li>
<li>在同一个类当中可以有多个构造代码块，并按顺序执行，在构造方法执行之前完成调用。</li>
</ul>
<p><img src="en-resource://database/5927:1" alt="3fe5245cc5cc38a15c4fd70d2ff09333.png"><br><img src="en-resource://database/5929:1" alt="8c6328cd4c9f3b5dc31e094c5a39b744.png"></p>
<p>静态代码块：</p>
<ul>
<li>构造代码块前加static，构造代码块就会变为静态代码块。</li>
<li>类加载时调用，静态代码块优先于构造代码块执行。</li>
</ul>
<p><img src="en-resource://database/5933:1" alt="d617cf3f56648fe63bba0c314466d6f1.png"></p>
<ul>
<li>在同一个类中可以有多个静态代码块，并按顺序执行。</li>
<li>只希望加载一次的代码可以放在静态代码块中。</li>
</ul>
<p><img src="en-resource://database/5937:1" alt="f7f1f57ed8dc3b7b3312c0bf332daaf1.png"></p>
<p><img src="en-resource://database/5935:1" alt="fe2949064facd4ca2118e66bcc6cd10f.png"></p>
<p>既然Static是类共有的相关信息，那么当测试类当中创建了多个对象实例的时候，静态代码块会执行几次，构造代码块又会执行几次？</p>
<ul>
<li>静态代码块无论实例化多少个对象，只执行一次。</li>
<li>构造代码块会在每次实例化的时候，都会执行一次。</li>
<li>在普通代码块当中，可以给当前类当中的成员属性以及静态属性赋值赋值。</li>
<li>在静态代码块当中，只能给静态成员赋值，普通成员赋值是不被允许的。</li>
</ul>
<p><img src="en-resource://database/3099:1" alt="bff897bdbd4c2d8caac57cc676e45075.png"></p>
<p><strong>代码块相关知识演示</strong><br>Cat.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.animal;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 宠物猫类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MyPC</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//static+类 -- 》 不存在。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>{</span><br><span class="line">       <span class="comment">//成员属性：昵称、年龄、体重、品种。</span></span><br><span class="line">       <span class="comment">//修改属性的可见性----限定只能在当前类内访问。</span></span><br><span class="line">       <span class="keyword">private</span> String name;<span class="comment">//昵称。</span></span><br><span class="line">       <span class="keyword">int</span> mouth;<span class="comment">//年龄。</span></span><br><span class="line">       <span class="keyword">double</span> weight;<span class="comment">//体重。</span></span><br><span class="line">       String species;<span class="comment">//品种。</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//static:静态 静态成员 类成员。</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> price;<span class="comment">//售价。</span></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>{</span><br><span class="line">             System.out.println(<span class="string">"我是宠物猫"</span>);</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">//创建get/set方法。</span></span><br><span class="line">       <span class="comment">//在get/set方法中添加对属性的限定（在方法当中写他对应的方法体）。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{ <span class="comment">//什么情况下需要返回值，什么情况下不需要？</span></span><br><span class="line">             <span class="keyword">this</span>.name=name;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{<span class="comment">//既然需要取值的，我们需要把这个属性带出去，那这里就需要方法的返回值类型了。对于要取值的方法，我们通常可以不加参数。</span></span><br><span class="line">             <span class="keyword">return</span> <span class="string">"我是一只名叫"</span>+<span class="keyword">this</span>.name+<span class="string">"的猫咪"</span>;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMouth</span><span class="params">()</span> </span>{</span><br><span class="line">                    <span class="keyword">return</span> mouth;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMouth</span><span class="params">(<span class="keyword">int</span> mouth)</span> </span>{</span><br><span class="line">             <span class="keyword">if</span>(mouth&lt;=<span class="number">0</span>) {</span><br><span class="line">                    System.out.println(<span class="string">"输入的信息错误，宠物猫的年龄必须大于0"</span>);</span><br><span class="line">             }<span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">this</span>.mouth = mouth;</span><br><span class="line">             }</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       {</span><br><span class="line">             System.out.println(<span class="string">"我是构造代码块2"</span>);</span><br><span class="line">       }<span class="comment">//构造代码块。</span></span><br><span class="line">       </span><br><span class="line">       {</span><br><span class="line">             name=<span class="string">"妞妞"</span>;<span class="comment">//在普通代码块中，我们可以给当前类当中的成员属性和静态属性赋值。</span></span><br><span class="line">             price=<span class="number">130</span>;<span class="comment">//在普通代码块中，我们可以给当前类当中的成员属性和静态属性赋值。</span></span><br><span class="line">             System.out.println(<span class="string">"我是构造代码块1"</span>);</span><br><span class="line">       }<span class="comment">//构造代码块。</span></span><br><span class="line">       <span class="keyword">static</span>{<span class="comment">//由于Static访问的特殊性，静态代码块只会在类加载的时候访问一次，无论这个类后续会加载多少个实例化对象，静态代码块将不再执行。如果我们有些代码块只想加载一次，那么我们可以写在静态代码块中，来提高程序效率。</span></span><br><span class="line">             price=<span class="number">290</span>;<span class="comment">//在静态代码块中，只能给静态成员赋值。</span></span><br><span class="line"><span class="comment">//           name="小小";//在静态代码块中，给普通成员赋值是不允许的。</span></span><br><span class="line">             Cat temp=<span class="keyword">new</span> Cat();<span class="comment">//这点跟我们在讲静态成员之间的相互调用的原则是一样的，如果我们想要用它的话，也同样的需要先进行对象实例化。再通过“对象.属性”去访问。</span></span><br><span class="line">             temp.name=<span class="string">"小小"</span>;</span><br><span class="line">             System.out.println(<span class="string">"我是静态代码块1"</span>);</span><br><span class="line">       }<span class="comment">//静态代码块。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWeight</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> weight;</span><br><span class="line">       }</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeight</span><span class="params">(<span class="keyword">double</span> weight)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.weight = weight;</span><br><span class="line">       }</span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getSpecies</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> species;</span><br><span class="line">       }</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSpecies</span><span class="params">(String species)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.species = species;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">//成员方法：跑动、吃东西。</span></span><br><span class="line">       <span class="comment">//跑动方法。</span></span><br><span class="line">       <span class="comment">//成员方法当中，可以直接访问类中静态成员的。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">             eat();</span><br><span class="line"><span class="comment">//           this.name="妞妞";//静态方法中不能使用this.因为this代表当前实例，static代表类共享。</span></span><br><span class="line"><span class="comment">//           this.price=20;//静态方法中不能使用this.因为this代表当前实例，static代表类共享。</span></span><br><span class="line">             System.out.println(<span class="string">"售价是"</span>+Cat.price+<span class="string">"的"</span>+<span class="keyword">this</span>.name+<span class="string">"快跑。"</span>);<span class="comment">//静态方法中不能使用this.因为this代表当前实例，static代表类共享。</span></span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">//方法重载：同一个类中，相同方法名不同参数列表叫做重载。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String name)</span> </span>{</span><br><span class="line"></span><br><span class="line">             {</span><br><span class="line">                    System.out.println(<span class="string">"我是普通代码块1"</span>);</span><br><span class="line">             }<span class="comment">//普通代码块</span></span><br><span class="line">             </span><br><span class="line">             System.out.println(name+<span class="string">"快跑。"</span>);</span><br><span class="line">             {</span><br><span class="line">                    System.out.println(<span class="string">"我是普通代码块2"</span>);</span><br><span class="line">             }<span class="comment">//普通代码块</span></span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">//吃东西的方法。</span></span><br><span class="line">       <span class="comment">//static+方法 --》 类方法、静态方法。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">       </span><br><span class="line">             <span class="comment">//静态方法中不能直接访问同一个类中的非静态成员（方法、属性），只能直接调用同一个类中的静态成员（方法、属性）。</span></span><br><span class="line">             <span class="comment">//只能通过对象实例化后，对象.成员方法的方式访问非静态成员。</span></span><br><span class="line">             Cat temp=<span class="keyword">new</span> Cat();</span><br><span class="line">             temp.run();</span><br><span class="line">             temp.name=<span class="string">"小小"</span>;</span><br><span class="line"><span class="comment">//           this.name="小小";//静态方法中不能使用this.因为this代表当前实例，static代表类共享。</span></span><br><span class="line"><span class="comment">//           name="小小";//非静态成员（方法、属性）都不能再静态方法中直接访问。</span></span><br><span class="line">             price=<span class="number">1500</span>;</span><br><span class="line">             System.out.println(<span class="string">"小猫吃鱼。"</span>);</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>CatTest.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.animal;</span><br><span class="line"><span class="keyword">import</span> com.imooc.animal.Cat;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatTest</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             <span class="comment">//对象实例化。</span></span><br><span class="line">             Cat one = <span class="keyword">new</span> Cat();</span><br><span class="line">             Cat two = <span class="keyword">new</span> Cat();</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><img src="en-resource://database/5939:1" alt="91c8e1ea3b227b89080386d1878c46d0.png"></p>
<h5 id="编程练习-2"><a href="#编程练习-2" class="headerlink" title="编程练习"></a>编程练习</h5><p>请根据效果图以及任务要求完成代码。程序参考运行效果图如下：<br><img src="en-resource://database/5941:1" alt="15278e5c81f7af1d1bb00b992c4c7909.png"></p>
<p><strong>任务</strong><br>1.创建类Code，类中编写构造块、静态代码块以及构造方法<br>2.创建CodeBlock，类中编写的构造块、静态代码块以及构造方法<br>3.在主函数中测试他们的执行的优先顺序（运行结果参见效果图）</p>
<p><strong>原题</strong><br>CodeBlock.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeBlock</span></span>{</span><br><span class="line">   <span class="comment">// 创建CodeBlock的构造块</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建CodeBlock的静态代码块</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建CodeBlock的构造方法</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">      <span class="comment">//编写代码测试运行优先顺序，运行结果参见效果图    </span></span><br><span class="line">         </span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Code.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Code</span></span>{</span><br><span class="line">   <span class="comment">//创建外部类Code构造块（构造块） </span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建外部类Code静态代码块（静态代码块）</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建外部类Code构造方法（构造方法）</span></span><br><span class="line"></span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答</strong><br>CodeBlock.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.one;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeBlock</span> </span>{</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 创建CodeBlock的构造块</span></span><br><span class="line">       {</span><br><span class="line">             System.out.println(<span class="string">"CodeBlock的构造块"</span>);</span><br><span class="line">       }</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 创建CodeBlock的静态代码块</span></span><br><span class="line">       <span class="keyword">static</span>{</span><br><span class="line">             System.out.println(<span class="string">"CodeBlock的静态代码块"</span>);</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 创建CodeBlock的构造方法</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">CodeBlock</span><span class="params">()</span></span>{</span><br><span class="line">             System.out.println(<span class="string">"CodeBlock的构造方法"</span>);</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             <span class="comment">// 编写代码测试运行优先顺序，运行结果参见效果图</span></span><br><span class="line">             System.out.println(<span class="string">"CodeBlock的主方法"</span>);</span><br><span class="line">             System.out.println(<span class="string">"产生Code类实例对象"</span>);</span><br><span class="line">             Code one=<span class="keyword">new</span> Code();</span><br><span class="line">             System.out.println(<span class="string">"产生CodeBlock类实例对象"</span>);</span><br><span class="line">             CodeBlock two=<span class="keyword">new</span> CodeBlock();</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Code.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.one;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Code</span> </span>{</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 创建外部类Code构造块（构造块）</span></span><br><span class="line">       {</span><br><span class="line">             System.out.println(<span class="string">"Code的构造块"</span>);</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 创建外部类Code静态代码块（静态代码块）</span></span><br><span class="line">       <span class="keyword">static</span>{</span><br><span class="line">             System.out.println(<span class="string">"Code的静态代码块"</span>);</span><br><span class="line">       }</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 创建外部类Code构造方法（构造方法）</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Code</span><span class="params">()</span></span>{</span><br><span class="line">             System.out.println(<span class="string">"Code的构造方法"</span>);</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="static关键字（续）"><a href="#static关键字（续）" class="headerlink" title="static关键字（续）"></a>static关键字（续）</h4><p><strong>本节内容属于局部变量的使用，已掌握内化</strong><br><img src="en-resource://database/3103:1" alt="a64ebb83ad1d238e9975831760102959.png"><br>同时定义两个temp变量就会出现语法错误，提示重复定义temp变量。<br>       <img src="en-resource://database/3105:1" alt="9e1aaaaafa0a171ca756d46a99be98a1.png"><br>分别将两个独立的temp变量放在两个代码块当中。<br><img src="en-resource://database/3107:1" alt="0ea29f7f8611e53b84b06722a4c441a1.png"><br>打印输出temp值。<br>       <img src="en-resource://database/3109:1" alt="b2de551b09795dccecbd42fc77b18285.png"><br>按照就近原则，寻找最近的<br>temp<img src="en-resource://database/3111:1" alt="24f47360f22b58ebd524bc7f91210949.png"><br>中间输出temp值，提示无效变量。<br><img src="en-resource://database/3113:1" alt="db938ae4fc80f8976cf7f0928e2adf7a.png"><br>无效原因：<br>之所以能够在代码块1和代码块2中定义重复的temp变量，是因为在这段代码块结束的时候，代码块中的局部变量就会消失。<br><img src="en-resource://database/3115:1" alt="d1efb678ba18e855f97721819a01b64f.png"><br>换句话说这个temp赋值为12的变量，它的生存周期仅限于代码块1当中，当这个代码块大括号结束之后，这个temp变量它已经被系统回收了。<br><img src="en-resource://database/3117:1" alt="131f7ea7dffcb227a238a7f966a636c4.png"></p>
<p>同理，代码块二中temp变量作用周期也仅限于代码块2中。</p>
<p><img src="en-resource://database/3115:2" alt="d1efb678ba18e855f97721819a01b64f.png"></p>
<p>这就是为什么在中间调用temp变量无法被访问的原因。<br><img src="en-resource://database/3119:1" alt="1fb759a3aeffa5eba2bbed3149d31185.png"><br>如果在中间再定义一个temp值，则又提示重复定义变量。<br><img src="en-resource://database/3121:1" alt="554eaedad3b22b4c65cd84284ceb456d.png"><br>当在中间定义了一个temp整型变量之后，它的作用范围是从它定义的位置开始，一直到整个方法结束。因此在代码块2当中就不允许出现重名的变量了。<br><img src="en-resource://database/3123:1" alt="0bc401ba954bdd581a34695ab2274852.png"><br>同理，如果把整型变量从中间放到了方法体开始位置。<br><img src="en-resource://database/3125:1" alt="e98f59c78c28652d41418b7d0e7812dd.png"><br>它的影响范围变成如下所示：<br><img src="en-resource://database/3127:1" alt="c9bc7ec4fa276685f847d5cfaf75e5b8.png"><br>则代码块1和代码块2中都会出现报错提示。</p>
<h5 id="选择练习-7"><a href="#选择练习-7" class="headerlink" title="选择练习"></a>选择练习</h5><p>下面代码的运行结果是：（）（选择一项）<br><img src="en-resource://database/5943:1" alt="8ea102fb389f45d833e4ad5f316483a5.png"></p>
<p>A.  小红今年13岁了！<br>B.  小明今年18岁了！<br>C. 小明今年18岁了！null今年18岁了！<br>D. 小红今年18岁了！小明今年18岁了！</p>
<p>正确答案： C<br>参考解析：本题考查类的定义和使用。main方法中首先输出stu的最后传入参数，然后调用stu1，而stu1没有传入参数值，故第二行输出的是参数的初始值。而age是静态变量，共用一块存储空间，故age为18。因此C选项是正确的。</p>
</body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java基础通识1.3.7 多线程</title>
    <url>/posts/4008374211/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>什么是多线程。</li>
<li>线程的创建。</li>
<li>线程的状态和生命周期。</li>
<li>线程调度。</li>
<li>同步与锁死。</li>
</ul>
<a id="more"></a>

<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h4><p><strong>进程的概念</strong><br>     进程是指可执行程序并存放在计算机存储器的一个指令序列，它是一个动态执行的过程。</p>
<p><strong>什么是线程</strong></p>
<p>线程是比进程还要小的运行单位，一个进程包含多个线程。线程可以看做一个子程序。</p>
<h4 id="Thread类和Runnable接口介绍"><a href="#Thread类和Runnable接口介绍" class="headerlink" title="Thread类和Runnable接口介绍"></a>Thread类和Runnable接口介绍</h4><p><strong>线程的创建</strong></p>
<ul>
<li>创建一个Thread类，或者一个Thread子类的对象。</li>
<li>创建一个实现Runnable接口的类的对象。</li>
</ul>
<p><strong>《创建多线程的第三种方式》</strong></p>
<p>创建多线程共有三种方式：<br>1） 继承 Thread 类，重写 run()方法，run()方法代表线程要执行的任务。<br>2） 实现 Runnable 接口，重写 run()方法，run()方法代表线程要执行的任务。<br>3） 实现 callable 接口，重写 call()方法，call()作为线程的执行体，具有返回值，并且可以对异常进行声明和抛出；使用 start()方法来启动线程。</p>
<p>前两种在视频中都有详细介绍，此处将对第三种创建多线程的方式进行介绍：<br>1、 创建 Callable 接口的实现类，并实现 call()方法，该 call()方法将作为线程执行体，并且有返回值。<br>2、 创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask对象封装了该 Callable 对象的 call()方法的返回值。<br>3、 使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。<br>4、 调用 FutureTask 对象的 get()方法来获得子线程执行结束后的返回值。</p>
<p>示例代码 ：<br>1、 实现 Callable 接口，创建线程</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.thread;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThirdThread</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt;</span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>{</span><br><span class="line">        <span class="comment">// 方法类型可以根据要返回值的类型进行确认</span></span><br><span class="line">        String str = <span class="string">"多线程的第三种创建方式"</span>;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>2、 测试线程</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutrureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThirdThreadTest</span></span>{</span><br><span class="line">    Callable&lt;String&gt; call = <span class="keyword">new</span> ThirdThead();</span><br><span class="line">    FutureTask&lt;String&gt; ft = <span class="keyword">new</span> FutureTask&lt;&gt;(call);</span><br><span class="line">    Thread t3 = <span class="keyword">new</span> Thread(ft);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 启动线程</span></span><br><span class="line">    t3.start();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取Call方法的返回值：先启动线程才可以获取到all的返回值。</span></span><br><span class="line">    <span class="keyword">try</span>{</span><br><span class="line">        System.out.println(ft.get());</span><br><span class="line">    } <span class="keyword">catch</span> (InterruptedException | ExcutionException e){</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>运行结果：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">多线程的第三种创建方式</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>Thread类</strong></p>
<ul>
<li><p>Thread是一个线程类，位于java.lang包下。</p>
<table>
<thead>
<tr>
<th>构造方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Thread()</td>
<td>创建一个线程对象</td>
</tr>
<tr>
<td>Thread(String name)</td>
<td>创建一个具有指定名称的线程对象</td>
</tr>
<tr>
<td>Thread(Runnable target)</td>
<td>创建一个基于Runnable接口实现类的线程对象</td>
</tr>
<tr>
<td>Thread(Runnable target, String name)</td>
<td>创建一个基于Runnable接口实现类，并且具有指定名称的线程对象。</td>
</tr>
<tr>
<td>其他方法</td>
<td>其他方法</td>
</tr>
</tbody></table>
</li>
<li><p>Thread类的常用方法（仅列出部分常用方法）。</p>
<table>
<thead>
<tr>
<th>构造方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public void run()</td>
<td>线程相关的代码写在该方法中，一般需要重写</td>
</tr>
<tr>
<td>public void start()</td>
<td>启动线程的方法</td>
</tr>
<tr>
<td>public static void sleep(long m)</td>
<td>线程休眠m毫秒的方法</td>
</tr>
<tr>
<td>public void join()</td>
<td>优先执行调用join()方法的线程</td>
</tr>
<tr>
<td>其他方法</td>
<td>其他方法</td>
</tr>
</tbody></table>
</li>
</ul>
<p><strong>Runnable接口</strong></p>
<ul>
<li>只有一个方法run();</li>
<li>Runnable是Java中用以实现线程的接口。</li>
<li>任何实现线程功能的类都必须实现该接口。</li>
</ul>
<h4 id="多选题"><a href="#多选题" class="headerlink" title="多选题"></a>多选题</h4><p>选项中，哪两句的说法是错误的？（选择两项）</p>
<p>A.  线程是比进程还要小的运行单位。<br>B.  Thread类位于java.thread包下。<br>C.  run()方法用于启动线程。<br>D.  CPU使用时间片轮转的工作方式，可以让多个程序轮流占用CPU，达到同时运行的效果。</p>
<p>正确答案： B,C</p>
<p><strong>参考解析：</strong><br>本题考查线程的概念，B选项说法错误，Thread类位于java.lang包下，C选项说法错误，start()方法用于启动线程。故正确答案是B、C。</p>
<h3 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h3><h4 id="通过Thread类创建线程（上）"><a href="#通过Thread类创建线程（上）" class="headerlink" title="通过Thread类创建线程（上）"></a>通过Thread类创建线程（上）</h4><p><strong>线程创建</strong></p>
<ul>
<li>通过继承Thread类的方式创建线程类，重写run()方法。</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.thread;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>{</span><br><span class="line">             System.out.println(getName()+<span class="string">"该线程正在执行！"</span>);</span><br><span class="line">       }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             <span class="comment">//System.out.println("主线程1");</span></span><br><span class="line">             MyThread mt=<span class="keyword">new</span> MyThread();</span><br><span class="line">             mt.start();<span class="comment">//启动线程。</span></span><br><span class="line">             <span class="comment">//System.out.println("主线程2");</span></span><br><span class="line">             <span class="comment">//mt.start();线程不能多次启动。</span></span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a>单选题</h4><p>以下代码中，在划线处加入哪条语句能成功启动线程（）（选择一项）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// ThreadOne类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadOne</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"执行ThreadOne进程"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>{</span><br><span class="line">        ThreadOne one = <span class="keyword">new</span> ThreadOne();</span><br><span class="line">        ________________________________</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>A.  one.run( );<br>B.  one.start( );<br>C.  ThreadOne.start( );<br>D.  ThreadOne.run( );</p>
<p>正确答案： B</p>
<p><strong>参考解析：</strong><br>本题考查线程的启动，启动线程调用的是start( )方法，故B选项正确。</p>
<h4 id="通过Thread类创建线程（下）"><a href="#通过Thread类创建线程（下）" class="headerlink" title="通过Thread类创建线程（下）"></a>通过Thread类创建线程（下）</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.thread1;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span> </span>{</span><br><span class="line">             <span class="keyword">super</span>(name);</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++) {</span><br><span class="line">                    System.out.println(getName()+<span class="string">"正在运行"</span>+i);</span><br><span class="line">             }</span><br><span class="line">       }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             MyThread mt1=<span class="keyword">new</span> MyThread(<span class="string">"线程1"</span>);</span><br><span class="line">             MyThread mt2=<span class="keyword">new</span> MyThread(<span class="string">"线程2"</span>);</span><br><span class="line">             mt1.start();</span><br><span class="line">             mt2.start();</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<ul>
<li>线程运行顺序随机。</li>
</ul>
<h4 id="多选题-1"><a href="#多选题-1" class="headerlink" title="多选题"></a>多选题</h4><p>通过Thread类创建线程时要（）（选择三项）</p>
<p>A.  继承Thread类。<br>B.  在子类中重写run( )方法。<br>C.  实现Runnable接口。<br>D.  调用start( )方法启动线程。</p>
<p>正确答案： A,B,D</p>
<p><strong>参考解析：</strong><br>本题考查如何通过继承Thread类来创建和启动线程，通过Thread类创建线程，可以不实现接口Runnable。故ABD选项正确。</p>
<h4 id="2-5-编程练习（自由编程）"><a href="#2-5-编程练习（自由编程）" class="headerlink" title="2-5 编程练习（自由编程）"></a>2-5 编程练习（自由编程）</h4><p>自由编程</p>
<p>通过继承Thread类的方式创建线程，并在线程体中通过循环打印输出如演示效果所示的内容。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">打印机正在打印<span class="number">1</span></span><br><span class="line">打印机正在打印<span class="number">2</span></span><br><span class="line">打印机正在打印<span class="number">3</span></span><br><span class="line">打印机正在打印<span class="number">4</span></span><br><span class="line">打印机正在打印<span class="number">5</span></span><br><span class="line">打印机正在打印<span class="number">6</span></span><br><span class="line">打印机正在打印<span class="number">7</span></span><br><span class="line">打印机正在打印<span class="number">8</span></span><br><span class="line">打印机正在打印<span class="number">9</span></span><br><span class="line">打印机正在打印<span class="number">10</span></span><br></pre></td></tr></tbody></table></figure></div>


<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.thread1;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line">			System.out.println(<span class="string">"打印机正在打印"</span> + (i + <span class="number">1</span>));</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintTest</span> </span>{</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		PrintThread pt = <span class="keyword">new</span> PrintThread();</span><br><span class="line">		pt.run();</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="实现Runnable接口创建线程"><a href="#实现Runnable接口创建线程" class="headerlink" title="实现Runnable接口创建线程"></a>实现Runnable接口创建线程</h4><p>为什么要实现Runnable接口？</p>
<ul>
<li>Java不支持多继承。<ul>
<li>如果class类已经继承了一个类，再去继承thread类是不可能的，所以这时候我们需要一个接口来实现，因为接口可以同时实现多个接口。</li>
</ul>
</li>
<li>不打算重写Thread类的其他方法。<ul>
<li>如果继承父类就会继承父类的所有方法，对于线程来说，我们只需要重写run()方法就可以了，那么如果不打算重写thread类中其他方法，也可以使用实现接口的方式，从实际应用来看，实现runnable接口这种方式，应用的更广泛。</li>
</ul>
</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.runnable;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>{</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">             <span class="keyword">while</span>(i&lt;=<span class="number">10</span>){</span><br><span class="line">                 System.out.println(Thread.currentThread().gerName()+<span class="string">"正在运行！"</span>);</span><br><span class="line">             }</span><br><span class="line">       }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             PrintRunnable pr=<span class="keyword">new</span> PrintRunnable();</span><br><span class="line">             Thread t1=<span class="keyword">new</span> Thread(pr);</span><br><span class="line">             t1.start();</span><br><span class="line">             PrintRunnable pr1=<span class="keyword">new</span> PrintRunnable();</span><br><span class="line">             Thread t2=<span class="keyword">new</span> Thread(pr1);</span><br><span class="line">             t2.start();</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>视频最后代码有变化讲解。</p>
<h4 id="2-7-选择练习"><a href="#2-7-选择练习" class="headerlink" title="2-7 选择练习"></a>2-7 选择练习</h4><p>单选题<br>用Runnable接口创建线程的主要工作如下，它们正确的先后顺序为（）（选择一项）<br>1） 通过实现类的对象创建线程类的对象<br>2） 声明实现Runnable接口的类<br>3） 调用start()方法启动线程<br>4） 创建实现类的对象<br>5） 在实现类内实现run()方法</p>
<p>A.  1-4-2-5-3<br>B.  2-1-4-5-3<br>C.  2-5-4-1-3<br>D.  1-5-2-4-3</p>
<p>正确答案： C</p>
<p><strong>参考解析：</strong><br>本题考查通过实现Runnable接口的方式创建线程，用Runnable接口创建线程的主要工作为声明实现Runnable接口的类，在实现类内实现run（）方法，创建实现类的对象，通过实现类的对象创建线程类的对象，调用start（）方法启动线程。故C选项正确。</p>
<h4 id="2-8-编程练习（自由编程）"><a href="#2-8-编程练习（自由编程）" class="headerlink" title="2-8 编程练习（自由编程）"></a>2-8 编程练习（自由编程）</h4><p>自由编程</p>
<p>1、通过实现Runnable接口的方式创建线程类Cat和Dog，run()方法实现的功能为：加入一个循环长度为3的for循环，分别循环输出信息“A cat”和“A dog”。<br>2、在测试类中分别创建Cat和Dog类的对象，启动两个线程。<br>3、在测试类中创建一个循环长度为3的for循环，打印输出信息“main thread”。<br>效果图:<br>运行结果不唯一：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">main thread</span><br><span class="line">main thread</span><br><span class="line">main thread</span><br><span class="line">Thread-1A dog</span><br><span class="line">Thread-1A dog</span><br><span class="line">Thread-1A dog</span><br><span class="line">Thread-0A dog</span><br><span class="line">Thread-0A dog</span><br><span class="line">Thread-0A dog</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>Test.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">  </span><br><span class="line">  Cat obj1=<span class="keyword">new</span> Cat();</span><br><span class="line">  Dog obj2=<span class="keyword">new</span> Dog();</span><br><span class="line">  Thread obj3=<span class="keyword">new</span> Thread(obj1);</span><br><span class="line">  Thread obj4=<span class="keyword">new</span> Thread(obj2);</span><br><span class="line">  obj3.start();</span><br><span class="line">  obj4.start();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) {</span><br><span class="line">   System.out.println(<span class="string">"main thread"</span>);</span><br><span class="line">  }</span><br><span class="line"> }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>Cat.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) {</span><br><span class="line">   System.out.println(getName()+<span class="string">"A cat"</span>);</span><br><span class="line">  }</span><br><span class="line"> }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>Dog.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) {</span><br><span class="line">			System.out.println(getName()+<span class="string">"A dog"</span>);</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h3><h4 id="线程的状态和生命周期"><a href="#线程的状态和生命周期" class="headerlink" title="线程的状态和生命周期"></a>线程的状态和生命周期</h4><p><strong>线程的状态</strong></p>
<ul>
<li>新建（New）<ul>
<li>当创建Thread或Thread子类对象的时候，线程就进入了新建状态。</li>
</ul>
</li>
<li>可运行（Runnable）<ul>
<li>当已经创建好的线程对象，调用start方法，就进入了可运行状态（也称就绪状态）。</li>
</ul>
</li>
<li>正在运行（Running）<ul>
<li>一个处于可运行状态的线程，获取了CPU的使用权，就可以立刻进入“正在运行状态”。</li>
</ul>
</li>
<li>阻塞（Blocked）<ul>
<li>当线程遇到干扰的时候，就会进入阻塞状态。</li>
</ul>
</li>
<li>终止（Dead）</li>
</ul>
<p><strong>线程的生命周期</strong></p>
<p><img src="en-resource://database/3585:1" alt="4b0c71bd1be6dd02a70a90442355d53d.png"></p>
<h4 id="多选题-2"><a href="#多选题-2" class="headerlink" title="多选题"></a>多选题</h4><p>关于线程的状态和生命周期的说法，正确的是？（选择两项）</p>
<p>A.  只有获取到CPU的使用权，线程才能从可运行状态转为正在运行状态。<br>B.  调用start()方法可以使线程处于可运行状态。<br>C.  如果正在运行的线程异常终止，则线程会处于阻塞状态。<br>D.  一个正在运行的线程，调用join()方法，则会处于终止状态。</p>
<p>正确答案： A,B</p>
<p><strong>参考解析：</strong><br>本题考查线程的状态和生命周期，A、B选项正确。C选项错误，如果正在运行的线程异常中止，则线程会处于终止状态；D选项错误，一个正在运行的线程，调用join()方法，则会处于阻塞状态。</p>
<h4 id="sleep方法的使用"><a href="#sleep方法的使用" class="headerlink" title="sleep方法的使用"></a>sleep方法的使用</h4><ul>
<li>Thread类的方法。<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millis)</span></span></span><br></pre></td></tr></tbody></table></figure></div></li>
<li>作用：在指定的毫秒数内让正在执行的线程休眠（暂停执行）。</li>
<li>参数为休眠的时间，单位是毫秒。1秒 =1000 毫秒(ms) ；1 毫秒 = 1000微秒(us)；1微秒 = 1000纳秒(ns)；1纳秒 = 1000皮秒(ps)。</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.runnable;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>{</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">30</span>;i++) {</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">"执行第"</span>+i+<span class="string">"次！"</span>);</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                           Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    }<span class="keyword">catch</span>(InterruptedException e) {</span><br><span class="line">                           e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line">             }</span><br><span class="line">       }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SleepDemo</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             MyThread mt=<span class="keyword">new</span> MyThread();</span><br><span class="line">             Thread t=<span class="keyword">new</span> Thread(mt);</span><br><span class="line">             t.start();</span><br><span class="line">             Thread t1=<span class="keyword">new</span> Thread(mt);</span><br><span class="line">             t1.start();</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>视频部分有非常多的口头代码分析未记录。</p>
<h4 id="单选题-1"><a href="#单选题-1" class="headerlink" title="单选题"></a>单选题</h4><p>以下说法错误的是？（选择一项）</p>
<p>A.  sleep方法的参数是以毫秒为单位的<br>B.  使用实现Runnable接口的方式创建线程，一定要重写run方法<br>C.  当创建线程对象，线程即进入创建状态<br>D.  调用sleep方法时，不需要处理异常</p>
<p>正确答案： D</p>
<p><strong>参考解析：</strong><br>本题考查sleep()方法的使用，调用sleep方法时，需要处理异常，故D选项的说法是错误的。</p>
<h4 id="单选题-2"><a href="#单选题-2" class="headerlink" title="单选题"></a>单选题</h4><p>关于下列代码，说法正确的是（）（选择一项）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 实现类MyThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>,i++){</span><br><span class="line">            System.out.println(<span class="string">"正在运行"</span>+i);</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        MyThread m = <span class="keyword">new</span> MyThread();</span><br><span class="line">        Thread th = <span class="keyword">new</span> Thread( m );</span><br><span class="line">        th.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>A.  运行结果为：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">正在运行<span class="number">0</span></span><br><span class="line">正在运行<span class="number">1</span></span><br><span class="line">正在运行<span class="number">2</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>B.  运行结果为：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">Thread-<span class="number">0</span>正在运行<span class="number">0</span></span><br><span class="line">Thread-<span class="number">0</span>正在运行<span class="number">1</span></span><br><span class="line">Thread-<span class="number">0</span>正在运行<span class="number">2</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>C.  编译错误，sleep( )方法不能写在run( )方法体中。<br>D.  编译错误，调用sleep()方法时需要捕获异常。</p>
<p>正确答案： D</p>
<p><strong>参考解析：</strong><br>本题考查sleep()放的调用。sleep( )方法在调用时需要捕获一个中断异常，故D选项正确。</p>
<h4 id="编程练习（自由编程）"><a href="#编程练习（自由编程）" class="headerlink" title="编程练习（自由编程）"></a>编程练习（自由编程）</h4><p>利用线程输出“a~z”的26个字母（横向输出），要求每隔一秒钟输出一个字母<br>效果图:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">abcdefghijklmnopqrstuvwxyz</span><br></pre></td></tr></tbody></table></figure></div>
<p>（每隔一秒钟输出一个字母）<br>任务要求：</p>
<ol>
<li>创建实现类Letter，它实现Runnable接口<br>定义一个char类型的数组letter[ ]来存放26个字母</li>
</ol>
<p>   方法：</p>
<p>   1）创建无参构造方法对数组中元素进行循环赋值。<br>   2）重写run( )方法，再建立一个循环，循环中实现每隔一秒打印输出一个字母。</p>
<ol start="2">
<li>创建测试类，创建Letter类的对象，再通过Letter类的对象创建线程类的对象，然后启动线程</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeterTwo</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>{</span><br><span class="line">    <span class="keyword">char</span> letter[] = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LeterTwo</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++){</span><br><span class="line">            letter[i]=(<span class="keyword">char</span>)(i+<span class="number">97</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> c:letter){</span><br><span class="line">                System.out.print(c);</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        LeterTwo l = <span class="keyword">new</span> LeterTwo();</span><br><span class="line">        Thread t1 =<span class="keyword">new</span> Thread(l);</span><br><span class="line">        t1.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">=========================================第二种方法</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leter</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">97</span>;i&lt;=<span class="number">122</span>;i++){</span><br><span class="line">            <span class="keyword">char</span> c =(<span class="keyword">char</span>) i;</span><br><span class="line">            System.out.print(c);</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Leter l = <span class="keyword">new</span> Leter();</span><br><span class="line">        Thread t1 =<span class="keyword">new</span> Thread(l);</span><br><span class="line">        t1.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="join方法的使用"><a href="#join方法的使用" class="headerlink" title="join方法的使用"></a>join方法的使用</h4><ul>
<li>Thread类的方法。<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">()</span></span></span><br></pre></td></tr></tbody></table></figure></div>
作用：等待调用该方法的线程结束后才能执行。它是一种抢占资源的方式。</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">long</span> millis)</span></span></span><br></pre></td></tr></tbody></table></figure></div>
<p>作用：等待该线程终止的最长时间为millis毫秒。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.join;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">             System.out.println(getName()+<span class="string">"正在执行！"</span>+i+<span class="string">"次！"</span>);</span><br><span class="line">       }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinDemo</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             MyThread mt=<span class="keyword">new</span> MyThread();</span><br><span class="line">             mt.start();</span><br><span class="line">             <span class="keyword">try</span> {</span><br><span class="line">                    mt.join();</span><br><span class="line">             } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">             }</span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;i++) {</span><br><span class="line">                    System.out.println(<span class="string">"主线程运行第"</span>+i+<span class="string">"次！"</span>);</span><br><span class="line">             }</span><br><span class="line">             System.out.println(<span class="string">"主线程运行结束！"</span>);</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="多选题-3"><a href="#多选题-3" class="headerlink" title="多选题"></a>多选题</h4><p>下列关于Thread类中的join( )方法说法错误的是（）（选择两项）</p>
<p>A.  调用join( )方法可以使其他线程由正在运行状态变成阻塞状态<br>B.  join( )方法可以通过Thread类名直接访问<br>C.  子类中可以重写join( )方法<br>D.  join( )方法的作用是等待调用该方法的线程结束后才能执行</p>
<p>正确答案： B,C</p>
<p><strong>参考解析：</strong><br>本题考查join()方法的使用。<br>B选项的说法错误，join()方法不是静态方法，所以不能通过Thread类名直接访问<br>C选项的说法错误，join()方法是最终方法，它不能够被重写<br>故正确答案是B、C</p>
<h4 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h4><ul>
<li>Java为线程类提供了10个优先级。</li>
<li>优先级可以用整数1-10表示，超过范围会抛出异常。</li>
<li>主线程默认优先级为5。</li>
<li>优先级常量也可以表示线程的优先级。<ul>
<li>MAX_PRIORITY:线程的最高优先级10。</li>
<li>MIN_PRIORITY:线程的最低优先级1。</li>
<li>NORM_PRIORITY:线程的默认优先级5。</li>
</ul>
</li>
</ul>
<p>优先级相关的方法。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public int getPriority()</td>
<td>获取线程优先级的方法。返回值是个整数</td>
</tr>
<tr>
<td>public void setPriority(int newPriority)</td>
<td>设置线程优先级的方法</td>
</tr>
</tbody></table>
<p>注意：线程优先级的设置导致的实际运行优先与否与cup、操作系统等多种环境共同作用影响，需要综合考虑相关问题。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.priority;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>{</span><br><span class="line">       <span class="keyword">private</span> String name;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span></span>{</span><br><span class="line">             <span class="keyword">this</span>.name=name;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>{</span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">50</span>;i++){</span><br><span class="line">                    System.out.println(<span class="string">"线程"</span>+name+<span class="string">"正在运行"</span>+i);</span><br><span class="line">             }</span><br><span class="line">       }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityDemo</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             <span class="comment">//获取主线程的优先级</span></span><br><span class="line">             <span class="keyword">int</span> mainPriority=Thread.currentThread().getPriority();</span><br><span class="line">             <span class="comment">//System.out.println("主线程的优先级为："+mainPriority);</span></span><br><span class="line">             MyThread mt1=<span class="keyword">new</span> MyThread(<span class="string">"线程1"</span>);</span><br><span class="line">             MyThread mt2=<span class="keyword">new</span> MyThread(<span class="string">"线程2"</span>);</span><br><span class="line">             <span class="comment">//mt1.setPriority(10);</span></span><br><span class="line">             mt1.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">             mt2.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line">             mt2.start();</span><br><span class="line">             mt1.start();</span><br><span class="line">             <span class="comment">//System.out.println("线程1的优先级为："+mt1.getPriority());</span></span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="单选题-3"><a href="#单选题-3" class="headerlink" title="单选题"></a>单选题</h4><p>下列说法正确的是（）（选择一项）</p>
<p>A.  设置优先级的方法为public int setPriority(int n)<br>B.  优先级可用1-10的整数表示<br>C.  获取优先级的方法是public void getPriority( )<br>D.  在Java中，优先级高的线程一定会比优先级低的线程先运行</p>
<p>正确答案： B</p>
<p><strong>参考解析：</strong><br>本题考查线程的优先级，设置优先级的方法的返回值为void，获取优先级的方法的返回值为int。在Java中，受到多种因素影响，优先级高的线程不一定会先执行。故只有B选项的说法是正确的。</p>
<h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><p>多线程运行问题</p>
<ul>
<li><p>各个线程是通过竞争CPU时间而获得运行机会的。</p>
</li>
<li><p>各线程什么时候得到CPU时间，占用多久，是不可预测的。</p>
</li>
<li><p>一个正在运行着的线程在什么地方被暂停是不确定的。</p>
</li>
</ul>
<p><strong>银行存取款问题</strong></p>
<ul>
<li>为了保证在存款或取款的时候，不允许其他线程对账户余额进行操作。</li>
<li>需要将Bank对象进行锁定。</li>
<li>使用关键字synchronize实现。</li>
</ul>
<p><strong>同步（或者叫互斥）</strong></p>
<ul>
<li>synchronized关键字用在<ul>
<li>成员方法</li>
<li>静态方法</li>
<li>语句块</li>
</ul>
</li>
</ul>
<p>public synchronized void saveAccount(){}</p>
<p>public static synchronized void saveAccount(){}</p>
<p>synchronized(obj){…}</p>
<p><strong>Bank.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.bank;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bank</span> </span>{</span><br><span class="line">       <span class="keyword">private</span> String account;<span class="comment">// 账号</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">int</span> balance;<span class="comment">// 账户余额</span></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Bank</span><span class="params">(String account, <span class="keyword">int</span> balance)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.account = account;</span><br><span class="line">             <span class="keyword">this</span>.balance = balance;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getAccount</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> account;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccount</span><span class="params">(String account)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.account = account;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBalance</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> balance;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBalance</span><span class="params">(<span class="keyword">int</span> balance)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.balance = balance;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> <span class="string">"Bank [账号："</span> + account + <span class="string">", 余额："</span> + balance + <span class="string">"]"</span>;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 存款</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="comment">// 获取当前的账号余额</span></span><br><span class="line">             <span class="keyword">int</span> balance = getBalance();</span><br><span class="line">             <span class="keyword">try</span> {</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">             } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">             }</span><br><span class="line">             <span class="comment">// 修改余额，存100元</span></span><br><span class="line">             balance += <span class="number">100</span>;</span><br><span class="line">             <span class="comment">// 修改账户余额</span></span><br><span class="line">             setBalance(balance);</span><br><span class="line">             <span class="comment">// 输出存款后的账户余额</span></span><br><span class="line">             System.out.println(<span class="string">"存款后的账户余额为："</span> + balance);</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawAccount</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">synchronized</span> (<span class="keyword">this</span>) {</span><br><span class="line">                    <span class="comment">// 在不同的位置处添加sleep方法</span></span><br><span class="line">                    <span class="comment">// 获得当前的帐户余额</span></span><br><span class="line">                    <span class="keyword">int</span> balance = getBalance();</span><br><span class="line">                    <span class="comment">// 修改余额，取200</span></span><br><span class="line">                    balance = balance - <span class="number">200</span>;</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                           Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                           e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line">                    <span class="comment">// 修改帐户余额</span></span><br><span class="line">                    setBalance(balance);</span><br><span class="line">                    System.out.println(<span class="string">"取款后的帐户余额："</span> + balance);</span><br><span class="line">             }</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>DrawAccount.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.bank;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取款</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawAccount</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>{</span><br><span class="line">       Bank bank;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">DrawAccount</span><span class="params">(Bank bank)</span></span>{</span><br><span class="line">             <span class="keyword">this</span>.bank=bank;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">             bank.drawAccount();</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>SaveAccount.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.bank;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存款</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaveAccount</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>{</span><br><span class="line">       Bank bank;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">SaveAccount</span><span class="params">(Bank bank)</span></span>{</span><br><span class="line">             <span class="keyword">this</span>.bank=bank;</span><br><span class="line">       }</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>{</span><br><span class="line">             bank.saveAccount();</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>Test.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.bank;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             <span class="comment">// 创建帐户，给定余额为1000</span></span><br><span class="line">             Bank bank=<span class="keyword">new</span> Bank(<span class="string">"1001"</span>,<span class="number">1000</span>);</span><br><span class="line">             <span class="comment">//创建线程对象</span></span><br><span class="line">             SaveAccount sa=<span class="keyword">new</span> SaveAccount(bank);</span><br><span class="line">             DrawAccount da=<span class="keyword">new</span> DrawAccount(bank);</span><br><span class="line">             Thread save=<span class="keyword">new</span> Thread(sa);</span><br><span class="line">             Thread draw=<span class="keyword">new</span> Thread(da);</span><br><span class="line">             save.start();</span><br><span class="line">             draw.start();</span><br><span class="line">             <span class="keyword">try</span> {</span><br><span class="line">                    draw.join();</span><br><span class="line">                    save.join();</span><br><span class="line">             } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">             }</span><br><span class="line">             System.out.println(bank);</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="多选题-4"><a href="#多选题-4" class="headerlink" title="多选题"></a>多选题</h4><p>运行下列代码，结果是（）（选择两项）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// Barber(理发师)类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Barber</span> </span>{</span><br><span class="line">    <span class="comment">// 洗头发</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wash</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"打湿头发"</span>);</span><br><span class="line">        System.out.println(<span class="string">"洗头发"</span>);</span><br><span class="line">        System.out.println(<span class="string">"冲洗"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 剪头发</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>{</span><br><span class="line">    System.out.println(<span class="string">"剪短"</span>);</span><br><span class="line">    System.out.println(<span class="string">"烫发"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">// Cut类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cut</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line">    Barber b;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cut</span><span class="params">(Barber b)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.b=b;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>{</span><br><span class="line">        b.cut();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// Wash类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wash</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line">    Barber b;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Wash</span><span class="params">(Barber b)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.b=b;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>{</span><br><span class="line">        b.wash();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>{</span><br><span class="line">        Barber b=<span class="keyword">new</span> Barber();</span><br><span class="line">        Cut cut=<span class="keyword">new</span> Cut(b);</span><br><span class="line">        Wash wash=<span class="keyword">new</span> Wash(b);</span><br><span class="line">        </span><br><span class="line">        Cut.start();</span><br><span class="line">        wash.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>A</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">剪短</span><br><span class="line">打湿头发</span><br><span class="line">烫发</span><br><span class="line">洗头水</span><br><span class="line">冲洗</span><br></pre></td></tr></tbody></table></figure></div>
<p>B</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">剪短</span><br><span class="line">烫发</span><br><span class="line">打湿头发</span><br><span class="line">洗头水</span><br><span class="line">冲洗</span><br></pre></td></tr></tbody></table></figure></div>
<p>C</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">打湿头发</span><br><span class="line">洗头水</span><br><span class="line">冲洗</span><br><span class="line">剪短</span><br><span class="line">烫头</span><br></pre></td></tr></tbody></table></figure></div>
<p>D</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">剪短</span><br><span class="line">打湿头发</span><br><span class="line">洗头水</span><br><span class="line">冲洗</span><br><span class="line">烫发</span><br></pre></td></tr></tbody></table></figure></div>


<p>正确答案： B,C</p>
<p><strong>参考解析：</strong><br>本题考查线程同步，synchronized关键字保证共享对象b在同一时刻只能被一个线程访问，所以可以保证cut和wash方法不会在运行还未结束时被打断。但是由于线程的执行顺序是随机的，所以两个方法的执行顺序也是随机的。故BC选项均正确。</p>
<h4 id="单选题-4"><a href="#单选题-4" class="headerlink" title="单选题"></a>单选题</h4><p>下列对关键字synchronized说法不正确的是（）（选择一项）</p>
<p>A.  synchronized（同步），即协调不同线程之间的工作。<br>B.  synchronized关键字可以用在成员方法中。<br>C.  保证多个线程可以同时执行和结束。<br>D.  保证共享对象在同一时刻只能被一个线程访问。</p>
<p>正确答案： C</p>
<p><strong>参考解析：</strong><br>本题考查synchronized关键字的使用，synchronized关键字保证共享对象在同一时刻只能被一个线程访问，但它不能保证多个线程可以同时执行和结束，故C选项正确。</p>
<h3 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h3><p>问题：账户余额不够了怎么办？<br>等待存入足够的钱后处理。</p>
<ul>
<li>wait()方法：中断方法的执行，使线程等待。处于阻塞状态。</li>
<li>notify()方法：唤醒处于等待的某一个线程，使其结束等待。</li>
<li>notifyAll()方法：唤醒所有处于等待的线程，使它们结束等待。</li>
</ul>
<p><strong>Queue</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>{</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">       <span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>{ <span class="comment">// 设置同步</span></span><br><span class="line">             <span class="keyword">if</span>(!flag){</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                           wait();</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                           e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line">             }</span><br><span class="line"></span><br><span class="line">             System.out.println(<span class="string">"消费："</span>+n);</span><br><span class="line">             flag=<span class="keyword">false</span>;<span class="comment">//消费完毕，容器中没有数据。</span></span><br><span class="line">             notifyAll(); <span class="comment">// 通常唤醒全部。</span></span><br><span class="line">             <span class="keyword">return</span> n;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{ <span class="comment">// 设置同步</span></span><br><span class="line">             <span class="keyword">if</span>(flag){</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                           wait();</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                           e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line">             }</span><br><span class="line"></span><br><span class="line">             System.out.println(<span class="string">"生产："</span>+n);</span><br><span class="line">             <span class="keyword">this</span>.n = n;</span><br><span class="line">             flag=<span class="keyword">true</span>;<span class="comment">//生产完毕，容器中已经有数据</span></span><br><span class="line">             notifyAll();</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<p><strong>Producer</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>{</span><br><span class="line">       Queue queue;</span><br><span class="line">       Producer(Queue queue){</span><br><span class="line">             <span class="keyword">this</span>.queue=queue;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">             <span class="keyword">while</span>(<span class="keyword">true</span>){</span><br><span class="line">                    queue.set(i++);</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                           Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                           <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                           e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line">             }</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<p><strong>Consumer</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>{</span><br><span class="line">       Queue queue;</span><br><span class="line">       Consumer(Queue queue){</span><br><span class="line">             <span class="keyword">this</span>.queue=queue;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">while</span>(<span class="keyword">true</span>){</span><br><span class="line">                    queue.get();</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                           Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                           e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line">             }</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>Test</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             Queue queue=<span class="keyword">new</span> Queue();</span><br><span class="line">             <span class="keyword">new</span> Thread(<span class="keyword">new</span> Producer(queue)).start();</span><br><span class="line">             <span class="keyword">new</span> Thread(<span class="keyword">new</span> Consumer(queue)).start();</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="单选题-5"><a href="#单选题-5" class="headerlink" title="单选题"></a>单选题</h4><p>以下说法错误的是？（选择一项）</p>
<p>A. wait()方法用于使线程等待<br>B. notify()方法用于唤醒一个线程<br>C. notifyAll()方法用于唤醒多个线程<br>D. 使用wait()方法阻塞的线程，可以不用唤醒</p>
<p>正确答案： D</p>
<p><strong>参考解析：</strong><br>本题考查wait()、notify()和notifyAll()方法。使用wait()方法阻塞的线程，必须用notify()或notifyAll()方法进行唤醒，故D选项的说法是错误的。</p>
<h4 id="编程练习（自由编程）-1"><a href="#编程练习（自由编程）-1" class="headerlink" title="编程练习（自由编程）"></a>编程练习（自由编程）</h4><p>学习了Java多线程的知识以后，我们编写一个应用程序来读取天气数据。即，模拟通过大气温度传感器来获取温度和湿度等天气数据。<br>很多家庭都有温湿度计，它实际上是通过大气温度传感器来获取温度和湿度信息，并显示在表盘中的。而我们要做的程序就是模拟这个过程，生成天气数据，然后显示出来。</p>
<p>需求分析：<br>1、设计一个天气类Weather，用于温度和湿度数据的存放和读取。<br>2、设计一个线程类GenerateWeather，用于生成天气数据。模拟生成100次天气数据，每次生成天气数据需要5秒的时间。<br>3、设计一个线程类ReadWeather，用于读取天气数据。模拟读取100次天气数据，每次读取数据需要0.1秒的时间。<br>4、设计一个测试类WeatherTest，模拟生成和读取数据的过程，要求实现生成一次，紧接着进行读取，不能出现不同步的情况。<br>效果演示（部分截图）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">生成天气数据[温度：<span class="number">32</span>，湿度：<span class="number">26</span>]</span><br><span class="line">读取天气数据[温度：<span class="number">32</span>，湿度：<span class="number">26</span>]</span><br><span class="line">生成天气数据[温度：<span class="number">19</span>，湿度：<span class="number">49</span>]</span><br><span class="line">读取天气数据[温度：<span class="number">19</span>，湿度：<span class="number">49</span>]</span><br><span class="line">生成天气数据[温度：<span class="number">1</span>，湿度：<span class="number">69</span>]</span><br><span class="line">读取天气数据[温度：<span class="number">1</span>，湿度：<span class="number">69</span>]</span><br><span class="line">生成天气数据[温度：<span class="number">14</span>，湿度：<span class="number">17</span>]</span><br><span class="line">读取天气数据[温度：<span class="number">14</span>，湿度：<span class="number">17</span>]</span><br><span class="line">生成天气数据[温度：<span class="number">27</span>，湿度：<span class="number">30</span>]</span><br><span class="line">读取天气数据[温度：<span class="number">27</span>，湿度：<span class="number">30</span>]</span><br><span class="line">生成天气数据[温度：<span class="number">24</span>，湿度：<span class="number">33</span>]</span><br><span class="line">读取天气数据[温度：<span class="number">24</span>，湿度：<span class="number">33</span>]</span><br><span class="line">生成天气数据[温度：<span class="number">24</span>，湿度：<span class="number">16</span>]</span><br><span class="line">读取天气数据[温度：<span class="number">24</span>，湿度：<span class="number">16</span>]</span><br><span class="line">生成天气数据[温度：<span class="number">5</span>，湿度：<span class="number">15</span>]</span><br><span class="line">读取天气数据[温度：<span class="number">5</span>，湿度：<span class="number">15</span>]</span><br></pre></td></tr></tbody></table></figure></div>
<p>详细设计：<br>1、 天气类Weather，包含int类型的温度（temperature）和湿度（humidity）属性，以及布尔类型的属性flag用于判断是生成还是读取天气信息。<br>方法包括：<br>（1）    温度和湿度属性的getter和setter方法<br>（2）    生成天气数据的方法public void generate()<br>            使用随机数获取0-40度之间的温度，0-100之间的湿度<br>（3）   读取天气数据的方法public void read()<br>（4）   重写toString()方法<br>2、 生成天气线程类GenerateWeather<br>属性为Weather类的对象，包括构造方法和run方法。<br>3、 读取天气线程类ReadWeather<br>属性为Weather类的对象，包括构造方法和run方法。<br>4、 测试类WeatherTest<br>在主方法中模拟生成和读取数据的过程</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.weather;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> </span>{</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> temperture;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> humidity;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTemperture</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">return</span> temperture;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTemperture</span><span class="params">(<span class="keyword">int</span> temperture)</span> </span>{</span><br><span class="line">		<span class="keyword">this</span>.temperture = temperture;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHumidity</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">return</span> humidity;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHumidity</span><span class="params">(<span class="keyword">int</span> humidity)</span> </span>{</span><br><span class="line">		<span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 生成天气数据的方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">generate</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">if</span> (flag) {</span><br><span class="line">			<span class="keyword">try</span> {</span><br><span class="line">				wait();</span><br><span class="line">			} <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">				<span class="comment">// TODO 自动生成的 catch 块</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">		setTemperture((<span class="keyword">int</span>) (Math.random() * <span class="number">40</span>));</span><br><span class="line">		setHumidity((<span class="keyword">int</span>) (Math.random() * <span class="number">100</span>));</span><br><span class="line">		System.out.println(<span class="string">"生成天气数据[温度"</span> + temperture + <span class="string">",湿度"</span> + humidity + <span class="string">"]"</span>);</span><br><span class="line">		flag = <span class="keyword">true</span>;<span class="comment">// 生成完毕</span></span><br><span class="line">		notifyAll();<span class="comment">//唤醒</span></span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取天气数据的方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">if</span> (!flag) {</span><br><span class="line">			<span class="keyword">try</span> {</span><br><span class="line">				wait();</span><br><span class="line">			} <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">				<span class="comment">// TODO 自动生成的 catch 块</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			}</span><br><span class="line"></span><br><span class="line">		}</span><br><span class="line">		getTemperture();</span><br><span class="line">		getHumidity();</span><br><span class="line">		System.out.println(<span class="string">"获取天气数据[温度"</span> + temperture + <span class="string">",湿度"</span> + humidity + <span class="string">"]"</span>);</span><br><span class="line"></span><br><span class="line">		flag = <span class="keyword">false</span>;<span class="comment">// 获取完毕</span></span><br><span class="line">		notifyAll();<span class="comment">//唤醒</span></span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">"[温度："</span> + <span class="keyword">this</span>.temperture + <span class="string">",湿度："</span> + <span class="keyword">this</span>.humidity + <span class="string">"]"</span>;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">--------------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">package</span> com.imooc.weather;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenerateWeather</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>{</span><br><span class="line">	Weather weather;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">GenerateWeather</span> <span class="params">(Weather weather)</span></span>{</span><br><span class="line">		<span class="keyword">this</span>.weather=weather;</span><br><span class="line">	}</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++) {</span><br><span class="line">			weather.generate();</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">try</span> {</span><br><span class="line">			Thread.sleep(<span class="number">5000</span>);<span class="comment">//休眠5秒钟</span></span><br><span class="line">		} <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">			<span class="comment">// TODO 自动生成的 catch 块</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		}</span><br><span class="line">		} </span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">package</span> com.imooc.weather;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadWeather</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">	Weather weather;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ReadWeather</span><span class="params">(Weather weather)</span> </span>{</span><br><span class="line">		<span class="keyword">this</span>.weather = weather;</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {</span><br><span class="line">			weather.read();</span><br><span class="line">			<span class="keyword">try</span> {</span><br><span class="line">				Thread.sleep(<span class="number">100</span>);<span class="comment">//休眠0.1秒</span></span><br><span class="line">			} <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">				<span class="comment">// TODO 自动生成的 catch 块</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">package</span> com.imooc.weather;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherTest</span> </span>{</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		Weather weather=<span class="keyword">new</span> Weather();</span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="keyword">new</span> GenerateWeather(weather)).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="keyword">new</span> ReadWeather(weather)).start();</span><br><span class="line"></span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>同学的代码是正确的哦！运行效果与题目要求一致哦！但是请注意一个细节哦！那就是构造方法前要加访问修饰符，一般是public修饰的  代表公开的哦！<br><img src="en-resource://database/3603:1" alt="e71d9a677faa25127f29e4051fe6f2e0.png"></p>
</body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java基础通识1.3.8 输入输出流</title>
    <url>/posts/1350792227/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>File类的使用</li>
<li>字节流</li>
<li>字符流</li>
<li>对象序列化与反序列化</li>
</ul>
<a id="more"></a>

<h3 id="File类的应用"><a href="#File类的应用" class="headerlink" title="File类的应用"></a>File类的应用</h3><h4 id="File类概述"><a href="#File类概述" class="headerlink" title="File类概述"></a>File类概述</h4><p><strong>什么是文件？</strong></p>
<p>文件可认为是相关记录或放在一起的数据的集合。</p>
<p><strong>流：</strong></p>
<p>流是指一连串流动的字符，以先进先出的方式发送信息的通道。</p>
<h4 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a>单选题</h4><p>关于java.io.File类的方法mkdir()和mkdirs()，说法错误的是？（选择一项）</p>
<p>A.  这两个方法都用于创建目录<br>B.  mkdir()方法用于创建单级目录<br>C.  mkdirs()方法用于创建多级目录<br>D.  如果这两个方法的返回值为false，表示目录创建成功</p>
<p>正确答案： D</p>
<p><strong>参考解析：</strong><br>本题考查创建目录的两个方法mkdir()和mkdirs()，如果这两个方法的返回值为true，表示目录创建成功，故D选项的说法是错误的。</p>
<h4 id="单选题-1"><a href="#单选题-1" class="headerlink" title="单选题"></a>单选题</h4><p>File类中，返回文件所在文件夹的路径常用方法的是（）（选择一项）</p>
<p>A.  getName()<br>B.  getParent()<br>C.  getPath()<br>D.  getParentFile()</p>
<p>正确答案： D</p>
<p><strong>参考解析：</strong><br>本题考查File类的常用方法，相关方法的作用如下：<br>getName()：返回文件名称。<br>getParent()：返回文件父目录路径。<br>getPath()：返回文件的潜在相对路径。<br>getParentFile()：返回文件所在文件夹的路径。<br>故D选项正确。</p>
<h4 id="File类的常用方法"><a href="#File类的常用方法" class="headerlink" title="File类的常用方法"></a>File类的常用方法</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.file</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo</span> </span>{</span><br><span class="line">    <span class="comment">// 创建File对象</span></span><br><span class="line">    <span class="comment">// 方法一：File file1 = new File("e:\\imooc\\io\\score.txt")</span></span><br><span class="line">    <span class="comment">// 方法二：File file1 = new File("e:\\imooc","io\\score.txt")</span></span><br><span class="line">    <span class="comment">// 方法三：</span></span><br><span class="line">    <span class="comment">// 注意：在windows系统中，转译字符两个斜杠"\\"相当于一个斜杠"\"；Linux系统中则用"/"</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">"e:\\imooc"</span>);</span><br><span class="line">    File file1 = <span class="keyword">new</span> File(file,<span class="string">"io\\score.txt"</span>);</span><br><span class="line">    <span class="comment">// 判断是文件还是目录</span></span><br><span class="line">    System.out.println(<span class="string">"是否是目录："</span>+file1.isDirectory());</span><br><span class="line">    System.out.println(<span class="string">"是否是文件："</span>+file1.isFile());</span><br><span class="line">    <span class="comment">// 创建目录</span></span><br><span class="line">    File file2 = <span class="keyword">new</span> File(<span class="string">"e:\\imooc\\set\\HashSet"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!file2.exists()){</span><br><span class="line">        file2.mkdirs();</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 创建文件</span></span><br><span class="line">    <span class="keyword">if</span>(!file1.exists()){</span><br><span class="line">        <span class="keyword">try</span>{</span><br><span class="line">            file1.createNewFile();</span><br><span class="line">        }<span class="keyword">catch</span>(IOException e){</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="单选题-2"><a href="#单选题-2" class="headerlink" title="单选题"></a>单选题</h4><p>下列程序的功能是在文件夹College下创建Department文件夹，再在Department文件夹下创建Class文件夹，请选择正确的语句排序后填写在横线上。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mkd_3</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        ________________________________</span><br><span class="line">        <span class="keyword">if</span>(!f2.exists()){</span><br><span class="line">            _____________</span><br><span class="line">            System.out.println(<span class="string">"目录创建成功！！！"</span>);</span><br><span class="line">            <span class="comment">// 返回完整路径名</span></span><br><span class="line">            —————————————————————————</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<p>运行结果：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">College</span><br><span class="line">    Department</span><br><span class="line">    	Class</span><br></pre></td></tr></tbody></table></figure></div>
<p>控制台输出：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">目录创建成功</span><br><span class="line">    C:\Program File\Java\eclipse\eclipse-workspace02\test03\College\Departmant\Class</span><br></pre></td></tr></tbody></table></figure></div>
<p>I.            File f2=new File(“College\Department\Class”);<br>II.           File f2=new File(“College”,”Department”,”Class”);<br>III.          f2.mkdirs();<br>IV.          f2.mkdir();<br>V.           System.out.println(f2.getAbsolutePath());<br>VI.          System.out.println(f2.getParent());</p>
<p>A.  I  III  V<br>B.  I  II  V<br>C.  II  III  VI<br>D.  II  III  V</p>
<p>正确答案： A</p>
<p><strong>参考解析：</strong><br>本题考查的是对文件的操作：创建多级目录, 应用到的是File类.<br>使用File类时首先要导入io包中的File类： import java.io.File;<br>其次，在创建文件之前先要判断目标是否已经存在，若已经存在就不创建，若不存在：!f1.exists()，才创建。<br>创建目录的方法有： mkdir()创建单级目录;mkdirs()创建多级目录。本题考查的是对多级目录的创建，所以选用mkdirs()。<br>getParent()用来返回父目录路径；getAbsolutePath()用来返回文件的绝对路径.<br>故A选项正确。</p>
<h4 id="单选题-3"><a href="#单选题-3" class="headerlink" title="单选题"></a>单选题</h4><p>请阅读下列代码，在横线处填上正确的语句（）。其中“D:\animal\Pets”和“C:\fruits”目录默认已存在。（选择一项）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">File c=<span class="keyword">new</span> File(<span class="string">"D:\\animal\\Pets"</span>,<span class="string">"cat"</span>);</span><br><span class="line"><span class="keyword">if</span>(_________){</span><br><span class="line">    c.mkdir();</span><br><span class="line">}</span><br><span class="line">File animal=<span class="keyword">new</span> File(<span class="string">"D:\\Pets\\Pig"</span>);</span><br><span class="line"><span class="keyword">if</span>(!animal.exists()){</span><br><span class="line">    _________________</span><br><span class="line">}</span><br><span class="line">File fruit=<span class="keyword">new</span> File(<span class="string">"C:\\fruits\\banana.doc"</span>);</span><br><span class="line"><span class="keyword">if</span>(!fruit.exists()){</span><br><span class="line">    <span class="keyword">try</span>{</span><br><span class="line">        ______________</span><br><span class="line">    }<span class="keyword">catch</span>(IOException e){</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>A</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">!c.exists()</span><br><span class="line">animal.mkdir();</span><br><span class="line">fruit.mkdir();</span><br></pre></td></tr></tbody></table></figure></div>
<p>B</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">c.exists()</span><br><span class="line">animal.mkdir();</span><br><span class="line">fruit.mkdirs();</span><br></pre></td></tr></tbody></table></figure></div>
<p>C</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">!c.exists()</span><br><span class="line">animal.mkdirs();</span><br><span class="line">fruit.createNewFile();</span><br></pre></td></tr></tbody></table></figure></div>
<p>D</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">!c.exists()</span><br><span class="line">animal.mkdirs();</span><br><span class="line">fruit.mkdirs();</span><br></pre></td></tr></tbody></table></figure></div>
<p>正确答案： C</p>
<p><strong>参考解析：</strong><br>本题考查File类的使用。在创建文件或目录前先要判断目标目录是否存在，不存在的情况下才创建；创建单级目录用mkdir(),创建多级目录用mkdirs();创建文件用createNewFile()。故C选项正确。</p>
<h4 id="编程练习（自由编程）"><a href="#编程练习（自由编程）" class="headerlink" title="编程练习（自由编程）"></a>编程练习（自由编程）</h4><p>创建一个File类对象，判断指定文件或目录是否存在，若存在判断其是文件还是目录，是否可读、可写。<br>效果图:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">创建文件成功！</span><br><span class="line">文件名称：Monday.docx</span><br><span class="line">文件上一级目录：File</span><br><span class="line">文件/目录：这是一个文件</span><br><span class="line">读写性：这个文件既可以读还可以写</span><br></pre></td></tr></tbody></table></figure></div>


<p>任务要求：<br>要求：<br>1、先在File文件下创建一个Monday.docx的文件。判断文件是否创建成功，若成功返回文件名称和父目录。<br>2、先判断文件是否存在，若存在就先获取其路径或名称。<br>3、再判断其是文件还是目录；判断文件是否可读、可写：<br>       方法：请用适当的方法创建文件，判断是文件还是目录；以及判断文件的可读性。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTest</span> </span>{</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		File file1=<span class="keyword">new</span> File(<span class="string">"E:\\imooc\\File\\Monday.docx"</span>);</span><br><span class="line">		<span class="keyword">try</span> {</span><br><span class="line">			file1.createNewFile();</span><br><span class="line">		} <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">if</span>(file1.exists()) {</span><br><span class="line">			System.out.println(<span class="string">"创建文件成功！"</span>);</span><br><span class="line">			System.out.println(<span class="string">"文件名称："</span>+file1.getName());</span><br><span class="line">			System.out.println(<span class="string">"文件上一级目录："</span>+file1.getParent().substring(<span class="number">9</span>));</span><br><span class="line">			System.out.print(<span class="string">"文件\\目录："</span>);</span><br><span class="line">			<span class="keyword">if</span>(file1.isDirectory()) {</span><br><span class="line">				System.out.println(<span class="string">"这是一个目录"</span>);</span><br><span class="line">			}<span class="keyword">else</span> <span class="keyword">if</span>(file1.isFile()) {</span><br><span class="line">				System.out.println(<span class="string">"这是一个文件"</span>);</span><br><span class="line">			}</span><br><span class="line">			System.out.print(<span class="string">"读写性："</span>);</span><br><span class="line">			<span class="keyword">if</span>(file1.canRead()&amp;&amp;file1.canWrite()) {</span><br><span class="line">				System.out.println(<span class="string">"这个文件既可以读还可以写"</span>);</span><br><span class="line">			}<span class="keyword">else</span> <span class="keyword">if</span>(file1.canRead()) {</span><br><span class="line">				System.out.println(<span class="string">"这个文件可读"</span>);</span><br><span class="line">			}<span class="keyword">else</span> <span class="keyword">if</span>(file1.canWrite()) {</span><br><span class="line">				System.out.println(<span class="string">"这个文件可写"</span>);</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="绝对路径与相对路径"><a href="#绝对路径与相对路径" class="headerlink" title="绝对路径与相对路径"></a>绝对路径与相对路径</h4><p><strong>绝对路径：</strong></p>
<p>从盘符开始的路径叫绝对路径</p>
<p><strong>当前路径：</strong></p>
<p>是从当前路径开始的路径</p>
<h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><h4 id="字节流概述"><a href="#字节流概述" class="headerlink" title="字节流概述"></a>字节流概述</h4><ul>
<li>InputStream字节输入流<ul>
<li>FileInputStream文件输入流</li>
<li>PipedInputStream管道输入流</li>
<li>FilterInputStream过滤器输入流<ul>
<li>PushBackInputStream回压输入流</li>
<li>BufferedInputStream缓冲输入流</li>
<li>DataInputStream数据输入流</li>
</ul>
</li>
<li>ObjectInputStream对象输入流</li>
<li>SequenceInputStream顺序输入流</li>
<li>ByteArrayInputStream字节数组输入流</li>
<li>StringBufferInputStream缓冲字符输入流</li>
</ul>
</li>
<li>OutputStream字节输出流<ul>
<li>FileOutputStrem文件输出流</li>
<li>PipedOutputStream管道输出流</li>
<li>FilterOutputStream过滤器输出流<ul>
<li>PrintStream格式化输出流</li>
<li>BufferedOutputStream缓冲输出流</li>
<li>DataOutputStream数据输出流</li>
</ul>
</li>
<li>ObjectOutputStream对象输出流</li>
<li>ByteArrayOutputStream字节数组输出流</li>
</ul>
</li>
</ul>
<h4 id="单选题-4"><a href="#单选题-4" class="headerlink" title="单选题"></a>单选题</h4><p>关于字节流和字符流的说法错误的是？（选择一项）</p>
<p>A.  InputStream是字节输入流的父类<br>B.  OutputStream是字节输出流的父类<br>C.  FileInputStream是文件输出流<br>D.  BufferedOutputStream是缓冲输出流</p>
<p>正确答案： C</p>
<p><strong>参考解析：</strong><br>本题考查字节流和字符流相关的类，FileInputStream是文件输入流，故C选项的说法是错误的。</p>
<h4 id="FileInputStream（理论概述）"><a href="#FileInputStream（理论概述）" class="headerlink" title="FileInputStream（理论概述）"></a>FileInputStream（理论概述）</h4><ul>
<li>从文件系统中的某个文件中获得输入字节。</li>
<li>用于读取诸如图像数据之类的原始字节流。</li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public int read()</td>
<td>从输入流中读取一个数据字节</td>
</tr>
<tr>
<td>public int read(byte[] b)</td>
<td>从输入流中将最多b.length个字节的数据读入一个byte数组中</td>
</tr>
<tr>
<td>public int read(byte[] b,int off,int len)</td>
<td>从输入流中将最多len个字节的数据读入byte数组中</td>
</tr>
<tr>
<td>public void close()</td>
<td>关闭此文件输入流并释放与此流有关的所有系统资源</td>
</tr>
<tr>
<td>其他方法</td>
<td>其他方法</td>
</tr>
</tbody></table>
<ul>
<li>如果返回值为-1，则表示已经达到文件末尾！</li>
</ul>
<h4 id="FileInputStream（代码演示）"><a href="#FileInputStream（代码演示）" class="headerlink" title="FileInputStream（代码演示）"></a>FileInputStream（代码演示）</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.file;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputDemo1</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        <span class="keyword">try</span>{</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"imooc.txt"</span>);</span><br><span class="line">            <span class="comment">// int n=fis.read();</span></span><br><span class="line">            <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">            <span class="comment">// while(n!=-1){</span></span><br><span class="line">            <span class="comment">// System.out.print((char)n);</span></span><br><span class="line">            <span class="comment">// n=fis.read();</span></span><br><span class="line">        	<span class="comment">// }</span></span><br><span class="line">            <span class="keyword">while</span>((n=fis.read())!=-<span class="number">1</span>){</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)n);</span><br><span class="line">            }</span><br><span class="line">            fis.close();</span><br><span class="line">        }<span class="keyword">catch</span>(FileNotException e){</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }<span class="keyword">catch</span>(IOException e){</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>还有个DEMO2</p>
<h4 id="单选题-5"><a href="#单选题-5" class="headerlink" title="单选题"></a>单选题</h4><p>给定下列代码，在横线处添加（）可以输出文本全部内容。（选择一项）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">FileInputStream p2 = <span class="keyword">new</span> FileInputStream(<span class="string">"c.txt"</span>);</span><br><span class="line"><span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(______){</span><br><span class="line">    System.out.println(_______);</span><br><span class="line">}</span><br><span class="line">__________</span><br></pre></td></tr></tbody></table></figure></div>
<p>A.  t.read!=0     t      不填<br>B.  (t=p2.read())!=0   （char）t    不填<br>C.  t.read!=-1  （char）t   p2.close();<br>D.  (t=p2.read())!=-1    （char）t   p2.close();</p>
<p>正确答案： D</p>
<p><strong>参考解析：</strong><br>本题考查FileInputStream类的使用。要一次性输出文本内容，必须连续将读取到的内容输出。(t=p2.read())!=-1  将read（）方法放在循环内就可以达到这个目的。注意：（char）n将整型转换成字符型;文件读取完后必须调close()函数关闭文件释放资源。故D选项正确。</p>
<h4 id="多选题"><a href="#多选题" class="headerlink" title="多选题"></a>多选题</h4><p>关于Java输入输出流的说法正确的是？（选择两项）</p>
<p>A.  调用createNewFile()方法会抛出FileNotFoundException异常<br>B.  创建FileInputStream对象时，会抛出FileNotFoundException异常<br>C.  如果同时需要抛出FileNotFoundException和IOException异常，则IOException异常必须先抛出<br>D.  FileNotFoundException是IOException异常的子类</p>
<p>正确答案： B,D</p>
<p><strong>参考解析：</strong><br>本题考查输入输出流的常用方法使用，BD选项正确。A选项说法错误，调用createNewFile()方法会抛出IOException异常。C选项说法错误，如果同时需要抛出FileNotFoundException和IOException异常，则FileNotFoundException异常必须先抛出。</p>
<h4 id="编程练习（自由编程）-1"><a href="#编程练习（自由编程）-1" class="headerlink" title="编程练习（自由编程）"></a>编程练习（自由编程）</h4><p>老师让程序员小马统计英文演讲稿speech.txt文件中共有多少个字符，并显示所有内容以便在演讲开始前有个准备，假如你是小马，请完成老师教给你的任务。<br>效果图:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">文本内容：FileInputStream对象。</span><br><span class="line">统计结果：speech.txt文件中共有<span class="number">20</span>个字节。</span><br></pre></td></tr></tbody></table></figure></div>
<p>任务要求：<br>1、实例化FileInputStream对象。<br>2、设置while循环读取speech.txt文件内容。<br>3、在循环中设置计数器count，每读取一个字节，count加1。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpeechFileInputStreamDemo</span> </span>{</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">try</span> {</span><br><span class="line">			FileInputStream f=<span class="keyword">new</span> FileInputStream(<span class="string">"speech.txt"</span>);</span><br><span class="line">			File file=<span class="keyword">new</span> File(<span class="string">"speech.txt"</span>);</span><br><span class="line">			<span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">			System.out.print(<span class="string">"文本内容："</span>);</span><br><span class="line">			<span class="keyword">while</span>((n=f.read())!=-<span class="number">1</span>) {</span><br><span class="line">				System.out.print((<span class="keyword">char</span>)n);</span><br><span class="line">				count++;</span><br><span class="line">			}</span><br><span class="line">			System.out.println();</span><br><span class="line">			System.out.println(<span class="string">"统计结果："</span>+file.getName()+<span class="string">"文件中共有"</span>+count+<span class="string">"个字符"</span>);</span><br><span class="line">		    f.close();</span><br><span class="line">		} <span class="keyword">catch</span> (FileNotFoundException e) {</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		}<span class="keyword">catch</span> (IOException e) {</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="FileOutputStream（上）"><a href="#FileOutputStream（上）" class="headerlink" title="FileOutputStream（上）"></a>FileOutputStream（上）</h4><table>
<thead>
<tr>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>public void write (int b)</td>
<td>将指定字节写入此文件输出流</td>
</tr>
<tr>
<td>public void write(byte[] b)</td>
<td>将b.length个字节从指定byte数组写入此文件输出流中</td>
</tr>
<tr>
<td>public void write(byte[] b,int off,int len)</td>
<td>将指定byte数组中从偏移量off开始的len个字节写入此文件输出流</td>
</tr>
<tr>
<td>public void close()</td>
<td>关闭此文件输出流并释放与此流有关的所有系统资源</td>
</tr>
</tbody></table>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        FileOutputStream fos;</span><br><span class="line">        FileInputStream fis;</span><br><span class="line">        <span class="keyword">try</span>{</span><br><span class="line">            fos=<span class="keyword">new</span> FileOutputStream(<span class="string">"imooc.txt"</span>,<span class="keyword">true</span>);</span><br><span class="line">            fis=<span class="keyword">new</span> FileInputStream(<span class="string">"imooc.txt"</span>);</span><br><span class="line">            fos.write(<span class="number">50</span>);</span><br><span class="line">            fos.write(<span class="string">'a'</span>);</span><br><span class="line">            System.out.println(fis.read());</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)fis.read());</span><br><span class="line">            fos.close();</span><br><span class="line">            fis.close();</span><br><span class="line">        }<span class="keyword">catch</span>(FileNotFoundException e){</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }<span class="keyword">catch</span>(IOException e){</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<ul>
<li>字节流不适合做一些和字符相关的内容的，有时候会发现存储的数据是一些意想不到的，字节流主要做一些和二进制相关的操作（比如文件的复制，把图片文件赋值粘贴一下）.</li>
</ul>
<h4 id="单选题-6"><a href="#单选题-6" class="headerlink" title="单选题"></a>单选题</h4><p>关于FileOutputStream的说法错误的是？（选择一项）</p>
<p>A.  可以调用write方法将int类型数据写入文件<br>B.  可以调用write方法将字符型数据写入文件<br>C.  构造方法FileOutputStream(String name,boolean append)，当第二个参数为false时，表示可以在原文件后面继续写入数据<br>D.  close()方法用于关闭流，并释放资源</p>
<p>正确答案： C</p>
<p><strong>参考解析：</strong><br>本题考查FileOutputStream类，构造方法FileOutputStream(String name,boolean append)，当第二个参数为true时，表示可以在原文件后面继续写入数据。故C选项的说法是错误的。</p>
<h4 id="FileOutputStream（下）"><a href="#FileOutputStream（下）" class="headerlink" title="FileOutputStream（下）"></a>FileOutputStream（下）</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">    <span class="comment">// 文件拷贝</span></span><br><span class="line">    <span class="keyword">try</span>{</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"happy.gif"</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"happycopy.gif"</span>);</span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] b=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span>((n=fis.read(b))!=-<span class="number">1</span>){</span><br><span class="line">            fos.write(b,<span class="number">0</span>,n);</span><br><span class="line">        }</span><br><span class="line">        fis.close();</span><br><span class="line">        fos.close();</span><br><span class="line">    }<span class="keyword">catch</span>(FileNotFoundException e){</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }<span class="keyword">catch</span>(IOException e){</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<h4 id="单选题-7"><a href="#单选题-7" class="headerlink" title="单选题"></a>单选题</h4><p>请阅读下列程序，要实现图片的拷贝并且拷贝前后文件大小不变，横线上应该填写的语句是（）（选择一项）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">    <span class="comment">// 图片文件的拷贝</span></span><br><span class="line">    FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">"D:\\Pets\\turtle.gif"</span>);</span><br><span class="line">    FileOutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="string">"D:\\Pets\\turtlecos.gif"</span>);</span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] b=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line">    <span class="keyword">while</span>((p=in.read(b))!=-<span class="number">1</span>){</span><br><span class="line">        _______________________</span><br><span class="line">    }</span><br><span class="line">    System.out.println(<span class="string">"拷贝成功"</span>);</span><br><span class="line">    in.close();</span><br><span class="line">    out.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<p>A.  in.read(b);<br>B.  out.read(b);<br>C.  in.write(b,0,p);<br>D.  out.write(b,0,p);</p>
<p>正确答案： D</p>
<p><strong>参考解析：</strong><br>本题考查FileOutputStream中write()方法的使用，要实现文件的拷贝，应该先读取文件数据，再将读取到的数据写入到指定文件。要保证拷贝前后文件的大小不改变，在写入数据时应选用带有长度的方法write(byte[]b,int off,len),做到实际读取到多少数据就写多少数据，就避免了会改变文件大小的问题。故D选项正确。</p>
<h4 id="缓冲流概述"><a href="#缓冲流概述" class="headerlink" title="缓冲流概述"></a>缓冲流概述</h4><ul>
<li>BufferedInputStream缓冲输入流</li>
<li>BufferedOutputStream缓冲输出流</li>
</ul>
<h4 id="单选题-8"><a href="#单选题-8" class="headerlink" title="单选题"></a>单选题</h4><p>下列关于字节输入输出缓冲流的说法正确的是（）（选择一项）</p>
<p>A.  FileInputStream是BufferedInputStream的父类<br>B.  BufferedInputStream和BufferedOutputStream都有一个字节数组来存储缓冲的数据，这个数组是可见的<br>C.  BufferedInputStream的方法flush()是用来清空缓冲区的<br>D.  flush()方法主要用来清空缓冲区。当缓冲区被填满时就会自动执行写操作，但是当缓冲区不满时，就不会执行写操作。所以，当缓冲区未被填满但要执行写操作时就要强制清空缓冲区</p>
<p>正确答案： D</p>
<p><strong>参考解析：</strong><br>本题考查字节缓冲流。<br>A选项错误，BufferedInputStream的父类是FilterInputstream, BufferedOutputStream的父类是FilterOutputstream;<br>B选项错误，BufferedInputStream和BufferedOutputStream都有一个字节数组来存储缓冲的数据，但是这个数组是不可见的；<br>C选项错误，BufferedOutputStream的方法flush()是用来清空缓冲区的。<br>flush()方法主要用来清空缓冲区。当缓冲区被填满时就会自动执行写操作，但是当缓冲区不满时，就不会执行写操作。所以，当缓冲区未被填满但要执行写操作时就要强制清空缓冲区。<br>故D选项正确。</p>
<h4 id="缓冲流案例"><a href="#缓冲流案例" class="headerlink" title="缓冲流案例"></a>缓冲流案例</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        <span class="keyword">try</span>{</span><br><span class="line">            FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(<span class="string">"imooc.txt"</span>);</span><br><span class="line">            BufferedOutputStream bos=<span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line">            FileInputStream bos=<span class="keyword">new</span> FileInputStream(<span class="string">"imooc.txt"</span>);</span><br><span class="line">            BufferedOutputStream bis=<span class="keyword">new</span> BufferedOutputStream(fis);</span><br><span class="line">            <span class="keyword">long</span> startTime=System.System.currentTimeMillis();</span><br><span class="line">            bos.write(<span class="number">50</span>);</span><br><span class="line">            bos.write(<span class="string">'a'</span>);</span><br><span class="line">            bos.flush();</span><br><span class="line">            System.out.println(bis.read());</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)bis.read());</span><br><span class="line">            <span class="keyword">long</span> endTime=System.currentTimeMillis();</span><br><span class="line">            System.out.println(endTime-starTime);</span><br><span class="line">            fos.close();</span><br><span class="line">            bos.close();</span><br><span class="line">            fis.close();</span><br><span class="line">            bis.close();</span><br><span class="line">        }<span class="keyword">catch</span>(FileNotFoundException e){</span><br><span class="line">            e.printStackTreace();</span><br><span class="line">        }<span class="keyword">catch</span>(IOException e){</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<h4 id="多选题-1"><a href="#多选题-1" class="headerlink" title="多选题"></a>多选题</h4><p>下列缓冲流的使用方法正确的是（）（选择三项）</p>
<p>A</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="code"><pre><span class="line">String filename="cat.txt";</span><br><span class="line">FileOutputStream fos=new FileOutStream(filename);</span><br><span class="line">BufferedOutputStream bos=new BufferedOutputSteam(filename);</span><br></pre></td></tr></tbody></table></figure></div>
<p>B</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">String filename=<span class="string">"cat.txt"</span>;</span><br><span class="line">BufferedOutputStream bos=<span class="keyword">new</span> BufferedOutputSteam(<span class="keyword">new</span> FileOutputStream(filename));</span><br></pre></td></tr></tbody></table></figure></div>
<p>C</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">FileOutputStream fos=<span class="keyword">new</span> FileOutStream(<span class="string">"cat.txt"</span>);</span><br><span class="line">BufferedOutputStream bos=<span class="keyword">new</span> BufferedOutputSteam(fos);</span><br></pre></td></tr></tbody></table></figure></div>
<p>D</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">BufferedOutputStream bos=<span class="keyword">new</span> BufferedOutputSteam(<span class="keyword">new</span> FileOutputStream(<span class="string">"cat.txt"</span>));</span><br></pre></td></tr></tbody></table></figure></div>
<p>正确答案： B,C,D</p>
<p><strong>参考解析：</strong><br>本题考查缓冲流的使用。<br>输出缓冲流的构造函数BufferedOutputStream（OutputStream  out）,参数是OutputStream的子类。FileOutputStream先将写入的数据存储在BufferedOutputStream的字节数组中，BufferedOutputStream再一次性输出，提高了字节的写入速率。<br>A选项代码错误，BufferedOutputStream的参数应该是fos。</p>
<h4 id="3-16-编程练习（自由编程）"><a href="#3-16-编程练习（自由编程）" class="headerlink" title="3-16 编程练习（自由编程）"></a>3-16 编程练习（自由编程）</h4><p>编写一个Java程序，将100000个字符分别写入文件one.txt和文件two.txt，one用不加缓冲的文件输出流来写，two用缓冲文件输出流来写，比较用时的多少。<br>效果图:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">one.txt不使用缓冲流来写</span><br><span class="line">用时为：<span class="number">98</span></span><br><span class="line">two.txt使用缓冲流来写</span><br><span class="line">用时为：<span class="number">2</span></span><br><span class="line">节省时间：96ms</span><br></pre></td></tr></tbody></table></figure></div>
<p>任务要求：<br>1、用FileOutputStream写one;<br>2、用BufferedOutputStream写two;<br>3、写100000个字符，可以使用for循环一次写入一个。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedTest</span> </span>{</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="keyword">try</span> {</span><br><span class="line">			File f = <span class="keyword">new</span> File(<span class="string">"one.txt"</span>);</span><br><span class="line">			<span class="keyword">if</span>(!f.exists()) {</span><br><span class="line">				f.createNewFile();</span><br><span class="line">			}</span><br><span class="line">			FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"one.txt"</span>);</span><br><span class="line">			FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"one.txt"</span>);</span><br><span class="line">			BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">			BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line">			System.out.println(<span class="string">"one.txt不实用缓冲流来写"</span>);</span><br><span class="line">			<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">long</span> fStartTime = System.currentTimeMillis();</span><br><span class="line">			<span class="keyword">while</span>(n &lt; <span class="number">100000</span>) {</span><br><span class="line">				fos.write(<span class="string">'a'</span>);</span><br><span class="line">				n++;</span><br><span class="line">			}</span><br><span class="line">			<span class="keyword">long</span> fEndTime = System.currentTimeMillis();</span><br><span class="line">			<span class="keyword">long</span> fileTime = fEndTime - fStartTime;</span><br><span class="line">			System.out.println(<span class="string">"用时为："</span> + fileTime);</span><br><span class="line">			</span><br><span class="line">			System.out.println(<span class="string">"two.txt使用缓冲流来写"</span>);</span><br><span class="line">			n = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">long</span> bStartTime = System.currentTimeMillis();</span><br><span class="line">			<span class="keyword">while</span>(n &lt; <span class="number">100000</span>) {</span><br><span class="line">				bos.write(<span class="string">'a'</span>);</span><br><span class="line">				n++;</span><br><span class="line">			}</span><br><span class="line">			bos.flush();</span><br><span class="line">			<span class="keyword">long</span> bEndTime = System.currentTimeMillis();</span><br><span class="line">			<span class="keyword">long</span> bufferedTime = bEndTime - bStartTime;</span><br><span class="line">			System.out.println(<span class="string">"用时为："</span> + bufferedTime);</span><br><span class="line">			System.out.println(<span class="string">"节省时间："</span> + (fileTime - bufferedTime));</span><br><span class="line">			fis.close();</span><br><span class="line">			fos.close();</span><br><span class="line">			bis.close();</span><br><span class="line">			bos.close();</span><br><span class="line">		} <span class="keyword">catch</span> (FileNotFoundException e) {</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		} <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><h4 id="字符流概述"><a href="#字符流概述" class="headerlink" title="字符流概述"></a>字符流概述</h4><ul>
<li><p>Reader</p>
<ul>
<li>BufferedReader<ul>
<li>LineNumberReader</li>
</ul>
</li>
<li>CharArrayReader</li>
<li>StringReader</li>
<li>InputStreamReader<ul>
<li>FileReader</li>
</ul>
</li>
<li>PipedReader</li>
<li>FilterReader<ul>
<li>PushbackReader</li>
</ul>
</li>
</ul>
</li>
<li><p>Writer</p>
<ul>
<li>BufferedWriter</li>
<li>CharArrayWriter</li>
<li>StringWriter</li>
<li>OutputStreamWriter<ul>
<li>FileWriter</li>
</ul>
</li>
<li>PipedWriter</li>
<li>FilterWriter</li>
</ul>
</li>
</ul>
<h4 id="单选题-9"><a href="#单选题-9" class="headerlink" title="单选题"></a>单选题</h4><p>关于字符流的说法错误的是？（选择一项）</p>
<p>A.  Reader是字符输入流的父类<br>B.  Writer是字符输出流的父类<br>C.  InputStreamReader是InputStream的子类<br>D.  BufferedReader是Reader的子类</p>
<p>正确答案： C</p>
<p><strong>参考解析：</strong><br>本题考查字符流的相关类，InputStreamReader是Reader的子类，故C选项说法是错误的。</p>
<h4 id="字节字符转换流"><a href="#字节字符转换流" class="headerlink" title="字节字符转换流"></a>字节字符转换流</h4><ul>
<li>InputStreamReader</li>
<li>OutputStreamWriter</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReaderDemo</span></span>{</span><br><span class="line">    <span class="keyword">try</span>{</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"imooc.txt"</span>);</span><br><span class="line">        InputStreamReader isr=<span class="keyword">new</span> InputStreamReader(fis);</span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span>[] cbuf=<span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">while</span>((n=isr.read())!=-<span class="number">1</span>){</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)n);</span><br><span class="line">        }</span><br><span class="line">    }<span class="keyword">catch</span>(FileNotFoundException e){</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }<span class="keyword">catch</span>(IOException e){</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure></div>
<ul>
<li>仅记录了一小部分</li>
</ul>
<h4 id="单选题-10"><a href="#单选题-10" class="headerlink" title="单选题"></a>单选题</h4><p>下列程序的功能是通过转换流写入文本，并且使用缓冲流来提高写入速率。请选择正确的语句，排序后填入横线上。（选择一项）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOtrans</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>{</span><br><span class="line">        <span class="comment">// 写入字节流</span></span><br><span class="line">        String f = <span class="string">"hello.txt"</span>;</span><br><span class="line">        FileOutputStream out = __________</span><br><span class="line">        <span class="comment">// 字节流向字符流的转换</span></span><br><span class="line">        OutputStreamWriter osw = ____________</span><br><span class="line">        <span class="comment">// 使用高效的缓冲流</span></span><br><span class="line">        BufferedWriter bfw = _____________</span><br><span class="line">        String str = <span class="string">"你好吗？\r\n我很好！"</span>;</span><br><span class="line">        __________________</span><br><span class="line">        <span class="comment">// 关闭流</span></span><br><span class="line">        ———————————————————</span><br><span class="line">        out.close();</span><br><span class="line">        osw.close();</span><br><span class="line">        bfw.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>运行结果：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">你好吗？</span><br><span class="line">我很好！</span><br></pre></td></tr></tbody></table></figure></div>


<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">I.           <span class="keyword">new</span> Buffered(osw);</span><br><span class="line">II.          <span class="keyword">new</span> FileOutputStream(f);</span><br><span class="line">III.         <span class="keyword">new</span> File(f);</span><br><span class="line">IV.         <span class="keyword">new</span> OutputStreamWriter(out);</span><br><span class="line">V.          osw.flush();</span><br><span class="line">VI.         osw.write(str);</span><br><span class="line">VII.        <span class="keyword">new</span> OutputStream(out);</span><br><span class="line">VIII.       <span class="keyword">new</span> BufferedWriter(osw);</span><br><span class="line">IX.         bfw.write(str);</span><br><span class="line">X.          bfw.flush();</span><br></pre></td></tr></tbody></table></figure></div>
<p>A.  II   VII   I   V    VI<br>B.  II   IV   VIII    IX   X<br>C.  III    IV   I   V   VI<br>D.  III    VII   VIII    IX   X</p>
<p>正确答案： B</p>
<p><strong>参考解析：</strong><br>本题考查的是通过转换流将按字节写入转换成按字符写入，应用到的类有FileOutputSream、OutputStreamWriter、BufferedWriter<br>先用FileOutputSream将文本写入到OutputStreamWriter的字节数组中，然后OutputStreamWriter将字节转换成字符，再通过BufferedWriter封装OutputStreamWriter，调用write()方法来提高写入速率。写入时为了避免出现错误，调用flush()方法强制清空多余缓冲区。故B选项正确。</p>
<h4 id="其他字符流"><a href="#其他字符流" class="headerlink" title="其他字符流"></a>其他字符流</h4><p>未记录</p>
<h4 id="单选题-11"><a href="#单选题-11" class="headerlink" title="单选题"></a>单选题</h4><p>下列程序的功能是使用BufferedWrite写入到文件cat.txt中，请选择正确的语句并排序，填写在横线上。（选择一项）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line">____________________</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileRW</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>{</span><br><span class="line">        FileWriter fw = _____________</span><br><span class="line">        BufferedWriter bfw = ______________</span><br><span class="line">        bfw.______________</span><br><span class="line">        bfw.write(<span class="string">"我是一只会说英文的波斯猫\n"</span>);</span><br><span class="line">        bfw.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>运行产生如下结果：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">I am a lovely cat!</span><br><span class="line">我是一只会说英文的波斯猫</span><br></pre></td></tr></tbody></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">I、        <span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line">II、       <span class="keyword">new</span> FileWriter(<span class="string">"cat.txt"</span>);</span><br><span class="line">III、      write(<span class="string">"I am a lovely cat! \n"</span>);</span><br><span class="line">IV、      <span class="keyword">import</span> java.io.IOException;</span><br><span class="line">V、       <span class="keyword">new</span> Writer(<span class="string">"cat.txt"</span>);</span><br><span class="line">VI、      <span class="keyword">new</span> BufferedWriter(<span class="string">"cat.txt"</span>);</span><br><span class="line">VII、     read(<span class="string">"I am a lovely cat! \n"</span>);</span><br><span class="line">VIII、    <span class="keyword">new</span> BufferedWriter(fw);</span><br></pre></td></tr></tbody></table></figure></div>
<p>A.  I  II  V  VII<br>B.  IV  II  VIII   III<br>C.  IV  V  VIII   VII<br>D.  II  VI  IV  VII</p>
<p>正确答案： B</p>
<p><strong>参考解析：</strong><br>本题考查字符写入方式。<br>1、应用到的类有FileWriter和BufferedWriter。FileWriter通过write（）方法向文件里写入字符串、字符数组、整型数据。为了提高写入速率，就应该使用更高效的缓冲流类BufferedWriter，同时把FileWriter封装在BufferedWriter中。<br>2、在使用这两个类时会抛出IO异常。<br>故B选项正确。</p>
<h4 id="编程练习（自由编程）-2"><a href="#编程练习（自由编程）-2" class="headerlink" title="编程练习（自由编程）"></a>编程练习（自由编程）</h4><p>应用转换流向文件写入文本，并将文本读取出来输入到控制台上。<br>效果图:<br>1、</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">你好吗？</span><br><span class="line">我很好！</span><br></pre></td></tr></tbody></table></figure></div>
<p>2、</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">你好吗？</span><br><span class="line">我很好！</span><br></pre></td></tr></tbody></table></figure></div>
<p>任务要求：<br>1、为提高读写速率，要求使用带有缓冲区的字符流进行读写；<br>2、创建方法transWriteByBuf()写入文件；<br>3、创建方法transReadByBuf()从文件读出内容；<br>4、从字符输入流中读取文本时可以使用readLine()方法，从而对换行符进行识别，一行一行地读取文本；<br>5、在测试方法中调用transWriteByBuf()方法和transReadByBuf()方法。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriterReader</span> </span>{</span><br><span class="line">	<span class="comment">//创建方法transWriteByBuf()写入文件</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transWriteByBuf</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">try</span> {</span><br><span class="line">			FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"hello.txt"</span>);</span><br><span class="line">			BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(fw);</span><br><span class="line">			<span class="comment">//使用缓冲区中的方法将数据写入缓冲区</span></span><br><span class="line">			bw.write(<span class="string">"你好吗?"</span>);</span><br><span class="line">			bw.newLine();</span><br><span class="line">			bw.write(<span class="string">"我很好!"</span>);</span><br><span class="line">			<span class="comment">//调用flush()方法将数据刷新/推送到目的文件中去</span></span><br><span class="line">			bw.flush();	</span><br><span class="line">			bw.close();</span><br><span class="line">			fw.close();</span><br><span class="line">		} <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		}</span><br><span class="line">		</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//创建方法transReadByBuf()从文件读出内容</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transReadByBuf</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">try</span> {</span><br><span class="line">			FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"hello.txt"</span>);</span><br><span class="line">			BufferedReader br = <span class="keyword">new</span> BufferedReader(fr);</span><br><span class="line">			<span class="comment">//定义一个char[]数组cbuf</span></span><br><span class="line">			<span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">			<span class="comment">//调用read(char[] cbuf)方法将数据读取到cbuf数组中</span></span><br><span class="line">			br.read(cbuf);</span><br><span class="line">			<span class="comment">//将cbuf数组转换为字符串，并打印输出</span></span><br><span class="line">			System.out.println(<span class="keyword">new</span> String(cbuf,<span class="number">0</span>,<span class="number">1024</span>));</span><br><span class="line">			<span class="comment">//打印输出字符串</span></span><br><span class="line">			<span class="comment">//关闭缓冲区，关闭fw对象</span></span><br><span class="line">			br.close();</span><br><span class="line">			fr.close();</span><br><span class="line">		} <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		}</span><br><span class="line">		</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		WriterReader wr = <span class="keyword">new</span> WriterReader();</span><br><span class="line">		wr.transWriteByBuf();</span><br><span class="line">		wr.transReadByBuf();</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="对象序列化与反序列化"><a href="#对象序列化与反序列化" class="headerlink" title="对象序列化与反序列化"></a>对象序列化与反序列化</h3><h4 id="对象的序列化与反序列化"><a href="#对象的序列化与反序列化" class="headerlink" title="对象的序列化与反序列化"></a>对象的序列化与反序列化</h4><p>序列化：把Java对象转换为字节序列的过程。</p>
<p>反序列化：把字节序列回复为Java对象的过程。</p>
<p><strong>步骤：</strong></p>
<ul>
<li>创建一个类，继承Serializable接口。</li>
<li>创建对象</li>
<li>将对象写入文件</li>
<li>从文件读取对象信息</li>
</ul>
<p><strong>对象序列化：</strong></p>
<ul>
<li>对象输入流：ObjectInputStream</li>
<li>对象输出流：ObjectOutputStream</li>
</ul>
<h4 id="单选题-12"><a href="#单选题-12" class="headerlink" title="单选题"></a>单选题</h4><p>请阅读下列程序，选择正确的语句排序后填写在横线上   （选择一项）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line">_____________________________{</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">double</span> weight;</span><br><span class="line">    String country;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name,<span class="keyword">int</span> age,<span class="keyword">double</span> weight,String country)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">        <span class="keyword">this</span>.weight=weight;</span><br><span class="line">        <span class="keyword">this</span>.country=country;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> _________________ {</span><br><span class="line">        <span class="keyword">return</span>(<span class="string">"中文名："</span>+name+<span class="string">"\n"</span>+<span class="string">"年龄："</span>+age+<span class="string">"岁\n"</span>+<span class="string">"体重："</span>+weight+<span class="string">"kg\n"</span>+<span class="string">"国籍："</span>+country+<span class="string">"\n"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span>{</span><br><span class="line">        Dog doberman=<span class="keyword">new</span> Dog(<span class="string">"杜宾"</span>,<span class="number">2</span>,<span class="number">35</span>,<span class="string">"German"</span>);</span><br><span class="line">        FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(<span class="string">"Dog.txt"</span>);</span><br><span class="line">        _________________________</span><br><span class="line">        _________________________</span><br><span class="line">        _________________________</span><br><span class="line">        oos.flush();</span><br><span class="line">        _________________________</span><br><span class="line">        System.out.println(dog1);</span><br><span class="line">        fos.close();</span><br><span class="line">        oss.close();</span><br><span class="line">        ois.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<p>使得运行结果为：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">中文名：杜宾</span><br><span class="line">年龄：<span class="number">2</span>岁</span><br><span class="line">体重：<span class="number">35.</span>0kg</span><br><span class="line">国籍：German</span><br></pre></td></tr></tbody></table></figure></div>


<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">I.            oos.writeObject(doberman);</span><br><span class="line">II.           Dog dog1=(Dog)ois.readObject();</span><br><span class="line">III.          oos.write(doberman);</span><br><span class="line">IV.          ObjectOutputStream oos=<span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">V.           ObjectInputStream ois=<span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"Dog.txt"</span>));</span><br><span class="line">VI.          OutputStreamWrite oos=<span class="keyword">new</span> OutputStreamWrite(fos);</span><br><span class="line">VII.         <span class="function">String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">VIII.        <span class="title">String</span><span class="params">()</span></span></span><br><span class="line"><span class="function">IX.          <span class="keyword">public</span> class Dog implements Serializable</span></span><br><span class="line"><span class="function">X.           <span class="keyword">public</span> class Dog extends Serializable</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>A.  X  VII   IV   V    I    II<br>B.  IX  VIII   VI   V   III    II<br>C.  X   VIII   VI   V   III    II<br>D.  IX   VII   IV    V   I    II</p>
<p>正确答案： D</p>
<p><strong>参考解析：</strong><br>本题考查对象序列化和反对象序列化，应用到的类有ObjectOutputStream 和ObjectInputStream。<br>对象序列化的步骤：<br>1）创建一个类并继承Serializable接口<br>2） 创建对象<br>3）  将对象写入文件。用到的是writeObject()方法<br>4）  从文件读出对象。用到的是readObject()方法，但这个方法的返回值是Object，即所有类的父类，需要进行强制转换，并定义一个类去接收它：Dog dog1=(Dog)ois.readObject();<br>故D选项正确</p>
<h4 id="编程练习（自由编程）-3"><a href="#编程练习（自由编程）-3" class="headerlink" title="编程练习（自由编程）"></a>编程练习（自由编程）</h4><p>应用对象序列化和对象反序列化向文件写入对象，并将对象读取出来输入到控制台上。<br>效果图:<br><img src="en-resource://database/3659:1" alt="dc495a7655b6e7f0a9a102ca2daeb790.png"></p>
<p>任务要求：<br>1、创建Product类，并声明它的属性：id，name,categories,price<br>2、实现Serializable接口；<br>3、定义Product类构造方法；<br>4、在Test类里面，创建Product类的对象：iphone,ipad,macbook,iwatch<br>5、实例化对象输入流和对象输出流；<br>6、写入Product类的四个对象；<br>7、从文件里读取四个product类的四个对象。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//Product类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.imooc.objectio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>{</span><br><span class="line">	<span class="keyword">private</span> String id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Product</span><span class="params">()</span> </span>{</span><br><span class="line">		</span><br><span class="line">	}</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Product</span><span class="params">(String id,String name,<span class="keyword">double</span> price)</span> </span>{</span><br><span class="line">		<span class="keyword">this</span>.setId(id);</span><br><span class="line">		<span class="keyword">this</span>.setName(name);</span><br><span class="line">		<span class="keyword">this</span>.setPrice(price);</span><br><span class="line">	}</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	}</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>{</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	}</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	}</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	}</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">return</span> price;</span><br><span class="line">	}</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>{</span><br><span class="line">		<span class="keyword">this</span>.price = price;</span><br><span class="line">	}</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Product [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", price="</span> + price + <span class="string">"]"</span>;</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">}</span><br><span class="line"><span class="comment">//Test类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.imooc.objectio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>{</span><br><span class="line">		<span class="comment">//实例化对象</span></span><br><span class="line">		Product phone = <span class="keyword">new</span> Product(<span class="string">"123"</span>, <span class="string">"phone"</span>, <span class="number">4888.0</span>);</span><br><span class="line">		Product computer = <span class="keyword">new</span> Product(<span class="string">"234"</span>, <span class="string">"computer"</span>, <span class="number">5088.0</span>);</span><br><span class="line">		Product refrigerator = <span class="keyword">new</span> Product(<span class="string">"345"</span>, <span class="string">"refrigerator"</span>, <span class="number">4888.0</span>);</span><br><span class="line">		Product iwatch = <span class="keyword">new</span> Product(<span class="string">"256"</span>, <span class="string">"iwatch"</span>, <span class="number">4799.0</span>);</span><br><span class="line">		<span class="comment">//创建文件</span></span><br><span class="line">		File f1 = <span class="keyword">new</span> File(<span class="string">"D://File//Object.txt"</span>);</span><br><span class="line">		<span class="keyword">if</span> (!f1.exists()) {</span><br><span class="line">			<span class="keyword">try</span> {</span><br><span class="line">				f1.createNewFile();</span><br><span class="line">			} <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">		<span class="comment">//把数数据放入ArrayList中</span></span><br><span class="line">		List&lt;Product&gt; list = <span class="keyword">new</span> ArrayList&lt;Product&gt;();</span><br><span class="line">		list.add(phone);</span><br><span class="line">		list.add(computer);</span><br><span class="line">		list.add(refrigerator);</span><br><span class="line">		list.add(iwatch);</span><br><span class="line">		<span class="keyword">try</span> {</span><br><span class="line">			FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"D://File//Object.txt"</span>);</span><br><span class="line">			ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">			FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"D://File//Object.txt"</span>);</span><br><span class="line">			ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">			<span class="comment">//把数据保存到文件</span></span><br><span class="line">			oos.writeObject(list);</span><br><span class="line">			oos.flush();</span><br><span class="line">			oos.close();</span><br><span class="line">			fos.close();</span><br><span class="line">			List&lt;Product&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">			<span class="comment">//读取文件内容</span></span><br><span class="line">			list1 = (ArrayList&lt;Product&gt;)ois.readObject();</span><br><span class="line">			fis.close();</span><br><span class="line">			ois.close();</span><br><span class="line">			<span class="keyword">for</span>(Product p:list1) {</span><br><span class="line">				System.out.println(p);</span><br><span class="line">			}</span><br><span class="line">		} <span class="keyword">catch</span> (FileNotFoundException e) {</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		} <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
</body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java基础通识1.2.3继承</title>
    <url>/posts/4225429125/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>一、继承的概念</li>
<li>二、继承的实现</li>
</ul>
<a id="more"></a>

<h3 id="继承的概念"><a href="#继承的概念" class="headerlink" title="继承的概念"></a>继承的概念</h3><ul>
<li><p>继承一种类与类之间的关系。</p>
</li>
<li><p>使用已存在的类的定义作为基础建立新类。</p>
</li>
<li><p>新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类，必须承接父类所有的开放的特征。</p>
<p><img src="en-resource://database/5600:1" alt="454731e9edcdd16432ba42920492da50.png"></p>
</li>
</ul>
<p>继承的关系型满足“A is a B”的关系就可以形成继承关系。<br><img src="en-resource://database/5595:1" alt="062b86ca8365b0d29e3c38cc38e84867.png"></p>
<h3 id="继承的实现"><a href="#继承的实现" class="headerlink" title="继承的实现"></a>继承的实现</h3><p><img src="en-resource://database/5605:1" alt="eb8add3f7f469a8c2f64a0dfd7e4f8fa.png"></p>
<ul>
<li>一个子类只能继承一个父类。</li>
<li>父类不可以访问子类特有成员，子类继承至父类的时候，可以直接获取父类所有的非私有的成员。</li>
</ul>
<p>Animal.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.animal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>{</span><br><span class="line">       <span class="keyword">private</span> String name;<span class="comment">//昵称</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">int</span> month;<span class="comment">//月份</span></span><br><span class="line">       <span class="keyword">private</span> String species;<span class="comment">//品种</span></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>{</span><br><span class="line">            </span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> name;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.name = name;</span><br><span class="line">       }</span><br><span class="line">       </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMonth</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> month;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMonth</span><span class="params">(<span class="keyword">int</span> month)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.month = month;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getSpecies</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> species;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSpecies</span><span class="params">(String specieString)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.species = specieString;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">//吃东西</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">             System.out.println(<span class="keyword">this</span>.getName()+<span class="string">"在吃东西"</span>);</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Cat.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.animal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>{</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">double</span> weight;<span class="comment">//体重</span></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWeight</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> weight;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeight</span><span class="params">(<span class="keyword">double</span> weight)</span></span>{</span><br><span class="line">             <span class="keyword">this</span>.weight=weight;</span><br><span class="line">       }</span><br><span class="line">      </span><br><span class="line">       <span class="comment">//跑动的方法。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">             System.out.println(<span class="keyword">this</span>.getName()+<span class="string">"是一只"</span>+<span class="keyword">this</span>.getSpecies()+<span class="string">",它在快乐的奔跑"</span>);</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Dog.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.animal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>{</span><br><span class="line">       <span class="keyword">private</span> String sex;<span class="comment">//性别</span></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> sex;</span><br><span class="line">       }</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.sex=sex;</span><br><span class="line">       }</span><br><span class="line">      </span><br><span class="line">       <span class="comment">//睡觉的方法。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>{</span><br><span class="line">             System.out.println(<span class="keyword">this</span>.getName()+<span class="string">"现在"</span>+<span class="keyword">this</span>.getMonth()+<span class="string">"个月大，它在睡觉"</span>);</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.animal.Cat;</span><br><span class="line"><span class="keyword">import</span> com.imooc.animal.Dog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             Cat one=<span class="keyword">new</span> Cat();</span><br><span class="line">             one.setName(<span class="string">"花花"</span>);</span><br><span class="line">             one.setSpecies(<span class="string">"中华田园猫"</span>);</span><br><span class="line">             one.eat();</span><br><span class="line">             one.run();</span><br><span class="line">             System.out.println(<span class="string">"================="</span>);</span><br><span class="line">             Dog two=<span class="keyword">new</span> Dog();</span><br><span class="line">             two.setName(<span class="string">"妞妞"</span>);</span><br><span class="line">             two.setMonth(<span class="number">1</span>);</span><br><span class="line">             two.eat();</span><br><span class="line">             two.sleep(); </span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="方法的重写（上）"><a href="#方法的重写（上）" class="headerlink" title="方法的重写（上）"></a>方法的重写（上）</h4><p><strong>方法重载</strong></p>
<ul>
<li>在同一个类中。</li>
<li>方法名相同，参数列表不同（参数顺序、个数、类型）。</li>
<li>方法返回值、访问修饰符不做限制。</li>
<li>与方法的参数名无关。</li>
</ul>
<h4 id="方法的重写（下）"><a href="#方法的重写（下）" class="headerlink" title="方法的重写（下）"></a>方法的重写（下）</h4><p><strong>方法重写</strong></p>
<ul>
<li>有继承关系的子类中，子类去重写父类的方法。</li>
<li>方法名相同，参数列表完全相同（参数顺序、个数、类型），方法返回值可以允许是子类类型。</li>
<li>访问修饰符,访问范围需要大于等于父类的访问范围。与方法的参数名无关。</li>
<li>方法的参数名无关（不要求强制相同）。</li>
</ul>
<p>语法规则：</p>
<ul>
<li>返回值类型</li>
<li>方法名</li>
<li>参数类型、顺序、个数<br>这三个方面与方法的参数名无关<br>这些都要与父类继承的方法完全一致。<br>尤其是参数列表这条（类型、顺序、个数）要完全一致。</li>
</ul>
<p>方法的访问修饰符在一定范围内是允许有变化的。这里一定的范围是：访问范围需要大于等于父类的访问范围。</p>
<p>当子类重写父类方法后，子类对象调用的是重写后的方法。</p>
<p><strong>方法重载与方法重写对比（有带深入研究，该表并不做最后敲定。）</strong></p>
<table>
<thead>
<tr>
<th align="center">限定</th>
<th align="center">方法重载</th>
<th align="center">方法重写</th>
</tr>
</thead>
<tbody><tr>
<td align="center">位置</td>
<td align="center">在同一个类中</td>
<td align="center">有继承关系的子类中，子类去重写父类的方法</td>
</tr>
<tr>
<td align="center">访问修饰符</td>
<td align="center">不作限制</td>
<td align="center">访问范围需要大于等于父类的访问范围。</td>
</tr>
<tr>
<td align="center">方法名</td>
<td align="center">方法名相同</td>
<td align="center">方法名相同</td>
</tr>
<tr>
<td align="center">参数列表</td>
<td align="center">参数列表不同（参数顺序、个数、类型）</td>
<td align="center">参数列表完全相同（参数顺序、个数、类型）</td>
</tr>
<tr>
<td align="center">参数名</td>
<td align="center">与方法的参数名无关</td>
<td align="center">–</td>
</tr>
<tr>
<td align="center">方法返回值</td>
<td align="center">方法返回值不作限制</td>
<td align="center">方法返回值可以允许是子类类型</td>
</tr>
<tr>
<td align="center">Animal.java</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.animal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//昵称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> month;<span class="comment">//月份</span></span><br><span class="line">    <span class="keyword">private</span> String species;<span class="comment">//品种</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get/set方法。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> name;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.name = name;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMonth</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> month;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMonth</span><span class="params">(<span class="keyword">int</span> month)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.month = month;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getSpecies</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> species;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSpecies</span><span class="params">(String specieString)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.species = specieString;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">//吃东西</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">             System.out.println(<span class="keyword">this</span>.getName()+<span class="string">"在吃东西"</span>);</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(String name)</span> </span>{</span><br><span class="line">             System.out.println(name+<span class="string">"在吃东西"</span>);</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Dog.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.animal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>{</span><br><span class="line">       <span class="keyword">private</span> String sex;<span class="comment">//性别</span></span><br><span class="line">       <span class="comment">//无参构造。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>{</span><br><span class="line">       </span><br><span class="line">       }</span><br><span class="line">    <span class="comment">//get/set方法。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> sex;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.sex=sex;</span><br><span class="line">       }</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 方法重载：</span></span><br><span class="line"><span class="comment">        * 1、同一个类中。</span></span><br><span class="line"><span class="comment">        * 2、方法名相同，参数列表不同（参数顺序、个数、类型）</span></span><br><span class="line"><span class="comment">        * 3、方法返回值、访问修饰符任意。</span></span><br><span class="line"><span class="comment">        * 4、与方法的参数名无关。</span></span><br><span class="line"><span class="comment">        * </span></span><br><span class="line"><span class="comment">        * 方法重写：</span></span><br><span class="line"><span class="comment">        * 1、有继承关系的子类中。</span></span><br><span class="line"><span class="comment">        * 2、方法名相同，参数列表相同（参数顺序、个数、类型）方法返回值相同。</span></span><br><span class="line"><span class="comment">        * 3、访问修饰符,访问范围需要大于等于父类的访问范围。</span></span><br><span class="line"><span class="comment">        * 4、与方法的参数名是无关的。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="comment">//睡觉的方法。（方法重载）</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>{</span><br><span class="line">             System.out.println(<span class="keyword">this</span>.getName()+<span class="string">"现在"</span>+<span class="keyword">this</span>.getMonth()+<span class="string">"个月大，它在睡觉"</span>);</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">//子类重写父类吃东西的方法。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">             System.out.println(<span class="keyword">this</span>.getName()+<span class="string">"最近没有食欲"</span>);</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(String month)</span> </span>{</span><br><span class="line">             System.out.println(month+<span class="string">"最近没有食欲"</span>);</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Cat.Test</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.animal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>{</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">double</span> weight;<span class="comment">//体重</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//无参构造。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">//get/set方法。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWeight</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> weight;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeight</span><span class="params">(<span class="keyword">double</span> weight)</span></span>{</span><br><span class="line">             <span class="keyword">this</span>.weight=weight;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">//跑动的方法。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">             System.out.println(<span class="keyword">this</span>.getName()+<span class="string">"是一只"</span>+<span class="keyword">this</span>.getSpecies()+<span class="string">",它在快乐的奔跑"</span>);</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.animal.Cat;</span><br><span class="line"><span class="keyword">import</span> com.imooc.animal.Dog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		Cat one=<span class="keyword">new</span> Cat();</span><br><span class="line">		one.setName(<span class="string">"花花"</span>);</span><br><span class="line">		one.setSpecies(<span class="string">"中华田园猫"</span>);</span><br><span class="line">		one.eat();</span><br><span class="line">		one.run();</span><br><span class="line">System.out.println(<span class="string">"================="</span>);</span><br><span class="line">		Dog two=<span class="keyword">new</span> Dog();</span><br><span class="line">		two.setName(<span class="string">"妞妞"</span>);</span><br><span class="line">		two.setMonth(<span class="number">1</span>);</span><br><span class="line">		two.eat();</span><br><span class="line">		two.sleep();	</span><br><span class="line">System.out.println(<span class="string">"================="</span>);</span><br><span class="line">		two.eat(<span class="string">"凡凡"</span>);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>当子类重写父类方法后，子类对象调用的是重写后的方法。</p>
<h5 id="选择练习"><a href="#选择练习" class="headerlink" title="选择练习"></a>选择练习</h5><p>在JAVA中，以下程序的输出结果是（）<br><img src="en-resource://database/5615:1" alt="f2ec4357c978c2aa6ed654b1d9f40924.png"></p>
<p>A.  Super–&gt;print<br>B.  Test–&gt;print<br>C.    Super–&gt;print    Test–&gt;print<br>D.  编译错误</p>
<p>正确答案： A<br>参考解析：本题考查方法的重写，Super t=new Super()；定义的是父类的对象t，所以t.print()是父类对象调用父类自己的方法，故A选项正确。</p>
<h5 id="选择练习-1"><a href="#选择练习-1" class="headerlink" title="选择练习"></a>选择练习</h5><p>在JAVA中，以下关于方法重载和方法重写描述正确的是（）（选择一项）<br>A.  方法重载和方法重写实现的功能相同<br>B.  方法重载出现在父子关系中，方法重写是在同一类中<br>C.  方法重载的返回类型必须一致，参数项必须不同<br>D.  方法重写需要出现在满足继承关系</p>
<p>正确答案： D<br>参考解析：<br>本题考查方法的重载和重写，D选项正确。方法重写和方法重载的作用不同，故A选项错误；重载需要写在同一个类中，重写需要在满足继承关系的子类中，故B选项错误；重载的返回值类型可以不同，故C选项错误。</p>
<h4 id="方法重写后的碎碎念"><a href="#方法重写后的碎碎念" class="headerlink" title="方法重写后的碎碎念"></a>方法重写后的碎碎念</h4><p>虽然重写的概念，在java中仅限于方法上面，但是在子类中可以重新定义与父类重名的属性的。</p>
<h5 id="选择练习-2"><a href="#选择练习-2" class="headerlink" title="选择练习"></a>选择练习</h5><p>哪个选项中的方法插入到（1）处可以正确实现方法重写（）（选择一项）<br><img src="en-resource://database/5617:1" alt="c2e4dee9ab961b6905cc21ed2e82af2c.png"><br>A.  public static void bark(){}<br>B.  public final void display(){}<br>C.  public void eat(String food){}<br>D.  public boolean eat(String food){}</p>
<p>正确答案： C<br>参考解析：<br>静态方法和最终方法不能被重写；但静态方法在子类中可以通过隐藏父类方法的方式重新实现。 重写方法的返回值应该与父类方法相同或者是父类方法返回值的子类; 重写方法访问权限必须大于等于父类方法。</p>
<h5 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h5><p>编程练习：<br>请使用面向对象的思想，设计自定义类完成如下功能要求：</p>
<p>接收用户输入的信息，选择需要完成的工作任务。其中，可供选择的有：测试工作和研发工作。关于类型设定描述如下：</p>
<ul>
<li>测试工作<br>属性：工作名称、编写的测试用例个数、发现的Bug数量<br>方法：工作描述</li>
<li>研发工作<br>属性：工作名称、有效编码行数、目前没有解决的Bug个数<br>方法：工作描述<br>程序运行参考效果图如下：<br><img src="en-resource://database/5619:1" alt="0599e9837dc9756fbf963e3b9c844a52.png"></li>
</ul>
<p><strong>任务</strong><br>思路分析：<br>第一步：分析测试工作和研发工作的共性：<br>都是工作类型<br>都有工作名称的属性，工作描述的方法</p>
<p>第二步：根据共性，定义工作类<br>属性：工作名称<br>方法：<br>编写无参构造方法、带参构造方法完成对属性的赋值<br>编写工作描述的方法，描述内容为：开心工作。</p>
<p>第三步：定义测试工作类、研发工作类分别继承工作类，要求：<br>测试工作类：<br>增加属性：编写的测试用例个数、发现的Bug数量<br>在构造方法中调用父类相关赋值方法，完成属性赋值<br>重写运行方法，描述内容为：**的日报是：今天编写了**个测试用例，发现了**bug。其中**的数据由属性提供</p>
<p><strong>研发工作类：</strong></p>
<ol>
<li>增加属性：有效编码行数、目前没有解决的Bug个数。</li>
<li>在构造方法中调用父类相关赋值方法，完成属性赋值。</li>
<li>重写运行方法，描述内容为：<em>\</em>的日报是：今天编写了<em>\</em>行代码，目前仍然有<em>\</em>个bug没有解决。其中<em>\</em>的数据由属性提供。</li>
</ol>
<p><strong>原题</strong><br>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		System.out.print(<span class="string">"父类信息测试："</span>);</span><br><span class="line">	</span><br><span class="line">		System.out.print(<span class="string">"测试工作类信息测试："</span>);</span><br><span class="line">	</span><br><span class="line">		System.out.print(<span class="string">"研发工作类信息测试："</span>);</span><br><span class="line">	</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Work.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Work</span> </span>{</span><br><span class="line">    <span class="comment">// 属性：工作ming</span></span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 无参构造方法</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 带参构造方法，完成工作类型的赋值</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 公有的get***/set***方法完成属性封装</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 方法：工作描述，描述内容为：开心工作</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">work</span><span class="params">()</span> </span>{</span><br><span class="line">		</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div>
<p>TestWork.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestWork</span> <span class="keyword">extends</span> <span class="title">Work</span> </span>{</span><br><span class="line">    <span class="comment">//属性：编写的测试用例个数、发现的Bug数量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编写构造方法，并调用父类相关赋值方法，完成属性赋值</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 公有的get***/set***方法完成属性封装</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 重写运行方法，描述内容为：**的日报是：今天编写了**个测试用例，发现了**bug。其中**的数据由属性提供</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">work</span><span class="params">()</span> </span>{</span><br><span class="line">        </span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div>
<p>DevelopmentWork.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DevelopmentWork</span> <span class="keyword">extends</span> <span class="title">Work</span> </span>{</span><br><span class="line">    <span class="comment">// 属性：有效编码行数、目前没有解决的Bug个数</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//编写构造方法，并调用父类相关赋值方法，完成属性赋值</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 公有的get***/set***方法完成属性封装</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 重写运行方法，描述内容为：**的日报是：今天编写了**行代码，目前仍然有**个bug没有解决。其中**的数据由属性提供</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">work</span><span class="params">()</span> </span>{</span><br><span class="line">        </span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答</strong><br>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.work.DevelopmentWork;</span><br><span class="line"><span class="keyword">import</span> com.imooc.work.TestWork;</span><br><span class="line"><span class="keyword">import</span> com.imooc.work.Work;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">       Work one=<span class="keyword">new</span> Work();</span><br><span class="line">             System.out.println(<span class="string">"父类信息测试："</span>+one.Work());</span><br><span class="line">             TestWork tes=<span class="keyword">new</span> TestWork(<span class="number">10</span>,<span class="number">5</span>,<span class="string">"测试工作"</span>);</span><br><span class="line">             System.out.println(<span class="string">"测试工作类信息测试："</span>+tes.work());</span><br><span class="line">             DevelopmentWork dev=<span class="keyword">new</span> DevelopmentWork(<span class="number">1000</span>, <span class="number">10</span>,<span class="string">"研发工作"</span>);</span><br><span class="line">             System.out.println(<span class="string">"研发工作类信息测试："</span>+dev.work());</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Work.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.work;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Work</span> </span>{</span><br><span class="line">    <span class="comment">// 属性：工作ming</span></span><br><span class="line">    <span class="keyword">private</span> String workName ;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 无参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Work</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 带参构造方法，完成工作类型的赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Work</span><span class="params">(String name)</span> </span>{</span><br><span class="line">       setWorkName(name);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公有的get***/set***方法完成属性封装</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWorkName</span><span class="params">()</span> </span>{</span><br><span class="line">       <span class="keyword">return</span> workName;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWorkName</span><span class="params">(String workName)</span> </span>{</span><br><span class="line">       <span class="keyword">this</span>.workName=workName;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 方法：工作描述，描述内容为：开心工作</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">Work</span><span class="params">()</span> </span>{</span><br><span class="line">             String str=<span class="string">"开心工作"</span>;</span><br><span class="line">             <span class="keyword">return</span> str;</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>TestWork.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.work;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestWork</span> <span class="keyword">extends</span> <span class="title">Work</span> </span>{</span><br><span class="line">    <span class="comment">//属性：编写的测试用例个数、发现的Bug数量</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">int</span> testNum;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">int</span> bugNum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编写构造方法，并调用父类相关赋值方法，完成属性赋值</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">TestWork</span><span class="params">(<span class="keyword">int</span> testNum,<span class="keyword">int</span> bugNum,String name)</span></span>{</span><br><span class="line">             <span class="keyword">this</span>.setTestNum(testNum);</span><br><span class="line">             <span class="keyword">this</span>.setBugNum(bugNum);</span><br><span class="line">             <span class="keyword">this</span>.setWorkName(name);</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公有的get***/set***方法完成属性封装</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTestNum</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> testNum;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTestNum</span><span class="params">(<span class="keyword">int</span> testNum)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.testNum=testNum;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBugNum</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> bugNum;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBugNum</span><span class="params">(<span class="keyword">int</span> bugNum)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.bugNum=bugNum;</span><br><span class="line">       }</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 重写运行方法，描述内容为：**的日报是：今天编写了**个测试用例，发现了**bug。其中**的数据由属性提供</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">work</span><span class="params">()</span> </span>{</span><br><span class="line">             String str=<span class="keyword">this</span>.getWorkName()+<span class="string">"的今日报告是：今天写了"</span>+<span class="keyword">this</span>.getTestNum()+<span class="string">"个测试用例，发现了"</span>+getBugNum()+<span class="string">"个BUG"</span>;</span><br><span class="line">             <span class="keyword">return</span> str;</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>DevelopmentWork.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.work;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DevelopmentWork</span> <span class="keyword">extends</span> <span class="title">Work</span> </span>{</span><br><span class="line">    <span class="comment">// 属性：有效编码行数、目前没有解决的Bug个数</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">int</span> codeNum;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">int</span> planBug;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//编写构造方法，并调用父类相关赋值方法，完成属性赋值</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">DevelopmentWork</span><span class="params">(<span class="keyword">int</span> codeNum,<span class="keyword">int</span> planBug, String name)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.setCodeNum(codeNum);</span><br><span class="line">             <span class="keyword">this</span>.setPlanBug(planBug);</span><br><span class="line">             <span class="keyword">this</span>.setWorkName(name);</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">//无参构造</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">DevelopmentWork</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公有的get***/set***方法完成属性封装</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCodeNum</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> codeNum;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCodeNum</span><span class="params">(<span class="keyword">int</span> codeNum)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.codeNum=codeNum;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPlanBug</span><span class="params">()</span></span>{</span><br><span class="line">             <span class="keyword">return</span> planBug;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPlanBug</span><span class="params">(<span class="keyword">int</span> planBug)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.planBug=planBug;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 重写运行方法，描述内容为：**的日报是：今天编写了**行代码，目前仍然有**个bug没有解决。其中**的数据由属性提供</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">work</span><span class="params">()</span> </span>{</span><br><span class="line">             String str=<span class="keyword">this</span>.getWorkName()+<span class="string">"的今日报告是：今天写了"</span>+<span class="keyword">this</span>.getCodeNum()+<span class="string">"行代码，目前仍有"</span>+<span class="keyword">this</span>.getPlanBug()+<span class="string">"个BUG没有解决。"</span>;</span><br><span class="line">             <span class="keyword">return</span> str;</span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="访问修饰符的分类及作用"><a href="#访问修饰符的分类及作用" class="headerlink" title="访问修饰符的分类及作用"></a>访问修饰符的分类及作用</h4><p>访问修饰符</p>
<ul>
<li><p>公有的：public<br>只要能正确的加载public成员所在的类型，就可以通过这个类型，访问到它里面定义的public成员。访问权限最大，允许在任意位置访问。</p>
</li>
<li><p>默认：default<br>允许在当前类、同包子类/非子类调用；跨包子类不允许调用。</p>
</li>
<li><p>受保护的：protect<br>允许在当前类、同包子类、跨包子类调用；不允许跨包非子类调用。</p>
</li>
<li><p>私有的：private<br>访问限定最小的访问修饰符，只允许在本类中进行访问。</p>
</li>
</ul>
<p><img src="en-resource://database/5624:1" alt="94c34b7e73fb40874b11685bbe65be8b.png"></p>
<h4 id="访问修饰符对方法重写的影响"><a href="#访问修饰符对方法重写的影响" class="headerlink" title="访问修饰符对方法重写的影响"></a>访问修饰符对方法重写的影响</h4><p>访问修饰符，访问范围需要大于等于父类的访问范围。</p>
<h5 id="选择练习-3"><a href="#选择练习-3" class="headerlink" title="选择练习"></a>选择练习</h5><p>在下面程序的注释1处补充上下列（）方法，会导致在编译过程中发生错误（选择一项）<br><img src="en-resource://database/5628:1" alt="c993d33853b2d12e367f67960d13fb0d.png"><br>A.  public float getNum() { return 4.0f; }<br>B.  private float getNum() {return 4.0f;}<br>C.  public void getNum（double d）{}<br>D.  public double getNum（float d）{ return 4.0f; }</p>
<p>正确答案： B<br>参考解析：<br>本题考查的是方法的重写与重载，ACD选项正确。其中，A为子类重写父类方法；CD为子类默认继承父类方法后的重载方法；当子类重写父类中的方法时，如方法返回值为基本数据类型，则必须与原父类中方法返回值类型一致，因此B选项是会发生编译错误的。</p>
<h5 id="选择练习-4"><a href="#选择练习-4" class="headerlink" title="选择练习"></a>选择练习</h5><p>代码位置（1）处填写（）选项，可以使代码编译通过。（选择三项）<br><img src="en-resource://database/5630:1" alt="d119839f055b170481fa53d93428ae6e.png"><br>A.  private void bar(int x){}<br>B.  public void bar(int x){}<br>C.  public int bar(String x){return 1;}<br>D.  public Alpha bar(int x){return new Alpha();}<br>E.  public void bar(int x,int y){}<br>F.  public int bar(int x){return x;}</p>
<p>正确答案： B,C,E<br>参考解析：<br>本题是考察方法重载和重写的，A选项错误，重写方法的访问修饰限定范围需要大于等于父类方法；B选项正确，是合法的重写。C、E选项正确，与从父类继承的方法构成了重载。D、F选项错误，重写方法的返回值可以设置为与父类方法相同或是为父类方法返回值的子类，而该选项中返回值不满足这两个条件。故正确选项是BCE。</p>
<h4 id="super关键字的使用（上）"><a href="#super关键字的使用（上）" class="headerlink" title="super关键字的使用（上）"></a>super关键字的使用（上）</h4><p>super：父类对象的引用。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//睡觉的方法。（方法重载）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>{</span><br><span class="line">      <span class="function"><span class="keyword">super</span> <span class="title">eat</span><span class="params">()</span></span>;<span class="comment">//调用的哪个eat();</span></span><br><span class="line">      <span class="keyword">super</span>.species=<span class="string">"犬科"</span>;</span><br><span class="line">      System.out.println(<span class="keyword">this</span>.getName()+<span class="string">"现在"</span>+<span class="keyword">this</span>.getMonth()+<span class="string">"个月大，它在睡觉"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>方法父类的构造不允许被继承、不允许被重写。<br>Animal.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.animal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>{</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * private：只允许在本类中进行访问。</span></span><br><span class="line"><span class="comment">        * public:允许在任意位置访问。</span></span><br><span class="line"><span class="comment">        * protected：允许在当前类、同包子类/非子类、跨包子类调用；跨包非子类不允许。</span></span><br><span class="line"><span class="comment">        * 默认允许在当前类、同包子类/非子类调用；跨包子类。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="keyword">private</span> String name;<span class="comment">//昵称</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">int</span> month;<span class="comment">//月份</span></span><br><span class="line">       <span class="keyword">private</span> String species;<span class="comment">//品种</span></span><br><span class="line">================================================</span><br><span class="line">       <span class="comment">//无参构造。父类构造不允许被继承、也不允许被重写。？</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line">================================================</span><br><span class="line">       <span class="comment">//get/set方法。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> name;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.name = name;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMonth</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> month;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMonth</span><span class="params">(<span class="keyword">int</span> month)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.month = month;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getSpecies</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> species;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSpecies</span><span class="params">(String specieString)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.species = specieString;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">//吃东西</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>{</span><br><span class="line">             System.out.println(<span class="keyword">this</span>.getName()+<span class="string">"在吃东西"</span>);</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="继承的初始化顺序"><a href="#继承的初始化顺序" class="headerlink" title="继承的初始化顺序"></a>继承的初始化顺序</h4><p><img src="en-resource://database/5671:1" alt="02c205dbfa5c53920fe5e8fc0f7666d1.png"><br>在满足继承条件下，子类加载顺序如下：<br>首先在执行程序的时候，会完成类的加载，在加载的过程当中，会优先加载父类静态成员，然后加载子类静态成员。<br>在子类对象实例化的过程当中，会逐层完成父类对象（属性、构造代码块、构造方法）加载，然后才会去完成子类对象的相关加载操作。<br><img src="en-resource://database/5957:1" alt="fbb68e13e6d4129467e4b253a0598be0.png"></p>
<p>在静态信息加载的时候，访问修饰符不影响成员加载顺序，跟书写位置有关。</p>
<h5 id="选择练习-5"><a href="#选择练习-5" class="headerlink" title="选择练习"></a>选择练习</h5><p>以下程序正确的输出结果是：（）（选择一项）<br><img src="en-resource://database/5632:1" alt="64ca2f7e4346f6d14ce75307b92ae527.png"></p>
<p>A.<img src="en-resource://database/5634:1" alt="32491661c464dae70c397cfe52935e2e.png"><br>B.<img src="en-resource://database/5636:1" alt="4c1834e979b0c99c3dce23d002dd1932.png"><br>C.<img src="en-resource://database/5638:1" alt="2190cfcdff389e1959984c378023358a.png"><br>D.<img src="en-resource://database/5640:1" alt="03ee12d282230aa7728ebee652d554c3.png"></p>
<p>正确答案： A<br>参考解析：<br>本题考查继承关系的初始化顺序，子类对象实例化的时候会在子类构造方法的第一行调用父类构造方法，父类构造方法执行完毕，再继续执行子类构造方法。故A选项是正确的。</p>
<h5 id="选择练习-6"><a href="#选择练习-6" class="headerlink" title="选择练习"></a>选择练习</h5><p>如下Java源文件，编译并运行Child.java后，以下结果描述正确的是（ ）（选择一项）<br><img src="en-resource://database/5642:1" alt="5506a5883440f143d062d1a5373216be.png"></p>
<p>A编译错误：没有找到构造器Child()<br>B编译错误：没有找到构造器Parent1()<br>C正确运行，没有输出值<br>D正确运行，输出结果为：parent2</p>
<p>正确答案： B<br>参考解析：<br>本题考查继承关系的初始化顺序，子类构造方法中默认调用父类无参构造方法，如果没有则会编译报错，故B选项正确。</p>
<h4 id="super关键字的使用-下"><a href="#super关键字的使用-下" class="headerlink" title="super关键字的使用(下)"></a>super关键字的使用(下)</h4><p><img src="en-resource://database/5650:1" alt="921f8b248450252a924c90f4e4f3d26b.png"></p>
<ul>
<li>子类的构造的过程中必须调用其父类的构造方法。</li>
<li>如果子类的构造方法中没有显示标注，则系统默认调用父类无参的构造方法（父类的无参构造在子类实例化过程中有着举足轻重的作用）。</li>
<li>如果子类构造方法中既没有显示标注， 且父类中没有无参的构造方法，则编译出错。</li>
<li>子类构造默认调用无参构造方法，可以通过super() 调用父类允许被访问的其他构造方法。</li>
<li>使用super调用父类指定构造方法，必须在子类的构造方法有效代码的第一行。</li>
</ul>
<h5 id="选择练习-7"><a href="#选择练习-7" class="headerlink" title="选择练习"></a>选择练习</h5><p>分析如下所示的Java代码，则选项中的说法正确的是（）(选择一项)<br><img src="en-resource://database/5652:1" alt="f9626b0b88e46893d3ca28277aa5f4b7.png"></p>
<p>A.  第2行错误，Test类的构造函数中参数名称应与其父类构造函数中的参数名相同。<br>B.  第3行错误，应使用super关键字调用父类的name属性，改为super.name=”hello”。<br>C.  第4行错误，调用父类构造方法的语句必须放在子类构造方法的第一行。<br>D.  程序编译通过，无错误。</p>
<p>正确答案： C<br>参考解析：<br>本题考查在子类中调用父类构造方法的内容，子类构造方法中，如果使用super关键字调用父类构造方法时，必须放在子类构造方法有效代码段的第一行，故C选项正确。</p>
<h5 id="选择练习-8"><a href="#选择练习-8" class="headerlink" title="选择练习"></a>选择练习</h5><p>关于super的说法正确的是（）（选择一项）<br>A.  是指当前子类的对象。<br>B.  是指当前类的对象。<br>C.  是指当前父类的对象。<br>D.  可以用在main()方法中。</p>
<p>正确答案： C<br>参考解析：<br>本题考查super关键字的使用，super是指当前父类的对象，且不可以在main方法中使用，故C选项正确。</p>
<h5 id="选择练习-9"><a href="#选择练习-9" class="headerlink" title="选择练习"></a>选择练习</h5><p>阅读下面JAVA代码片段，正确的选项是（）。（选择一项）<br><img src="en-resource://database/5654:2" alt="554c2696a1afc217fd8bea6497d8406c.png"></p>
<p>A.  第1行编译错误，但能输出正确结果<br>B.  第2行编译错误，但能输出正确结果<br>C.  第3行编译错误，不能输出正确结果<br>D.  第4行编译错误，不能输出正确结果</p>
<p>正确答案： B<br>参考解析：<br>本题考查继承，子类继承父类时，默认调用父类的无参构造方法，如果父类中没有无参构造方法，且子类构造方法中，没有通过super调用父类其他构造方法，则会编译报错，因此第二行编译错误。但是主方法创建对象时，调用的是另外的构造方法，因此可以输出结果。故B选项说法是正确的。</p>
<h4 id="super-pk-this"><a href="#super-pk-this" class="headerlink" title="super pk this"></a>super pk this</h4><p><img src="en-resource://database/5659:1" alt="caafc91ec870105414574c00cc06d1f2.png"><br><img src="en-resource://database/5664:1" alt="98f93e74946b52dad198681a5e373f3b.png"></p>
<p>当进行构造方法之间调用的时候，this和super只能出现一个，因为他们都会抢占构造方法有效代码第一行的位置。</p>
<h5 id="选择练习-10"><a href="#选择练习-10" class="headerlink" title="选择练习"></a>选择练习</h5><p>下列关于super和this的说法正确的是（）（选择三项）<br>A.  this关键字通常指当前对象<br>B.  super关键字则指父类对象<br>C.  在一个类中this只可以调用当前类中公有属性和方法<br>D.  在一个类中super可以调用父类中允许被访问的属性和方法</p>
<p>正确答案： A,B,D<br>参考解析：<br>本题考查this和super的使用，在一个类中this可以调用当前类中允许被访问属性和方法，因此C选项的说法是错误的。正确答案是ABD。</p>
<h5 id="编程练习-1"><a href="#编程练习-1" class="headerlink" title="编程练习"></a>编程练习</h5><p>编程练习：某公司要开发“XX车行管理系统”，请使用面向对象的思想，设计自定义类描述自行车、电动车和三轮车。程序参考运行效果图如下：<br><img src="en-resource://database/5666:1" alt="4724af6d27fa026db05255c30e1f7f45.png"><br>任务<br>任务分析；<br>第一步：分析自行车、电动车和三轮车的共性：</p>
<ol>
<li>都是非机动车，具有非机动车的基本特征</li>
<li>都有运行的方法</li>
</ol>
<p>第二步：根据共性，定义非机动车<br>属性：品牌、颜色、轮子(默认2个)、座椅（默认   1个）<br>方法：</p>
<ol>
<li><p>编写无参构造方法、双参构造方法和四参构造方法，其中，在双参构造方法中，完成对品牌和颜色的赋值；在四参构造方法中，完成对所有属性的赋值</p>
</li>
<li><p>编写运行的方法，描述内容为：这是一辆<em>\</em>颜色的，<em>\</em>牌的非机动车，有<em>\</em>个轮子，有<em>\</em>个座椅的非机动车。其中<em>\</em>的数据由属性提供</p>
</li>
</ol>
<p>第三步：定义自行车、电动车和三轮车分别继承自行车类，要求：</p>
<ol>
<li>自行车类：在构造方法中调用父类多参构造，完成属性赋值</li>
<li>重写运行方法，描述内容为：这是一辆<em>\</em>颜色的，<em>\</em>牌的自行车。其中<em>\</em>的数据由属性提供</li>
</ol>
<p>电动车：</p>
<ol>
<li>增加“电池品牌”属性</li>
<li>重写运行方法，描述内容为：这是一辆使用<em>\</em>牌电池的电动车。其中<em>\</em>的数据由属性提供</li>
</ol>
<p>三轮车：</p>
<ol>
<li>在无参构造中实现对轮子属性值进行修改</li>
<li>重写运行方法，描述内容为：三轮车是一款有<em>\</em>个轮子的非机动车。其中<em>\</em>的数据由属性提供</li>
</ol>
<p><strong>原题</strong><br>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		System.out.print(<span class="string">"父类信息测试："</span>);</span><br><span class="line"></span><br><span class="line">		System.out.print(<span class="string">"自行车类信息测试："</span>);</span><br><span class="line"></span><br><span class="line">		System.out.print(<span class="string">"电动车类信息测试："</span>);</span><br><span class="line"></span><br><span class="line">		System.out.print(<span class="string">"三轮车类信息测试："</span>);</span><br><span class="line">		</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div>
<p>NonMotor.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonMotor</span> </span>{</span><br><span class="line">    <span class="comment">// 私有属性：品牌、颜色、轮子(默认2个)、座椅（默认 1个）</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 无参构造方法</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 双参构造方法，完成对品牌和颜色的赋值</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 四参构造方法，分别对所有属性赋值</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 公有的get***/set***方法完成属性封装</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 方法：运行，描述内容为：这是一辆**颜色的，**牌的非机动车，有**个轮子，有**个座椅的非机动车。其中**的数据由属性提供</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">work</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">return</span> str;</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div>
<p>Bicycle.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span> <span class="keyword">extends</span> <span class="title">NonMotor</span> </span>{</span><br><span class="line">    <span class="comment">// 在构造方法中调用父类多参构造，完成属性赋值</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 重写运行方法，描述内容为：这是一辆**颜色的，**牌的自行车。其中**的数据由属性提供</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div>
<p>ElectricVehicle.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElectricVehicle</span> <span class="keyword">extends</span> <span class="title">NonMotor</span> </span>{</span><br><span class="line">    <span class="comment">// 私有属性：电池品牌</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 公有的get***/set***方法完成属性封装</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 重写运行方法，描述内容为：这是一辆使用**牌电池的电动车。其中**的数据由属性提供</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div>
<p>Tricycle.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tricycle</span> <span class="keyword">extends</span> <span class="title">NonMotor</span> </span>{</span><br><span class="line">    <span class="comment">// 在无参构造中实现对轮子属性值进行修改</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 重写运行方法，描述内容为：三轮车是一款有**个轮子的非机动车。其中**的数据由属性提供</span></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答</strong><br>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.car.Bicycle;</span><br><span class="line"><span class="keyword">import</span> com.imooc.car.ElectricVehicle;</span><br><span class="line"><span class="keyword">import</span> com.imooc.car.NonMotor;</span><br><span class="line"><span class="keyword">import</span> com.imooc.car.Tricycle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        NonMotor non=<span class="keyword">new</span> NonMotor(<span class="string">"天宇"</span>,<span class="string">"红"</span>,<span class="number">4</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"父类信息测试："</span>+non.work());</span><br><span class="line">        Bicycle bic=<span class="keyword">new</span> Bicycle(<span class="string">"捷安特"</span>,<span class="string">"黄"</span>);</span><br><span class="line">        System.out.println(<span class="string">"自行车类信息测试："</span>+bic.work());</span><br><span class="line">        ElectricVehicle EleVeh=<span class="keyword">new</span> ElectricVehicle(<span class="string">"飞鸽"</span>);</span><br><span class="line">        System.out.println(<span class="string">"电动车类信息测试："</span>+EleVeh.work());</span><br><span class="line">        Tricycle tri=<span class="keyword">new</span> Tricycle(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"三轮车类信息测试："</span>+tri.work());</span><br><span class="line">       }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div>
<p>NonMotor.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonMotor</span> </span>{</span><br><span class="line">    <span class="comment">// 私有属性：品牌、颜色、轮子(默认2个)、座椅（默认 1个）</span></span><br><span class="line">	<span class="keyword">private</span> String brand;<span class="comment">//品牌</span></span><br><span class="line">	<span class="keyword">private</span> String color;<span class="comment">//颜色</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> wheelNum=<span class="number">2</span>;<span class="comment">//轮子默认2个</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> seatNum=<span class="number">1</span>;<span class="comment">//座椅默认1个</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 无参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NonMotor</span><span class="params">()</span></span>{</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">	<span class="comment">// 双参构造方法，完成对品牌和颜色的赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NonMotor</span><span class="params">(String brand,String color)</span></span>{</span><br><span class="line">        tpackage com.imooc.car;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonMotor</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有属性：品牌、颜色、轮子(默认2个)、座椅（默认 1个）</span></span><br><span class="line">       <span class="keyword">private</span> String brand;</span><br><span class="line">       <span class="keyword">private</span> String color;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">int</span> carriage;<span class="comment">//车轮</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">int</span> seat; </span><br><span class="line"></span><br><span class="line">       <span class="comment">// 无参构造方法</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">NonMotor</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 双参构造方法，完成对品牌和颜色的赋值</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">NonMotor</span><span class="params">(String brand,String color)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.setBrand(brand);</span><br><span class="line">             <span class="keyword">this</span>.setColor(color);</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 四参构造方法，分别对所有属性赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NonMotor</span><span class="params">(String brand,String color,<span class="keyword">int</span> carriage,<span class="keyword">int</span> seat)</span> </span>{</span><br><span class="line">       <span class="keyword">this</span>.setBrand(brand);</span><br><span class="line">             <span class="keyword">this</span>.setColor(color);</span><br><span class="line">             <span class="keyword">this</span>.setCarriage(carriage);</span><br><span class="line">             <span class="keyword">this</span>.setSeat(seat);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公有的get***/set***方法完成属性封装。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getBrand</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> brand;</span><br><span class="line">       }</span><br><span class="line">       </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrand</span><span class="params">(String brand)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.brand = brand;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> color;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.color = color;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCarriage</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> carriage;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCarriage</span><span class="params">(<span class="keyword">int</span> carriage)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.carriage = carriage;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSeat</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> seat;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSeat</span><span class="params">(<span class="keyword">int</span> seat)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.seat = seat;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 方法：运行，描述内容为：这是一辆**颜色的，**牌的非机动车，有**个轮子，有**个座椅的非机动车。其中**的数据由属性提供</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">work</span><span class="params">()</span> </span>{</span><br><span class="line">             String str=<span class="string">"这是一辆"</span>+<span class="keyword">this</span>.getColor()+<span class="string">"颜色的，"</span>+<span class="keyword">this</span>.getBrand()+<span class="string">"牌的非机动车，有"</span>+<span class="keyword">this</span>.getCarriage()+<span class="string">"个轮子，有"</span>+<span class="keyword">this</span>.getSeat()+<span class="string">"个座椅的非机动车。"</span>;</span><br><span class="line">             <span class="keyword">return</span> str;</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Bicycle.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.car;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span> <span class="keyword">extends</span> <span class="title">NonMotor</span> </span>{</span><br><span class="line">    <span class="comment">// 在构造方法中调用父类多参构造，完成属性赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bicycle</span><span class="params">()</span></span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bicycle</span><span class="params">(String brand,String color)</span></span>{</span><br><span class="line">        <span class="keyword">super</span>(brand,color);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">       <span class="comment">// 重写运行方法，描述内容为：这是一辆**颜色的，**牌的自行车。其中**的数据由属性提供</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">work</span><span class="params">()</span> </span>{</span><br><span class="line">       String str=<span class="string">"这是一辆"</span>+<span class="keyword">this</span>.getColor()+<span class="string">"颜色的，"</span>+<span class="keyword">this</span>.getBrand()+<span class="string">"牌的自行车。"</span>; </span><br><span class="line">       <span class="keyword">return</span> str;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>ElectricVehicle.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.car;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElectricVehicle</span> <span class="keyword">extends</span> <span class="title">NonMotor</span> </span>{</span><br><span class="line">    <span class="comment">// 私有属性：电池品牌。</span></span><br><span class="line">       <span class="keyword">private</span> String batteryBrand;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">ElectricVehicle</span><span class="params">(String brand)</span> </span>{</span><br><span class="line">             <span class="keyword">super</span>.setBrand(brand);</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公有的get***/set***方法完成属性封装。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getBatteryBrand</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> batteryBrand;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBatteryBrand</span><span class="params">(String batteryBrand)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.batteryBrand = batteryBrand;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 重写运行方法，描述内容为：这是一辆使用**牌电池的电动车。其中**的数据由属性提供</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">work</span><span class="params">()</span> </span>{</span><br><span class="line">             String str=<span class="string">"这是一辆使用"</span>+<span class="keyword">this</span>.getBrand()+<span class="string">"牌电池的电动车。"</span>;</span><br><span class="line">             <span class="keyword">return</span> str;</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Tricycle.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.car;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tricycle</span> <span class="keyword">extends</span> <span class="title">NonMotor</span> </span>{</span><br><span class="line">    <span class="comment">// 在无参构造中实现对轮子属性值进行修改</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Tricycle</span><span class="params">(<span class="keyword">int</span> num)</span> </span>{</span><br><span class="line">             <span class="keyword">super</span>.setCarriage(num);</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 重写运行方法，描述内容为：三轮车是一款有**个轮子的非机动车。其中**的数据由属性提供</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">work</span><span class="params">()</span> </span>{</span><br><span class="line">             String str=<span class="string">"三轮车是一款有"</span>+<span class="keyword">this</span>.getCarriage()+<span class="string">"个轮子的非机动车。"</span>;</span><br><span class="line">             <span class="keyword">return</span> str;</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h3><h4 id="Object类介绍（上）"><a href="#Object类介绍（上）" class="headerlink" title="Object类介绍（上）"></a>Object类介绍（上）</h4><ul>
<li>Object类是所有类的父类。</li>
<li>一个类没有使用extends关键字明确标识继承关系，则默认继承Object类（包括数组）。</li>
<li>Java中的每个类都可以使用Object中定义的方法。</li>
</ul>
<p><strong>资料查找方法：</strong></p>
<ul>
<li>oracle官网可以查找java源码API解释。该说法有待校正。</li>
</ul>
<p><strong>equals</strong></p>
<ul>
<li>当它是直接继承自Object中的equals方法时，比较的是两个引用是否指向同一个空间。</li>
<li>同时子类可以通过重写equals方法的形式，改变比较的内容。</li>
</ul>
<p><strong>注意：</strong>对象之间相互操作的时候，空指针异常需要注意判断规避。</p>
<p>Animal.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">演示代码有待梳理</span><br></pre></td></tr></tbody></table></figure></div>
<p><img src="en-resource://database/3269:1" alt="96179f030b977e06b60c00bd73229c52.png"><br>相等符号的比较结果依然是false，毕竟是用new关键字指向不同空间。equals方法比较结果是ture，因为在string类型当中，它自己重写了父类Object当中的equals方法，所以它只比的是里面字符串的内容。</p>
<h4 id="Object类介绍（中）"><a href="#Object类介绍（中）" class="headerlink" title="Object类介绍（中）"></a>Object类介绍（中）</h4><p>equals测试：继承Object中的equals方法时，比较的是两个引用是否指向同一个对象子类可以通过重写equals方法的形式，改变比较的内容</p>
<p><strong>Animal.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//方法的重写。</span></span><br><span class="line"><span class="comment">//重写Object的equals方法。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(obj==<span class="keyword">null</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line">    Animal temp=(Animal)obj;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.getName().equals(temp.getName())&amp;&amp;(<span class="keyword">this</span>.getMonth()==temp.getMonth())){</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法的重载。</span></span><br><span class="line"><span class="comment">//是针对Animal当中的equals方法而产生的重载方法。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Animal obj)</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(obj==<span class="keyword">null</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.getName().equals(obj.getName())&amp;&amp;(<span class="keyword">this</span>.getMonth()==obj.getMonth())){</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h5 id="选择练习-11"><a href="#选择练习-11" class="headerlink" title="选择练习"></a>选择练习</h5><p>下列关于Object类的叙述错误的是（）（选择一项）<br>A.  Object类是所有类的父类。<br>B.  所有类都可以继承Object中允许被继承的方法。<br>C.  一个类没有使用extends关键字明确标识继承关系，则默认继承Object类。<br>D.  要想继承Object类，必须使用extends关键字标识继承关系，否则不会实现继承。</p>
<p>正确答案： D<br>参考解析：<br>本题考查Object类，Object类是所有类的父类，一个类没有extends关键字标明继承关系，则该类就会默认继承Object类。故D选项的说法是错误的。</p>
<h4 id="Object类介绍（下）"><a href="#Object类介绍（下）" class="headerlink" title="Object类介绍（下）"></a>Object类介绍（下）</h4><p><strong>toString（打印出字符串的表现形式：类名+@+对象在内存中位置表现的hash值）</strong></p>
<ul>
<li>输出对象名时，默认会直接调用类中的toString方法。</li>
<li>继承Object中的toString方法时，输出对象的字符串表示形式：类型信息+@+地址信息。</li>
<li>子类可以通过重写toString方法的形式，改变输出的内容以及表现形式。</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//这两种输出结果一样。证明了：输出对象名时，默认会直接调用类中的toString方法。</span></span><br><span class="line">System.out.println(one.toString());</span><br><span class="line">System.out.println(one.);</span><br><span class="line">==========================================</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"昵称"</span>+<span class="keyword">this</span>.getName()+<span class="string">";年龄："</span>+<span class="keyword">this</span>.getMonth();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h5 id="选择练习-12"><a href="#选择练习-12" class="headerlink" title="选择练习"></a>选择练习</h5><p>该段代码的运行结果为：（选择一项）<br><img src="en-resource://database/5673:1" alt="68692467ccba7403a1739dae4514561f.png"><br>A.  true<br>B.  相等<br>C.  不相等<br>D.  false</p>
<p>正确答案： D<br>参考解析：<br>本题考查equals()方法的使用，当类中没有equals方法时，默认比较对象的引用不是指向同一空间，所以返回值为false，故D选项正确。</p>
<h5 id="编程练习-2"><a href="#编程练习-2" class="headerlink" title="编程练习"></a>编程练习</h5><p>请使用面向对象的思想，设计自定义类Person继承Object类，重写toString方法实现对象信息输出。<br>运行效果如下图所示：<br><img src="en-resource://database/5675:1" alt="d9cb3dbb08c47dbdad9c5c595f4ac97b.png"></p>
<p>任务<br>思路分析<br>1、创建一个 Person 类继承自 Object，其中类的结构要求为：</p>
<ul>
<li>属性：name（姓名）、age(年龄)、sex（性别）<br>方法：</li>
<li>创建带参（name、age、sex为参数）构造方法</li>
<li>重写 toString 方法，输出信息格式为：姓名：** 年龄：** 性别：<strong>（其中，</strong>为对象对应属性值）</li>
</ul>
<p>2、创建测试类，在测试方法中，实例化 Person对 象，并传入三个属性值。然后，分别通过直接打印Person对象以及利用重写的 toString 方法，打印输出2行对象信息。</p>
<p><strong>原题</strong><br>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">       <span class="comment">//实例化对象，传入属性值（李明, 男,18）</span></span><br><span class="line">	</span><br><span class="line">       <span class="comment">//打印输出对象信息</span></span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Person.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>{</span><br><span class="line">    <span class="comment">//私有属性：name（姓名）、age(年龄)、sex（性别）</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//带参构造方法（name、age、sex为参数）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过封装实现对属性的get/set方法设定</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写toString方法，表示形式为：姓名：+**+  年龄：+**+  性别：+**</span></span><br><span class="line">	</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答</strong><br>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">       <span class="comment">//实例化对象，传入属性值（李明, 男,18）</span></span><br><span class="line">	Person per = <span class="keyword">new</span> Person(<span class="string">"李明"</span>,<span class="number">18</span>,<span class="string">"男"</span>);</span><br><span class="line">       <span class="comment">//打印输出对象信息</span></span><br><span class="line">       System.out.println(<span class="string">"姓名："</span>+ per.getName()+<span class="string">" 年龄："</span>+per.getAge()+<span class="string">" 性别："</span>+per.getSex());</span><br><span class="line">       System.out.println(per.toString());</span><br><span class="line">       System.out.println(per);<span class="comment">//与 System.out.println(per.toString());输出结果是一致的，一般情况下toString()方法可以省略，输出对象时会自动调用重写的toString()方法。</span></span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Person.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>{</span><br><span class="line">    <span class="comment">//私有属性：name（姓名）、age(年龄)、sex（性别）</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//带参构造方法（name、age、sex为参数）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age,String sex)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.setName(name);</span><br><span class="line">        <span class="keyword">this</span>.setAge(age);</span><br><span class="line">        <span class="keyword">this</span>.setSex(sex);</span><br><span class="line">    }</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//通过封装实现对属性的get/set方法设定</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//重写toString方法，表示形式为：姓名：+**+  年龄：+**+  性别：+**</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>{</span><br><span class="line">	   String str = <span class="string">"姓名："</span>+ <span class="keyword">this</span>.getName()+<span class="string">" 年龄："</span>+<span class="keyword">this</span>.getAge()+<span class="string">" 性别："</span>+<span class="keyword">this</span>.getSex();</span><br><span class="line">	   <span class="keyword">return</span> str;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>同学你好，代码运行正确，程序简洁，写的很棒哦~根据题目要求，可以再增加一行代码System.out.println(per);与 System.out.println(per.toString());输出结果是一致的，一般情况下toString()方法可以省略，输出对象时会自动调用重写的toString()方法</p>
<h5 id="选择练习-13"><a href="#选择练习-13" class="headerlink" title="选择练习"></a>选择练习</h5><p>在Java中，关于继承的说法错误的是（）（选择一项）<br>A.  使用extends关键字实现一个类继承另一个类<br>B.  所有的Java类都直接或间接地继承了java.lang.Object类<br>C.  在子类的构造方法中，必须显式调用父类的构造方法<br>D.  在子类的构造方法中，可以通过super关键字调用父类的构造方法</p>
<p>正确答案： C<br>参考解析：<br>本题考查继承的知识点，在子类的构造方法中，可以不显示调用父类的构造方法，默认系统会自动调用父类的无参构造方法，故C选项的说法是错误的。</p>
<h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><h4 id="final关键字的使用（上）"><a href="#final关键字的使用（上）" class="headerlink" title="final关键字的使用（上）"></a>final关键字的使用（上）</h4><p>final class：该类没有子类 。 </p>
<p>书写形式： </p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">final</span> </span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">final</span> </span>;</span><br></pre></td></tr></tbody></table></figure></div>
<p>方法：<br>该方法不允许被子类重写，但是可以正常被子类继承使用。</p>
<p>final 方法内局部变量：<br>只要在具体被使用之前进行赋值即可，一旦赋值不允许被修改。</p>
<p>类中成员属性：<br>赋值过程：<br>1、定义直接初始化。<br>2、构造方法。<br>3、构造代码块。</p>
<h4 id="final关键字的使用（下）"><a href="#final关键字的使用（下）" class="headerlink" title="final关键字的使用（下）"></a>final关键字的使用（下）</h4><p>final小结<br>1、修饰类表示不允许被继承。<br>2、修饰方法表示不允许被子类重写。final修饰的方法可以被继承。不能修饰构造方法。<br>3、修饰变量表示不允许被修改。</p>
<ul>
<li>方法内部的局部变量  –&gt;  在使用之前被初始化赋值即可。</li>
<li>类中成员变量  –&gt;  只能在定义时、构造方法、构造代码块中进行初始化。</li>
<li>基本数据类型的变量  –&gt;  初始赋值之后不能更改。</li>
<li>引用类型的变量  –&gt;  初始化之后不能再指向另一个对象，但对象的内容是可变的。</li>
</ul>
<p>4、可以配合satic使用。</p>
<ul>
<li>可以修饰方法和变量。</li>
<li>可以修饰配置信息（只需要加载一次，又不需要进行后续修改的）。<br>public static final String URL=”<a href="http://www.imooc.com&quot;/">www.imooc.com"</a></li>
</ul>
<p>5、使用final修饰可以提高性能，但是会降低可扩展性。</p>
<p>alt+/  调取快捷提示菜单。<br><img src="en-resource://database/5979:1" alt="ace49189b4e5033dec34e54b7607915b.png"></p>
<h5 id="选择练习-14"><a href="#选择练习-14" class="headerlink" title="选择练习"></a>选择练习</h5><p>下列关于final的说法错误的是（）。（选择一项）<br>A、final修饰的变量值不允许被修改<br>B、final修饰的方法不可被重写<br>C、final可以修饰所有方法<br>D、final不可以修饰构造方法</p>
<p>正确答案： C</p>
<p>参考解析：<br>本题考查final关键字的使用，final不可以修饰构造方法，所以C选项错误，ABD选项是正确的。</p>
<h5 id="选择练习-15"><a href="#选择练习-15" class="headerlink" title="选择练习"></a>选择练习</h5><p>MAX_LENGTH是int型public成员变量，数值保持为常量100，以下定义正确的是（）（选择两项）<br>A、public int MAX_LENGTH=100;<br>B、final int MAX_LENGTH=100;<br>C、final public int MAX_LENGTH=100;<br>D、public final int MAX_LENGTH=100;</p>
<p>正确答案： C,D</p>
<p>参考解析：<br>本题考查常量的定义，可以通过public final修饰开放的常量，故CD选项正确。A选项错误，缺少final；B选项错误，缺少public。</p>
<h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><h4 id="注解简介"><a href="#注解简介" class="headerlink" title="注解简介"></a>注解简介</h4><ul>
<li>JDK1.5版本引入的一个特性。</li>
<li>可以声明在包、类、属性、方法、局部变量、方法参数灯的前面，用来对这些元素进行说明、注释。</li>
</ul>
<p><img src="en-resource://database/5683:1" alt="db6d9e670ef69153a4d44854d4fe8e94.png"></p>
<ul>
<li>源码注解：注解只在源码中存在，编译成  .class  文件就不存在了。</li>
<li>编译时注解：注解在源码和  .class  文件中都存在（往往会影响运行结果）。</li>
<li>运行时注解：在运行阶段还起作用，甚至会影响运行逻辑的注解。</li>
<li>元注解：对注解进行注释的。</li>
</ul>
<p>可以用@Override来检测方法重写是否规范。</p>
<h5 id="选择练习-16"><a href="#选择练习-16" class="headerlink" title="选择练习"></a>选择练习</h5><p>注解按照运行机制分为（）（选择三项）<br>A.  JDK注解<br>B.  源码注解<br>C.  编译时注解<br>D.  运行时注解</p>
<p>正确答案： B,C,D<br>参考解析：<br>本题考查注解的分类，注解按照机制分为源码注解、编译时注解、运行时注解。故BCD正确。</p>
<h5 id="编程练习-3"><a href="#编程练习-3" class="headerlink" title="编程练习"></a>编程练习</h5><p>请使用面向对象的思想，实现杨梅和仙人蕉的信息描述。<br>程序参考运行效果图如下：<br><img src="en-resource://database/5981:1" alt="e012304157ab46445cada988075d157a.png"></p>
<p>任务<br>思路分析：<br>1、根据杨梅和香蕉的共性，抽取父类水果（Fruits）<br>私有属性：水果的形状（shape）和口感（taste）<br>方法：</p>
<ol>
<li>带参构造函数（参数为shape和taste）</li>
<li>创建无参无返回值得方法eat（描述内容为：水果可供人们食用！）</li>
<li>重写equals方法，比较两个对象是否相等（比较shape，taste）</li>
</ol>
<p>2、子类Waxberry<br>私有属性：颜色（color）<br>方法：</p>
<ol>
<li>调用父类的构造方法，完成属性赋值</li>
<li>创建不允许重写的face方法，描述为：杨梅：<strong>、</strong>，果味酸甜适中。</li>
<li>重写父类eat方法，描述为：杨梅酸甜适中，非常好吃！</li>
<li>重写toString方法，输出的表现形式不同（输出shape,color,taste）</li>
<li>要求Waxberry类不允许有子类</li>
</ol>
<p>3、子类：Banana<br>私有属性：品种（variety）<br>方法：</p>
<ol>
<li>带参构造方法为所有属性赋值</li>
<li>创建无参无返回值的advantage方法，描述为：<strong>果形</strong>,果肉香甜，可供生食。</li>
<li>重载要求(2)中的advantage方法（带参数color），描述为：<strong>颜色为</strong></li>
</ol>
<p>4、测试，运行效果参照效果图：</p>
<ol>
<li>实例化2个父类对象，并传入两组相同的参数值</li>
<li>调用父类eat方法</li>
<li>测试重写equals方法，判断两个对象是否相等</li>
<li>实例化子类Wacberry对象，并传入相关参数值</li>
<li>调用子类face方法和重写父类eat方法后的eat方法</li>
<li>测试重写toString方法，输出子类对象的信息</li>
<li>实例化Banana类对象，并传入相关参数值</li>
<li>调用子类的advantage和它的重载方法</li>
</ol>
<p><strong>原题</strong><br>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">// 实例化2个父类对象，传入两组相同的参数值</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 调用父类eat方法</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 测试重写equals方法，判断两个对象是否相等</span></span><br><span class="line">	</span><br><span class="line">System.out.println(<span class="string">"————————————————————————————————————————"</span>);</span><br><span class="line">		<span class="comment">// 实例化子类对象，并传入相关参数值</span></span><br><span class="line">	</span><br><span class="line">		<span class="comment">// 调用子类face方法和eat方法</span></span><br><span class="line">	</span><br><span class="line">		<span class="comment">// 测试重写toString方法，输出子类对象的信息</span></span><br><span class="line">		</span><br><span class="line">System.out.println(<span class="string">"——————————————————————————————————————————————"</span>);</span><br><span class="line">		<span class="comment">// 实例化Banana类对象，并传入相关参数值</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 调用子类的advantage和它的重载方法</span></span><br><span class="line">	</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Fruits.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruits</span> </span>{</span><br><span class="line">    <span class="comment">// 私有属性：水果的形状（shape）和口感（taste）</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Fruits</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 带参构造函数（参数为shape和taste）</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">//通过封装实现对私有属性的get/set访问</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建无参无返回值得方法eat（描述内容为：水果可供人们食用！）</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 重写equals方法，比较两个对象是否相等（比较shape，taste）</span></span><br><span class="line">	</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Waxberry.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//要求Waxberry类不允许有子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Waxberry</span> </span>{</span><br><span class="line">    <span class="comment">// 私有属性：颜色（color）</span></span><br><span class="line">    </span><br><span class="line">	<span class="comment">//创建构造方法，完成调用父类的构造方法，完成属性赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建不允许重写的face方法，描述为：杨梅：**、**，果味酸甜适中</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//重写父类eat方法，描述为：杨梅酸甜适中，非常好吃！</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//重写toString方法，输出的表现形式不同（输出shape,color,taste）</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Banana.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Banana</span> </span>{</span><br><span class="line">    <span class="comment">// 私有属性：品种（variety）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建带参构造方法为所有属性赋值</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建无参无返回值的advantage方法，描述为：**果形**,果肉香甜，可供生食。</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建重载advantage方法（带参数color），描述为：**颜色为**</span></span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答</strong><br>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.fruits.Banana;</span><br><span class="line"><span class="keyword">import</span> com.imooc.fruits.Fruits;</span><br><span class="line"><span class="keyword">import</span> com.imooc.fruits.Waxberry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 实例化2个父类对象，传入两组相同的参数值。</span></span><br><span class="line">        Fruits fru1=<span class="keyword">new</span> Fruits(<span class="string">"圆形"</span>,<span class="string">"甜"</span>);</span><br><span class="line">        Fruits fru2=<span class="keyword">new</span> Fruits(<span class="string">"圆形"</span>,<span class="string">"甜"</span>);</span><br><span class="line">        <span class="comment">// 调用父类eat方法。</span></span><br><span class="line">        fru1.eat();</span><br><span class="line">        <span class="comment">// 测试重写equals方法，判断两个对象是否相等。</span></span><br><span class="line">        System.out.println(<span class="string">"fru1和fru2的引用比较："</span>+fru1.equals(fru2));</span><br><span class="line">        System.out.println(<span class="string">"————————————————————————————————————————"</span>);</span><br><span class="line">        <span class="comment">// 实例化子类对象，并传入相关参数值。</span></span><br><span class="line">        Waxberry wax=<span class="keyword">new</span> Waxberry(<span class="string">"紫红色"</span>,<span class="string">"圆形"</span>,<span class="string">"酸甜适中"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用子类face方法和eat方法。</span></span><br><span class="line">        System.out.println(<span class="string">"杨梅："</span>+wax.face());</span><br><span class="line">        wax.eat();</span><br><span class="line">        <span class="comment">// 测试重写toString方法，输出子类对象的信息。</span></span><br><span class="line">        System.out.println(<span class="string">"杨梅的信息：果实为"</span>+wax.toString());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"——————————————————————————————————————————————"</span>);</span><br><span class="line">        <span class="comment">// 实例化Banana类对象，并传入相关参数值。</span></span><br><span class="line">        Banana ban=<span class="keyword">new</span> Banana(<span class="string">"仙人蕉"</span>,<span class="string">"形短而稍圆"</span>);</span><br><span class="line">        <span class="comment">// 调用子类的advantage和它的重载方法</span></span><br><span class="line">        ban.advantage();</span><br><span class="line">        ban.advantage(<span class="string">"黄色"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Fruits.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.fruits;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.operations.Equals;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruits</span> </span>{</span><br><span class="line">    <span class="comment">// 私有属性：水果的形状（shape）和口感（taste）。</span></span><br><span class="line">    <span class="keyword">private</span> String shape;</span><br><span class="line">    <span class="keyword">private</span> String taste;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruits</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带参构造函数（参数为shape和taste）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruits</span><span class="params">(String shape,String taste)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.setShape(shape);</span><br><span class="line">        <span class="keyword">this</span>.setTaste(taste);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过封装实现对私有属性的get/set访问</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getShape</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span>  shape;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setShape</span><span class="params">(String shape)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.shape=shape;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTaste</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> taste;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTaste</span><span class="params">(String taste)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.taste=taste;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建无参无返回值得方法eat（描述内容为：水果可供人们食用！）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"水果可供人食用"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写equals方法，比较两个对象是否相等（比较shape，taste）</span></span><br><span class="line">    <span class="comment">//@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Fruits anObject)</span></span>{<span class="comment">//(Fruits anObject)与(Object anObject)</span></span><br><span class="line">        <span class="keyword">if</span> (anObject==<span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">//Fruits temp = (Fruits) anObject;//它的参数时obj类型的，我们需要把它先进行强转成Fruits类型的。</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.getShape().equals(anObject.getShape()) &amp;&amp; <span class="keyword">this</span>.getTaste() == anObject.getTaste()) {</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Waxberry.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.fruits;</span><br><span class="line"></span><br><span class="line"><span class="comment">//要求Waxberry类不允许有子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Waxberry</span> <span class="keyword">extends</span> <span class="title">Fruits</span></span>{</span><br><span class="line">    <span class="comment">// 私有属性：颜色（color）</span></span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Waxberry</span><span class="params">()</span></span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建构造方法，完成调用父类的构造方法，完成属性赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Waxberry</span><span class="params">(String color,String shape,String taste)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.setColor(color);</span><br><span class="line">        <span class="keyword">this</span>.setShape(shape);</span><br><span class="line">        <span class="keyword">this</span>.setTaste(taste);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get/set方法。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.color=color;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建不允许重写的face方法，描述为：杨梅：**、**，果味酸甜适中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">face</span><span class="params">()</span></span>{</span><br><span class="line">        String str=<span class="string">"杨梅："</span>+<span class="keyword">this</span>.getColor()+<span class="string">"、"</span>+<span class="keyword">this</span>.getShape()+<span class="string">"，果味酸甜适中。"</span>;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写父类eat方法，描述为：杨梅酸甜适中，非常好吃！</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"杨梅酸甜适中，非常好吃！"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写toString方法，输出的表现形式不同（输出shape,color,taste）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"形状："</span>+<span class="keyword">this</span>.getShape()+<span class="string">"，颜色"</span>+<span class="keyword">this</span>.getColor()+<span class="string">"，口感"</span>+<span class="keyword">this</span>.getTaste();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Banana.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.fruits;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Banana</span> <span class="keyword">extends</span> <span class="title">Fruits</span> </span>{</span><br><span class="line">    <span class="comment">// 私有属性：品种（variety）</span></span><br><span class="line">    <span class="keyword">private</span> String variety;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Banana</span><span class="params">()</span></span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建带参构造方法为所有属性赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Banana</span><span class="params">(String variety,String shape)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.setVariety(variety);</span><br><span class="line">        <span class="keyword">this</span>.setShape(shape);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get/set方法。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getVariety</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> variety;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVariety</span><span class="params">(String variety)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.variety=variety;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建无参无返回值的advantage方法，描述为：**果形**,果肉香甜，可供生食。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">advantage</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getVariety()+<span class="string">"果形"</span>+<span class="keyword">this</span>.getShape()+<span class="string">",果肉香甜，可供生食。"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建重载advantage方法（带参数color），描述为：**颜色为**</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">advantage</span><span class="params">(String color)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"颜色为"</span>+color);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="编程练习-4"><a href="#编程练习-4" class="headerlink" title="编程练习"></a>编程练习</h4><p>请使用面向对象的思想，实现出租车和家用轿车的信息描述。<br>程序运行参考效果图如下：<br><img src="en-resource://database/5695:1" alt="0983c0958faea584b8825ec1b3fa6d32.png"></p>
<p>任务<br>要求：<br>1、 根据出租车和家用轿车的共性，抽取父类Car<br>属性：车的颜色color、车主姓名userName<br>方法：</p>
<ol>
<li>带参构造函数（参数为color和useName）</li>
<li>创建无参无返回值得方法use（描述内容为：我是机动车！）</li>
<li>重写equals方法，比较两个对象是否相等（比较color，userName）</li>
</ol>
<p>2、子类taxi<br>属性：所属公司( company)<br>方法：</p>
<ol>
<li>调用父类的构造方法，完成属性赋值</li>
<li>创建不允许重写的ride方法，描述为：<em>\</em>出租车是所属于在<em>\</em>*公司的。</li>
<li>重写父类use方法，描述为：出租车是提高市民生活质量的重要条件之一</li>
<li>重写toString方法，输出的表现形式不同（输出color,userName）</li>
</ol>
<p>3、子类：私家车HomeCar<br>属性：载客数（num）<br>方法：</p>
<ol>
<li>带参构造方法为所有属性赋值</li>
<li>创建无参无返回值的display方法，表现为：<strong>拥有的</strong>颜色的私家车有**座位</li>
<li>重载要求（2）中的display方法（带参数num），描述为：家用汽车大多有**个座位</li>
<li>要求私家车类不允许有子类</li>
</ol>
<p>4、测试类，运行效果参照效果图：</p>
<ol>
<li>实例化2个父类对象，并传入两组相同的参数值</li>
<li>调用父类use方法</li>
<li>调用父类重写的equals方法，测试两个对象是否相等</li>
<li>实例化子类对象，并传入相关参数值</li>
<li>调用子类ride方法和use方法</li>
<li>调用子类重写的toString方法，输出子类对象的信息</li>
<li>实例化HomeCar类对象，并传入相关参数值</li>
<li>调用子类的display和他的重载方法</li>
</ol>
<p><strong>原题</strong><br>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{ </span><br><span class="line">		<span class="comment">//实例化父类对象，并传入两组相同的属性值</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//调用父类use方法</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//通过重写equals方法，比较两个对象是否相等</span></span><br><span class="line">			System.out.println(<span class="string">"=================================="</span>);</span><br><span class="line">        <span class="comment">//实例化子类Taxi对象，并传入属性值</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//调用ride和use方法</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//输出重写toString后的taxi信息</span></span><br><span class="line">				System.out.println(<span class="string">"=================================="</span>);</span><br><span class="line">		<span class="comment">//实例化子类HomeCar对象，并传入属性值</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//调用display方法及它的重载方法</span></span><br><span class="line">		</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Car.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>{</span><br><span class="line">    <span class="comment">//属性：车的颜色color、车主姓名userName</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span></span>{</span><br><span class="line">		</span><br><span class="line">	}</span><br><span class="line">	<span class="comment">//带参构造函数（参数为color和userName）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过封装实现对私有属性的get/set操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建无参无返回值得方法use（描述内容为：我是机动车！）</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//重写equals方法，比较两个对象是否相等（比较color，userName）</span></span><br><span class="line"></span><br><span class="line">	}	</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Taxi.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Taxi</span> <span class="keyword">extends</span> <span class="title">Car</span></span>{</span><br><span class="line">    <span class="comment">//私有属性：所属公司( company)</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Taxi</span><span class="params">()</span></span>{</span><br><span class="line">		</span><br><span class="line">	}</span><br><span class="line">	<span class="comment">//调用父类的构造方法，完成属性赋值</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过封装实现对私有属性的get/set操作</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建不允许重写的ride方法，描述为：**出租车是所属于***公司的。</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//重写父类use方法，描述为：出租车是提高市民生活质量的重要条件之一</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//重写toString方法，输出的表现形式不同（输出color,userName）</span></span><br><span class="line">	</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>HomeCar.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeCar</span> <span class="keyword">extends</span> <span class="title">Car</span></span>{</span><br><span class="line">    <span class="comment">//私有属性：载客数（num）</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HomeCar</span><span class="params">()</span></span>{</span><br><span class="line">		</span><br><span class="line">	}</span><br><span class="line">	<span class="comment">//带参构造方法为所有属性赋值</span></span><br><span class="line">	</span><br><span class="line">   <span class="comment">//通过封装实现对私有属性的get/set操作</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建无参无返回值的display方法，表现为：**拥有的**颜色的私家车,有**座位</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//重载display方法（带参数num），描述为：家用汽车大多有**个座位</span></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答</strong><br>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{ </span><br><span class="line">		<span class="comment">//实例化父类对象，并传入两组相同的属性值</span></span><br><span class="line">        Car c1 = <span class="keyword">new</span> Car(<span class="string">"黑"</span>, <span class="string">"小明"</span>);</span><br><span class="line">        Car c2 = <span class="keyword">new</span> Car(<span class="string">"黑"</span>, <span class="string">"小明"</span>);</span><br><span class="line">		<span class="comment">//调用父类use方法</span></span><br><span class="line">        c1.use();</span><br><span class="line"></span><br><span class="line">		<span class="comment">//通过重写equals方法，比较两个对象是否相等</span></span><br><span class="line">		System.out.println(<span class="string">"car1和car2的引用比较："</span> + c1.equals(c2));</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">"=================================="</span>);</span><br><span class="line">        <span class="comment">//实例化子类Taxi对象，并传入属性值</span></span><br><span class="line">		Taxi t = <span class="keyword">new</span> Taxi(<span class="string">"蓝"</span>, <span class="string">"张小泉"</span>, <span class="string">"长生"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//调用ride和use方法</span></span><br><span class="line">		System.out.println(t.ride());</span><br><span class="line">		t.use();</span><br><span class="line"></span><br><span class="line">		<span class="comment">//输出重写toString后的taxi信息</span></span><br><span class="line">		System.out.println(t.toString());</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">"=================================="</span>);</span><br><span class="line">		<span class="comment">//实例化子类HomeCar对象，并传入属性值</span></span><br><span class="line">		HomeCar hc = <span class="keyword">new</span> HomeCar(<span class="string">"紫色"</span>, <span class="string">"孙二娘"</span>, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//调用display方法及它的重载方法</span></span><br><span class="line">		hc.display();</span><br><span class="line">		hc.display(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Car.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>{</span><br><span class="line">    <span class="comment">//属性：车的颜色color、车主姓名userName</span></span><br><span class="line">	<span class="keyword">private</span> String color;</span><br><span class="line">	<span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span></span>{</span><br><span class="line">		</span><br><span class="line">	}</span><br><span class="line">	<span class="comment">//带参构造函数（参数为color和userName）</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String color, String userName)</span></span>{</span><br><span class="line">	    <span class="keyword">this</span>.setColor(color);</span><br><span class="line">	    <span class="keyword">this</span>.setUserName(userName);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过封装实现对私有属性的get/set操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.color;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>{</span><br><span class="line">    	<span class="keyword">this</span>.color = color;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>{</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">this</span>.userName;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>{</span><br><span class="line">    	<span class="keyword">this</span>.userName = userName;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建无参无返回值得方法use（描述内容为：我是机动车！）</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>{</span><br><span class="line">		System.out.println(<span class="string">"我是机动车！"</span>);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//重写equals方法，比较两个对象是否相等（比较color，userName）</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Car c)</span> </span>{</span><br><span class="line">		<span class="keyword">if</span>(c == <span class="keyword">null</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>.getColor().equals(c.getColor()) &amp;&amp; <span class="keyword">this</span>.getUserName().equals(c.getUserName()))</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Taxi.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Taxi</span> <span class="keyword">extends</span> <span class="title">Car</span></span>{</span><br><span class="line">    <span class="comment">//私有属性：所属公司( company)</span></span><br><span class="line">	<span class="keyword">private</span> String company;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Taxi</span><span class="params">()</span></span>{</span><br><span class="line">		</span><br><span class="line">	}</span><br><span class="line">	<span class="comment">//调用父类的构造方法，完成属性赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Taxi</span><span class="params">(String color, String userName, String company)</span> </span>{</span><br><span class="line">    	<span class="keyword">super</span>(color, userName);</span><br><span class="line">    	<span class="keyword">this</span>.setCompany(company);</span><br><span class="line">    }</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//通过封装实现对私有属性的get/set操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCompany</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.company;</span><br><span class="line">	}</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompany</span><span class="params">(String company)</span> </span>{</span><br><span class="line">		<span class="keyword">this</span>.company = company;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建不允许重写的ride方法，描述为：**出租车是所属于***公司的。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">ride</span><span class="params">()</span> </span>{</span><br><span class="line">		String str = <span class="keyword">this</span>.getUserName() + <span class="string">"的出租车是属于"</span> + <span class="keyword">this</span>.getCompany() + <span class="string">"公司的。"</span>;</span><br><span class="line">		<span class="keyword">return</span> str;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">//重写父类use方法，描述为：出租车是提高市民生活质量的重要条件之一</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>{</span><br><span class="line">		System.out.println(<span class="string">"出租车是提高市民生活质量的重要条件之一"</span>);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">//重写toString方法，输出的表现形式不同（输出color,userName）</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"taxi的信息是："</span> + <span class="keyword">this</span>.getUserName() + <span class="string">"拥有一辆"</span> + <span class="keyword">this</span>.getColor() + <span class="string">"色的出租车."</span>;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>HomeCar.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeCar</span> <span class="keyword">extends</span> <span class="title">Car</span></span>{</span><br><span class="line">    <span class="comment">//私有属性：载客数（num）</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HomeCar</span><span class="params">()</span></span>{</span><br><span class="line">		</span><br><span class="line">	}</span><br><span class="line">	<span class="comment">//带参构造方法为所有属性赋值</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HomeCar</span><span class="params">(String color, String userName, <span class="keyword">int</span> num)</span> </span>{</span><br><span class="line">		<span class="keyword">super</span>(color, userName);</span><br><span class="line">		<span class="keyword">this</span>.setNum(num);</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">   <span class="comment">//通过封装实现对私有属性的get/set操作</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNum</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.num;</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>{</span><br><span class="line">		<span class="keyword">this</span>.num = num;</span><br><span class="line">	}</span><br><span class="line">   </span><br><span class="line">	<span class="comment">//创建无参无返回值的display方法，表现为：**拥有的**颜色的私家车,有**座位</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>{</span><br><span class="line">		System.out.println(<span class="keyword">this</span>.getUserName() + <span class="string">"拥有的"</span> + </span><br><span class="line">						<span class="keyword">this</span>.getColor() + <span class="string">"颜色的私家车，有"</span> + <span class="keyword">this</span>.getNum() + <span class="string">"座位"</span>);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">//重载display方法（带参数num），描述为：家用汽车大多有**个座位</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> num)</span> </span>{</span><br><span class="line">		System.out.println(<span class="string">"家用汽车大多有"</span> + num + <span class="string">"个座位"</span>);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java基础通识1.3.4 集合</title>
    <url>/posts/227904429/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>一、Java的编译基础</li>
<li>二、Java程序实际执行细节</li>
<li>三、使用eclipse开发Java程序</li>
</ul>
<a id="more"></a>

<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="集合概述"><a href="#集合概述" class="headerlink" title="集合概述"></a>集合概述</h4><p>Java中的集合是工具类，可以储存任意数量的具有共同属性的对象。</p>
<p><strong>为什么使用集合不用数组？</strong></p>
<ul>
<li>数组适合存储固定长度的数据场景。</li>
<li>集合更适用于数据动态变化的场景（数组长度变化）。</li>
</ul>
<p><strong>应用场景</strong></p>
<ul>
<li>无法预测存储数据的数量。</li>
<li>同时存储具有一对一关系的数据。</li>
<li>需要进行数据的增删。</li>
<li>数据重复问题。</li>
</ul>
<h4 id="集合框架的体系结构"><a href="#集合框架的体系结构" class="headerlink" title="集合框架的体系结构"></a>集合框架的体系结构</h4><p><img src="en-resource://database/3525:1" alt="4fedd500e1b742e2ddad1268746c8269.png"></p>
<ul>
<li><p>Collection：存储类的对象，</p>
<ul>
<li>List序列，有序且允许重复。<ul>
<li>实现类：ArrayList长度动态增长的数组。</li>
</ul>
</li>
<li>Queue队列，有序且允许重复。<ul>
<li>实现类：LinkedList，同时实现List内容，表示链表的内容。</li>
</ul>
</li>
<li>Set集，无序且不许重复。<ul>
<li>实现类：HashSet，哈希集。</li>
</ul>
</li>
</ul>
</li>
<li><p>Map：以键值对的形式存储信息。</p>
<ul>
<li>实现类：HashMap，哈希表。存储以键值对表现的形式。</li>
</ul>
</li>
</ul>
<p>####《LinkedList的使用》</p>
<p>1、 概述</p>
<ul>
<li><p>与 ArrayList 一样，LinkedList 也按照索引位置排序，但它的元素之间是双向链接的</p>
</li>
<li><p>适合快速地插入和删除元素</p>
</li>
<li><p>LinkedList 实现 List 和 Queue 两个接口</p>
<p>2、 构造方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>LinkedList()</td>
<td>构造一个空列表</td>
</tr>
<tr>
<td>LinkedList(Collection&lt;? extends E&gt; c)</td>
<td>构造一个包含指定 collection 中的元素的列表，这些元素按其 collection 的迭代器返回的顺序排列</td>
</tr>
</tbody></table>
<p>3、 常用方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>boolean add(E e)</td>
<td>将指定元素添加到此列表的结尾</td>
</tr>
<tr>
<td>void add(int index, E element)</td>
<td>在此列表中指定的位置插入指定的元素</td>
</tr>
<tr>
<td>boolean addAll(Collection&lt;? extends E&gt; c)</td>
<td>添加指定 collection 中的所有元素到此列表的结尾</td>
</tr>
<tr>
<td>boolean addAll(int index, Collection&lt;? extends E&gt; c)</td>
<td>将指定 collection 中的所有元素从指定位置开始插入此列表</td>
</tr>
<tr>
<td>void addFirst(E e)</td>
<td>将指定元素插入此列表的开头</td>
</tr>
<tr>
<td>void addLast(E e)</td>
<td>将指定元素添加到此列表的结尾</td>
</tr>
<tr>
<td>void clear()</td>
<td>从此列表中移除所有元素</td>
</tr>
<tr>
<td>boolean contains(Object o)</td>
<td>如果此列表包含指定元素，则返回 true</td>
</tr>
<tr>
<td>E get(int index)</td>
<td>返回此列表中指定位置处的元素</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>E getFirst()</td>
<td>返回此列表的第一个元素</td>
</tr>
<tr>
<td>E getLast()</td>
<td>返回此列表的最后一个元素</td>
</tr>
<tr>
<td>int indexOf(Object o)</td>
<td>返回此列表中首次出现的指定元素的索引，如果此列表中不包含该元素，则返回 -1</td>
</tr>
<tr>
<td>int lastIndexOf(Object o)</td>
<td>返回此列表中最后出现的指定元素的索引，如果此列表中不包含该元素，则返回 -1</td>
</tr>
<tr>
<td>E peek()</td>
<td>获取但不移除此列表的头（第一个元素）</td>
</tr>
<tr>
<td>E peekFirst()</td>
<td>获取但不移除此列表的第一个元素；如果此列表为空，则返回 null</td>
</tr>
<tr>
<td>E peekLast()</td>
<td>获取但不移除此列表的最后一个元素；如果此列表为空，则返回 null</td>
</tr>
<tr>
<td>E poll()</td>
<td>获取并移除此列表的头（第一个元素）</td>
</tr>
<tr>
<td>E pollFirst()</td>
<td>获取并移除此列表的第一个元素；如果此列表为空，则返回 null</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>E pollLast()</td>
<td>获取并移除此列表的最后一个元素；如果此列表为空，则返回 null</td>
</tr>
<tr>
<td>E pop()</td>
<td>从此列表所表示的堆栈处弹出一个元素</td>
</tr>
<tr>
<td>void push(E e)</td>
<td>将元素推入此列表所表示的堆栈</td>
</tr>
<tr>
<td>E remove()</td>
<td>获取并移除此列表的头（第一个元素）</td>
</tr>
<tr>
<td>E remove(int index)</td>
<td>移除此列表中指定位置处的元素</td>
</tr>
<tr>
<td>boolean remove(Object o)</td>
<td>从此列表中移除首次出现的指定元素（如果<br>存在）</td>
</tr>
<tr>
<td>E removeFirst()</td>
<td>移除并返回此列表的第一个元素</td>
</tr>
<tr>
<td>E set(int index, E element)</td>
<td>将此列表中指定位置的元素替换为指定的元素</td>
</tr>
<tr>
<td>int size()</td>
<td>返回此列表的元素数</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">方法名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Object[] toArray()</td>
<td align="center">返回以适当顺序（从第一个元素到最后一个元素）包含此列表中所有元素的数组</td>
</tr>
</tbody></table>
<p>4、 案例<br>（1） 案例一：使用 LinkedList 对字符串进行管理</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LindedListDemo1</span> </span>{</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		LinkedList&lt;String&gt; list=<span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">		<span class="comment">//向链表添加数据</span></span><br><span class="line">		list.add(<span class="string">"apple"</span>);</span><br><span class="line">		list.add(<span class="string">"pear"</span>);</span><br><span class="line">		<span class="comment">//将数据添加到链表的开始</span></span><br><span class="line">		list.addFirst(<span class="string">"banana"</span>);</span><br><span class="line">		<span class="comment">//将数据添加到链表的末尾</span></span><br><span class="line">		list.addLast(<span class="string">"grape"</span>);</span><br><span class="line">		<span class="comment">//在指定位置处添加数据，第一个参数为index值，从0开始</span></span><br><span class="line">		list.add(<span class="number">2</span>, <span class="string">"orange"</span>);</span><br><span class="line">		<span class="comment">//显示链表中的所有数据</span></span><br><span class="line">		System.out.println(list);</span><br><span class="line">		<span class="comment">//判断列表中是否包含指定的元素，并输出相应的结果</span></span><br><span class="line">		<span class="keyword">boolean</span> flag=list.contains(<span class="string">"grape"</span>);</span><br><span class="line">		<span class="keyword">if</span>(flag){</span><br><span class="line">			System.out.println(<span class="string">"grape找到了！"</span>);</span><br><span class="line">		}<span class="keyword">else</span>{</span><br><span class="line">			System.out.println(<span class="string">"grape没找到！"</span>);</span><br><span class="line">		}</span><br><span class="line">		<span class="comment">//返回index值为3的数据并输出</span></span><br><span class="line">		System.out.println(<span class="string">"index值为3的数据为："</span>+list.get(<span class="number">3</span>));</span><br><span class="line">		<span class="comment">//返回第一个元素</span></span><br><span class="line">		System.out.println(<span class="string">"第一个元素为："</span>+list.getFirst());</span><br><span class="line">		<span class="comment">//返回最后一个元素</span></span><br><span class="line">		System.out.println(<span class="string">"最后一个元素为："</span>+list.getLast()); </span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>运行结果为：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">[banana,apple,orange,pear,grape]</span><br><span class="line">grape找到了！</span><br><span class="line">index值为<span class="number">3</span>的数据为：pear</span><br><span class="line">第一个元素为：banana</span><br><span class="line">最后一个元素为：grape</span><br></pre></td></tr></tbody></table></figure></div>
<p>（2）案例二：使用 LinkedList 对自定义类进行管理<br>Student 类：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.linkedlist;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>{</span><br><span class="line">	<span class="keyword">private</span> String stuNum;</span><br><span class="line">	<span class="keyword">private</span> String stuName;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String stuNum,String stuName,<span class="keyword">int</span> age)</span></span>{</span><br><span class="line">		<span class="keyword">this</span>.stuNum=stuNum;</span><br><span class="line">		<span class="keyword">this</span>.stuName=stuName;</span><br><span class="line">		<span class="keyword">this</span>.age=age;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStuNum</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">return</span> stuNum;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStuNum</span><span class="params">(String stuNum)</span> </span>{</span><br><span class="line">		<span class="keyword">this</span>.stuNum = stuNum;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStuName</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">return</span> stuName;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStuName</span><span class="params">(String stuName)</span> </span>{</span><br><span class="line">		<span class="keyword">this</span>.stuName = stuName;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">return</span> <span class="string">" [学号："</span> + stuNum + <span class="string">", 姓名："</span> + stuName + <span class="string">", 年龄："</span> + age + <span class="string">"]"</span>;</span><br><span class="line">	} </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>LinkedListDemo2 类：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListDemo2</span> </span>{</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		LinkedList&lt;Student&gt; stuList=<span class="keyword">new</span> LinkedList&lt;Student&gt;();</span><br><span class="line">		Student stu1=<span class="keyword">new</span> Student(<span class="string">"001"</span>,<span class="string">"Mike"</span>,<span class="number">18</span>);</span><br><span class="line">		Student stu2=<span class="keyword">new</span> Student(<span class="string">"002"</span>,<span class="string">"Jack"</span>,<span class="number">20</span>);</span><br><span class="line">		Student stu3=<span class="keyword">new</span> Student(<span class="string">"003"</span>,<span class="string">"Lucy"</span>,<span class="number">19</span>);</span><br><span class="line">		<span class="comment">//将学生添加到链表，使用push完成</span></span><br><span class="line">		<span class="comment">//LinkedList实现List接口的同时，也实现了Queue接口</span></span><br><span class="line">		<span class="comment">//push和pop就是针对Queue进行添加和取出数据的操作的</span></span><br><span class="line">		stuList.push(stu1);</span><br><span class="line">		stuList.push(stu2);</span><br><span class="line">		stuList.push(stu3);</span><br><span class="line">		System.out.println(<span class="string">"链表为："</span>+stuList);</span><br><span class="line">		<span class="comment">//弹出一个元素，这里可以把链表看成一个容器，先加入到链表的数据后弹出，</span></span><br><span class="line">		<span class="comment">//依据的原则是先进后出</span></span><br><span class="line">		System.out.println(<span class="string">"弹出的数据为："</span>+stuList.pop());</span><br><span class="line">		System.out.println(<span class="string">"调用pop()方法后的链表为：\n"</span>+stuList);</span><br><span class="line">		<span class="comment">//peek()方法获取并不移除元素</span></span><br><span class="line">		System.out.println(<span class="string">"调用peek()方法的数据为："</span>+stuList.peek());</span><br><span class="line">		System.out.println(<span class="string">"调用peek()方法后的链表为：\n"</span>+stuList);</span><br><span class="line">		<span class="comment">//再次调用pop()方法，发现调用pop()方法后数据从链表中移除了，而peek()方法不会</span></span><br><span class="line">		System. out .println(<span class="string">"再次调用pop()方法"</span>+stuList.pop());</span><br><span class="line">		System. out .println(<span class="string">"再次调用pop()方法后的链表为：\n"</span>+stuList);</span><br><span class="line">		<span class="comment">//在链表中再重新添加元素</span></span><br><span class="line">		stuList.push(stu2);</span><br><span class="line">		stuList.push(stu3);</span><br><span class="line">		System.out.println(<span class="string">"再次添加元素后的链表为：\n"</span>+stuList);</span><br><span class="line">		<span class="comment">//调用poll()方法</span></span><br><span class="line">		System.out.println(<span class="string">"调用poll()方法输出元素"</span>+stuList.poll());</span><br><span class="line">		<span class="comment">//调用poll()方法将获取元素的同时从链表中删除了元素</span></span><br><span class="line">		System.out.println(<span class="string">"调用poll()方法后的链表为：\n"</span>+stuList);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>运行结果为：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">链表为：[[学号：<span class="number">003</span>，姓名：Lucy,年龄：<span class="number">19</span>],[学号：<span class="number">002</span>，姓名：Jack,年龄：<span class="number">20</span>],[学号：<span class="number">001</span>，姓名：Mike,年龄：<span class="number">18</span>]]</span><br><span class="line">调用pop()方法后的链表为：</span><br><span class="line">[学号：<span class="number">002</span>，姓名：Jack,年龄：<span class="number">20</span>],[学号：<span class="number">001</span>，姓名：Mike,年龄：<span class="number">18</span>]]</span><br><span class="line">调用peek()方法的数据为：[学号：<span class="number">002</span>，姓名：Jack,年龄：<span class="number">20</span>]</span><br><span class="line">调用peek()方法后的链表为：</span><br><span class="line">[学号：<span class="number">002</span>，姓名：Jack,年龄：<span class="number">20</span>],[学号：<span class="number">001</span>，姓名：Mike,年龄：<span class="number">18</span>]]</span><br><span class="line">再次调用pop()方法 [学号：<span class="number">002</span>，姓名：Jack,年龄：<span class="number">20</span>]</span><br><span class="line">再次调用pop()方法后的链表为：</span><br><span class="line">[学号：<span class="number">001</span>，姓名：Mike,年龄：<span class="number">18</span>]]</span><br><span class="line">再次添加元素后的链表为：</span><br><span class="line">[[学号：<span class="number">003</span>，姓名：Lucy,年龄：<span class="number">19</span>],[学号：<span class="number">002</span>，姓名：Jack,年龄：<span class="number">20</span>],[学号：<span class="number">001</span>，姓名：Mike,年龄：<span class="number">18</span>]]</span><br><span class="line">调用poll()方法输出元素：[[学号：<span class="number">003</span>，姓名：Lucy,年龄：<span class="number">19</span>]</span><br><span class="line">调用poll()方法后的链表为：</span><br><span class="line">[学号：<span class="number">002</span>，姓名：Jack,年龄：<span class="number">20</span>],[学号：<span class="number">001</span>，姓名：Mike,年龄：<span class="number">18</span>]]</span><br></pre></td></tr></tbody></table></figure></div>


</li>
</ul>
<h4 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h4><p>单选题<br>下列不属于Collection子接口的是（）（选择一项）</p>
<p>A.  List  B.  Map  C.  Queue  D.  Set</p>
<p>正确答案： B</p>
<p><strong>参考解析：</strong><br>本题考察的是Collection的子接口，List、Queue和Set是Collection的子接口。Map是另一类接口，故B选项正确。</p>
<h3 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h3><h4 id="List概述"><a href="#List概述" class="headerlink" title="List概述"></a>List概述</h4><p><strong>List（列表）</strong></p>
<ul>
<li>List是元素有序并且可以重复的集合，称为序列。</li>
<li>List可以精确的控制每个元素的插入位置，或删除某个位置的元素。</li>
<li>List的两个主要实现类是ArrayList和LinkedList。<ul>
<li>ArrayList和数组比较相似，只不过它的数组长度可以动态增长，它也是在内存中开辟一片连续的存储空间进行存储的。</li>
<li>LinkedList本身是个列表，这两个类当中方法和作用几乎相同。</li>
</ul>
</li>
</ul>
<p><strong>ArrayList</strong></p>
<ul>
<li>数组长度动态变化，底层是由数组实现的。<ul>
<li>因为它在内存当中存储方式与数组一样，是一片连续的存储空间去存储的，因此在数组尾部插入或删除数据效率非常高，而如果在中间的位置插入删除数据，要进行大量的删除复制，这种情况消耗资源较多，所以ArrayList更适合查找更新元素。</li>
<li>虽然长度有限，但长度可以动态增长。</li>
</ul>
</li>
<li>在列表尾部插入或删除数据效率非常高。</li>
<li>更适合查找和更新元素。</li>
<li>ArrayList中的元素可以为null。</li>
</ul>
<h4 id="案例：在List中存储并操作字符串信息"><a href="#案例：在List中存储并操作字符串信息" class="headerlink" title="案例：在List中存储并操作字符串信息"></a>案例：在List中存储并操作字符串信息</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.set;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListDemo1</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             <span class="comment">// 用ArrayList存储编程语言的名称，并输出。</span></span><br><span class="line">             List list=<span class="keyword">new</span> ArrayList();</span><br><span class="line">             list.add(<span class="string">"Java"</span>);</span><br><span class="line">             list.add(<span class="string">"C"</span>);</span><br><span class="line">             list.add(<span class="string">"C++"</span>);</span><br><span class="line">             list.add(<span class="string">"Go"</span>);</span><br><span class="line">             list.add(<span class="string">"swift"</span>);</span><br><span class="line">             <span class="comment">//输出列表中元素的个数。</span></span><br><span class="line">             System.out.println(<span class="string">"列表中元素的个数为："</span>+list.size());</span><br><span class="line">             <span class="comment">//遍历输出所有编程语言。</span></span><br><span class="line">             System.out.println(<span class="string">"************************************"</span>);</span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.size();i++) {</span><br><span class="line">                    System.out.print(list.get(i)+<span class="string">","</span>);</span><br><span class="line">             }</span><br><span class="line">             <span class="comment">//移除列表中的C++</span></span><br><span class="line">             System.out.println();</span><br><span class="line">             <span class="comment">//移除方式一：</span></span><br><span class="line">             list.remove(<span class="number">2</span>);  </span><br><span class="line">             <span class="comment">//移除方式二：</span></span><br><span class="line">             list.remove(<span class="string">"C++"</span>);</span><br><span class="line">             System.out.println(<span class="string">"**************************************"</span>);</span><br><span class="line">             System.out.println(<span class="string">"移除C++以后的列表元素为："</span>);</span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.size();i++) {</span><br><span class="line">             System.out.print(list.get(i)+<span class="string">","</span>);</span><br><span class="line">             }</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a>单选题</h4><p>已知ArrayList的对象是list，以下哪个方法是判断ArrayList中是否包含”imooc”？（选择一项）</p>
<p>Alist.contains(“imooc”);<br>Blist.add(“imooc”);<br>Clist.remove(“imooc”);<br>Dlist.get(“imooc”);</p>
<p>正确答案： A</p>
<p><strong>参考解析：</strong><br>本题考查ArrayList的常用方法，contains()方法是用来判断ArrayList中是否包含”imooc”字符串的，故A选项正确。<br>B选项错误，add(“imooc”)是给列表增加元素。C选项错误，remove()是移除列表中的某一元素。D选项错误，get(int index)是获取列表指定位置处的元素。</p>
<h4 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h4><p>使用集合ArrayList对字符串进行存储和管理。<br>效果图：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">列表中元素的个数为：<span class="number">6</span></span><br><span class="line">第<span class="number">1</span>个为语文</span><br><span class="line">第<span class="number">2</span>个为数学</span><br><span class="line">第<span class="number">3</span>个为英语</span><br><span class="line">第<span class="number">4</span>个为化学</span><br><span class="line">第<span class="number">5</span>个为物理</span><br><span class="line">第<span class="number">6</span>个为生物</span><br></pre></td></tr></tbody></table></figure></div>
<p>任务</p>
<p>1、定义ArrayList对象<br>2、存储学科名称，见运行效果图<br>3、输出集合中元素的个数<br>4、遍历输出集合中的所有元素</p>
<p><strong>原题</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">//用ArrayList存储学科的名称</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//输出列表中元素的个数</span></span><br><span class="line">	</span><br><span class="line">		<span class="comment">//遍历输出所有列表元素</span></span><br><span class="line">		</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>{</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">                <span class="comment">//用ArrayList存储学科的名称</span></span><br><span class="line">                List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">                list.add(<span class="string">"语文"</span>);</span><br><span class="line">                list.add(<span class="string">"数学"</span>);</span><br><span class="line">                list.add(<span class="string">"英语"</span>);</span><br><span class="line">                list.add(<span class="string">"化学"</span>);</span><br><span class="line">                list.add(<span class="string">"物理"</span>);</span><br><span class="line">                list.add(<span class="string">"生物"</span>);</span><br><span class="line">        </span><br><span class="line">                <span class="comment">//输出列表中元素的个数</span></span><br><span class="line">                System.out.println(<span class="string">"列表中元素的个数为："</span> + list.size());</span><br><span class="line">    </span><br><span class="line">                <span class="comment">//遍历输出所有列表元素</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++){</span><br><span class="line">                        System.out.println(<span class="string">"第"</span> + (i+<span class="number">1</span>) + <span class="string">"个为"</span> + list.get(i));</span><br><span class="line">                }</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="单选题-1"><a href="#单选题-1" class="headerlink" title="单选题"></a>单选题</h4><p>下列哪个方法可以获取列表指定位置处的元素（选择一项）</p>
<p>A.  add(E e)<br>B.  remove()<br>C.  size()<br>D.  get(int index)</p>
<p>正确答案： D</p>
<p><strong>参考解析：</strong><br>本题考查的是列表中的方法，add(E e)是给列表增加元素，remove()是移除列表中的某一元素，size()是获取列表中元素的个数，get(int index)是获取列表指定位置处的元素，故本题选择答案get(int index)，D选项正确。</p>
<h4 id="公告管理需求"><a href="#公告管理需求" class="headerlink" title="公告管理需求"></a>公告管理需求</h4><p><strong>需求</strong></p>
<ul>
<li>公告的添加和显示。</li>
<li>在指定位置处插入公告。</li>
<li>删除公告。</li>
<li>修改公告。</li>
</ul>
<p><strong>公告类属性</strong></p>
<ul>
<li>编号 id</li>
<li>标题 title</li>
<li>创建人 creator</li>
<li>创建时间 createTime</li>
</ul>
<p><strong>公告类方法</strong></p>
<ul>
<li>构造方法。</li>
<li>获取和设置属性值的方法。</li>
</ul>
<h4 id="案例：公告的添加和显示"><a href="#案例：公告的添加和显示" class="headerlink" title="案例：公告的添加和显示"></a>案例：公告的添加和显示</h4><p><strong>Notice.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Notice</span> </span>{</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">int</span> id;<span class="comment">//ID</span></span><br><span class="line">       <span class="keyword">private</span> String title;<span class="comment">//标题。</span></span><br><span class="line">       <span class="keyword">private</span> String creator;<span class="comment">//创建人。</span></span><br><span class="line">       <span class="keyword">private</span> Date createTime;<span class="comment">//创建时间。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Notice</span><span class="params">(<span class="keyword">int</span> id, String title, String creator, Date createTime)</span> </span>{</span><br><span class="line">             <span class="keyword">super</span>();</span><br><span class="line">             <span class="keyword">this</span>.id = id;</span><br><span class="line">             <span class="keyword">this</span>.title = title;</span><br><span class="line">             <span class="keyword">this</span>.creator = creator;</span><br><span class="line">             <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> id;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.id = id;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> title;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.title = title;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getCreator</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> creator;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreator</span><span class="params">(String creator)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.creator = creator;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateTime</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> createTime;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateTime</span><span class="params">(Date createTime)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>NoticeTest.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoticeTest</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             <span class="comment">// 创建Notice类的对象，生成三条公告。</span></span><br><span class="line">             Notice notice1=<span class="keyword">new</span> Notice(<span class="number">1</span>,<span class="string">"欢迎来到慕课网！"</span>,<span class="string">"管理员"</span>,<span class="keyword">new</span> Date());</span><br><span class="line">             Notice notice2=<span class="keyword">new</span> Notice(<span class="number">2</span>,<span class="string">"请同学们按时提交作业！"</span>,<span class="string">"老师"</span>,<span class="keyword">new</span> Date());</span><br><span class="line">             Notice notice3=<span class="keyword">new</span> Notice(<span class="number">2</span>,<span class="string">"考勤通知！"</span>,<span class="string">"老师"</span>,<span class="keyword">new</span> Date());</span><br><span class="line">             <span class="comment">//添加公告。</span></span><br><span class="line">             ArrayList noticeList=<span class="keyword">new</span> ArrayList();</span><br><span class="line">             noticeList.add(notice1);</span><br><span class="line">             noticeList.add(notice2);</span><br><span class="line">             noticeList.add(notice3);</span><br><span class="line">             <span class="comment">//显示公告。</span></span><br><span class="line">             System.out.println(<span class="string">"公告的内容为："</span>);</span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;noticeList.size();i++) {</span><br><span class="line">                    System.out.println(i+<span class="number">1</span>+<span class="string">":"</span>+((Notice)(noticeList.get(i))).getTitle());</span><br><span class="line">             }</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="编程练习-1"><a href="#编程练习-1" class="headerlink" title="编程练习"></a>编程练习</h4><p>定义一个员工信息类Employee，使用ArrayList对员工信息进行添加和显示。<br>效果图：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">员工姓名	员工薪资</span><br><span class="line">张三		 <span class="number">5000.0</span></span><br><span class="line">李四		 <span class="number">5500.0</span></span><br><span class="line">赵六		 <span class="number">4000.0</span></span><br></pre></td></tr></tbody></table></figure></div>

<p>任务</p>
<p>1、实现员工信息类Employee<br>    成员变量：编号id（int），姓名name（String），薪资salary（double）<br>    方法：构造方法和相关的get和set方法<br>2、定义三条员工信息添加到ArrayList中<br>3、将所有员工的姓名和薪资输出，见效果图</p>
<p><strong>原题</strong><br><strong>EmployeeTest.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">//定义ArrayList对象</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建三个Employee类的对象</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//添加员工信息到ArrayList中</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//显示员工的姓名和薪资</span></span><br><span class="line">        </span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>Employee.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>{</span><br><span class="line"> <span class="comment">//根据需求完成Employee类的定义  </span></span><br><span class="line"> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答</strong><br><strong>EmployeeTest.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">//定义ArrayList对象</span></span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="comment">//创建三个Employee类的对象</span></span><br><span class="line">        Employee e1 = <span class="keyword">new</span> Employee(<span class="number">1</span>, <span class="string">"张三"</span>, <span class="number">5000</span>);</span><br><span class="line">        Employee e2 = <span class="keyword">new</span> Employee(<span class="number">2</span>, <span class="string">"李四"</span>, <span class="number">5500</span>);</span><br><span class="line">        Employee e3 = <span class="keyword">new</span> Employee(<span class="number">3</span>, <span class="string">"赵六"</span>, <span class="number">4000</span>);</span><br><span class="line">        <span class="comment">//添加员工信息到ArrayList中</span></span><br><span class="line">        list.add(e1);</span><br><span class="line">        list.add(e2);</span><br><span class="line">        list.add(e3);</span><br><span class="line">        <span class="comment">//显示员工的姓名和薪资</span></span><br><span class="line">        System.out.println(<span class="string">"员工姓名\t员工薪资"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++){</span><br><span class="line">            System.out.println(((Employee)(list.get(i))).getName() + <span class="string">"\t"</span> + ((Employee)(list.get(i))).getSalary());</span><br><span class="line">        }</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>Employee.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>{</span><br><span class="line"> <span class="comment">//根据需求完成Employee类的定义  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span></span>{</span><br><span class="line">    </span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">double</span> salary)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.setID(id);</span><br><span class="line">        <span class="keyword">this</span>.setName(name);</span><br><span class="line">        <span class="keyword">this</span>.setSalary(salary);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getID</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setID</span><span class="params">(<span class="keyword">int</span> id)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="案例：公告的删除和修改"><a href="#案例：公告的删除和修改" class="headerlink" title="案例：公告的删除和修改"></a>案例：公告的删除和修改</h4><p><strong>NoticeTest.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.set;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoticeTest</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             <span class="comment">// 创建Notice类的对象，生成三条公告。</span></span><br><span class="line">             Notice notice1 = <span class="keyword">new</span> Notice(<span class="number">1</span>, <span class="string">"欢迎来到慕课网！"</span>, <span class="string">"管理员"</span>, <span class="keyword">new</span>  Date());</span><br><span class="line">             Notice notice2 = <span class="keyword">new</span> Notice(<span class="number">2</span>, <span class="string">"请同学们按时提交作业！"</span>, <span class="string">"老师"</span>, <span class="keyword">new</span>  Date());</span><br><span class="line">             Notice notice3 = <span class="keyword">new</span> Notice(<span class="number">2</span>, <span class="string">"考勤通知！"</span>, <span class="string">"老师"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">             <span class="comment">// 添加公告。</span></span><br><span class="line">             ArrayList noticeList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">             noticeList.add(notice1);</span><br><span class="line">             noticeList.add(notice2);</span><br><span class="line">             noticeList.add(notice3);</span><br><span class="line">             <span class="comment">// 显示公告。</span></span><br><span class="line">             System.out.println(<span class="string">"公告的内容为："</span>);</span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; noticeList.size(); i++) {</span><br><span class="line">                    System.out.println(i + <span class="number">1</span> + <span class="string">":"</span> + ((Notice)  (noticeList.get(i))).getTitle());</span><br><span class="line">             }</span><br><span class="line">             System.out.println(<span class="string">"************************"</span>);</span><br><span class="line">             <span class="comment">// 在第一条公告后面添加一条新公告。</span></span><br><span class="line">             Notice notice4 = <span class="keyword">new</span> Notice(<span class="number">4</span>, <span class="string">"在线编辑器可以使用啦！"</span>, <span class="string">"管理员"</span>,  <span class="keyword">new</span> Date());</span><br><span class="line">             noticeList.add(<span class="number">1</span>, notice4);</span><br><span class="line">             <span class="comment">// 显示公告。</span></span><br><span class="line">             System.out.println(<span class="string">"公告的内容为："</span>);</span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">int</span> i1 = <span class="number">0</span>; i1 &lt; noticeList.size(); i1++) {</span><br><span class="line">                    System.out.println(i1 + <span class="number">1</span> + <span class="string">":"</span> + ((Notice)  (noticeList.get(i1))).getTitle());</span><br><span class="line">             }</span><br><span class="line">             System.out.println(<span class="string">"************************"</span>);</span><br><span class="line">             <span class="comment">// 删除按时完成作业的公告。</span></span><br><span class="line">             noticeList.remove(<span class="number">2</span>);</span><br><span class="line">             <span class="comment">// 显示公告。</span></span><br><span class="line">             System.out.println(<span class="string">"删除公告后的内容为："</span>);</span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">int</span> i1 = <span class="number">0</span>; i1 &lt; noticeList.size(); i1++) {</span><br><span class="line">                    System.out.println(i1 + <span class="number">1</span> + <span class="string">":"</span> + ((Notice)  (noticeList.get(i1))).getTitle());</span><br><span class="line">             }</span><br><span class="line">             <span class="comment">// 将第二条公告改为：Java在线编辑器可以使用啦！</span></span><br><span class="line">             System.out.println(<span class="string">"************************"</span>);</span><br><span class="line">             <span class="comment">// 修改第二条公告中title的值</span></span><br><span class="line">             notice4.setTitle(<span class="string">"Java在线编辑器可以使用啦！"</span>);</span><br><span class="line">             noticeList.set(<span class="number">1</span>, notice4);</span><br><span class="line">             System.out.println(<span class="string">"修改后公告的内容为："</span>);</span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">int</span> i1 = <span class="number">0</span>; i1 &lt; noticeList.size(); i1++) {</span><br><span class="line">                    System.out.println(i1 + <span class="number">1</span> + <span class="string">":"</span> + ((Notice)  (noticeList.get(i1))).getTitle());</span><br><span class="line">             }</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h3><h4 id="Set概述"><a href="#Set概述" class="headerlink" title="Set概述"></a>Set概述</h4><p><strong>Set(集)</strong><br>Set是元素无序并且不可以重复的集合，被称为集。</p>
<p><strong>HashSet</strong></p>
<ul>
<li>HashSet是Set的一个重要实现类，称为哈希集。</li>
<li>HashSet中的元素无序并且不可以重复。</li>
<li>HashSet中只允许一个null元素。</li>
<li>具有良好的存取和查找性能。<ul>
<li>HashSet的底层是HashMap</li>
</ul>
</li>
</ul>
<h5 id="选择题-1"><a href="#选择题-1" class="headerlink" title="选择题"></a>选择题</h5><p>多选题<br>下列有关HashSet的描述正确的是（）（选择两项）</p>
<p>A.  HashSet是Set的一个重要实现类<br>B.  HashSet中的元素无序但可以重复<br>C.  HashSet中只允许一个null元素<br>D.  不适用于存取和查找</p>
<p>正确答案： A,C</p>
<p><strong>参考解析：</strong><br>本题考查的是HashSet的定义以及特征，A、C选项的说法是正确的。HashSet中的元素无序且不可以重复，故B选项的说法是错误，HashSet具有良好的存取和查找性能，因此适用于存取和查找，故D选项的说法是错误的。</p>
<h5 id="选择题-2"><a href="#选择题-2" class="headerlink" title="选择题"></a>选择题</h5><p>单选题<br>以下关于Set对象的创建错误的是？（选择一项）</p>
<p>A.  Set set=new Set();<br>B.  Set set=new HashSet();<br>C.  HashSet set=new HashSet();<br>D.  Set set=new HashSet(10);</p>
<p>正确答案： A</p>
<p><strong>参考解析：</strong><br>本题考查HashSet的对象创建，A选项正确。 Set是接口，不能创建对象，因此Set set=new Set();错误。</p>
<h4 id="案例：在集合中插入字符串"><a href="#案例：在集合中插入字符串" class="headerlink" title="案例：在集合中插入字符串"></a>案例：在集合中插入字符串</h4><p><strong>Iterator（迭代器）</strong></p>
<p>迭代：循环遍历</p>
<ul>
<li>Iterator接口可以以统一的方式对各种集合元素进行遍历。</li>
<li>hasNext()方法检测集合中是否还有下一个元素。</li>
<li>next()方法返回集合中的下一个元素。</li>
</ul>
<p><strong>WordDemo.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordDemo</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             <span class="comment">// 将英文单词添加到HashSet中。</span></span><br><span class="line">             Set set = <span class="keyword">new</span> HashSet();</span><br><span class="line">             <span class="comment">// 向集合中添加元素。</span></span><br><span class="line">             set.add(<span class="string">"bule"</span>);</span><br><span class="line">             set.add(<span class="string">"red"</span>);</span><br><span class="line">             set.add(<span class="string">"black"</span>);</span><br><span class="line">             set.add(<span class="string">"yellow"</span>);</span><br><span class="line">             set.add(<span class="string">"white"</span>);</span><br><span class="line">             <span class="comment">// 显示集合的内容。</span></span><br><span class="line">             System.out.println(<span class="string">"集合中的元素为："</span>);</span><br><span class="line">             Iterator it = set.iterator();</span><br><span class="line">             <span class="comment">// 遍历迭代器并输出元素。</span></span><br><span class="line">             <span class="keyword">while</span> (it.hasNext()) {</span><br><span class="line">                    System.out.print(it.next() + <span class="string">" "</span>);</span><br><span class="line">             }</span><br><span class="line">             System.out.println();</span><br><span class="line">             <span class="comment">// 在集合中插入一个新的单词。</span></span><br><span class="line">             <span class="comment">// set.add("green");</span></span><br><span class="line">             set.add(<span class="string">"white"</span>);</span><br><span class="line">             it = set.iterator();</span><br><span class="line">             <span class="comment">// 遍历迭代器并输出元素。</span></span><br><span class="line">             System.out.println(<span class="string">"***********************"</span>);</span><br><span class="line">             System.out.println(<span class="string">"插入重复元素后的 输出结果为："</span>);</span><br><span class="line">             <span class="keyword">while</span> (it.hasNext()) {</span><br><span class="line">                    System.out.print(it.next() + <span class="string">" "</span>);</span><br><span class="line">             }</span><br><span class="line">             <span class="comment">//最后结果是插入失败，但是不会报错。</span></span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h5 id="选择题-3"><a href="#选择题-3" class="headerlink" title="选择题"></a>选择题</h5><p>单选题<br>关于Iterator的描述错误的是：（选择一项）</p>
<p>A.  Iterator可以对集合Set中的元素进行遍历<br>B.  hasNext()方法用于检查集合中是否还有下一个元素<br>C.  next()方法返回集合中的下一个元素<br>D.  next()方法的返回值为false时，表示集合中的元素已经遍历完毕</p>
<p>正确答案： D</p>
<p><strong>参考解析：</strong><br>本题考查迭代器Iterator的使用，当hasNext()方法的返回值为false时，表示集合中的元素已经遍历完毕。因此D选项中的说法是错误的。</p>
<h4 id="宠物猫信息管理概述"><a href="#宠物猫信息管理概述" class="headerlink" title="宠物猫信息管理概述"></a>宠物猫信息管理概述</h4><p><strong>需求</strong></p>
<ul>
<li>添加和显示宠物猫信息。</li>
<li>查找某只宠物猫的信息并输出。</li>
<li>修改宠物猫的信息。</li>
<li>删除宠物猫信息。</li>
</ul>
<p><strong>属性</strong></p>
<ul>
<li>名字 name</li>
<li>年龄 month</li>
<li>品种 species</li>
</ul>
<p><strong>方法</strong></p>
<ul>
<li>构造方法。</li>
<li>获取和设置属性值的方法。</li>
<li>其他方法。</li>
</ul>
<h4 id="添加和显示信息"><a href="#添加和显示信息" class="headerlink" title="添加和显示信息"></a>添加和显示信息</h4><p><strong>Cat.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>{</span><br><span class="line">       <span class="keyword">private</span> String name;<span class="comment">//名字。</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">int</span> month;<span class="comment">//年龄。</span></span><br><span class="line">       <span class="keyword">private</span> String species;<span class="comment">//品种。</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//构造方法。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name, <span class="keyword">int</span> month, String species)</span> </span>{</span><br><span class="line">             <span class="keyword">super</span>();</span><br><span class="line">             <span class="keyword">this</span>.name = name;</span><br><span class="line">             <span class="keyword">this</span>.month = month;</span><br><span class="line">             <span class="keyword">this</span>.species = species;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> name;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.name = name;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMonth</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> month;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMonth</span><span class="params">(<span class="keyword">int</span> month)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.month = month;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getSpecies</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> species;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSpecies</span><span class="params">(String species)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.species = species;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> <span class="string">"[姓名："</span> + name + <span class="string">", 年龄："</span> + month + <span class="string">", 品种："</span> + species + <span class="string">"]"</span>;</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>CatText.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatTest</span> </span>{</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">// 定义宠物对象。</span></span><br><span class="line">		Cat huahua=<span class="keyword">new</span> Cat(<span class="string">"花花"</span>,<span class="number">12</span>,<span class="string">"英国短毛猫"</span>);</span><br><span class="line">		Cat fanfan=<span class="keyword">new</span> Cat(<span class="string">"凡凡"</span>,<span class="number">3</span>,<span class="string">"中华田园猫"</span>);</span><br><span class="line">		<span class="comment">//将宠物猫对象放入HashSet中。</span></span><br><span class="line">		Set set=<span class="keyword">new</span> HashSet();</span><br><span class="line">		set.add(huahua);</span><br><span class="line">		set.add(fanfan);</span><br><span class="line">		<span class="comment">//显示宠物猫信息。</span></span><br><span class="line">		Iterator it=set.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext()) {</span><br><span class="line">			System.out.println(it.next());</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="添加重复数据"><a href="#添加重复数据" class="headerlink" title="添加重复数据"></a>添加重复数据</h4><p><strong>Cat.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>{</span><br><span class="line">       <span class="keyword">private</span> String name;<span class="comment">//名字。</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">int</span> month;<span class="comment">//年龄。</span></span><br><span class="line">       <span class="keyword">private</span> String species;<span class="comment">//品种。</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//构造方法。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name, <span class="keyword">int</span> month, String species)</span> </span>{</span><br><span class="line">             <span class="keyword">super</span>();</span><br><span class="line">             <span class="keyword">this</span>.name = name;</span><br><span class="line">             <span class="keyword">this</span>.month = month;</span><br><span class="line">             <span class="keyword">this</span>.species = species;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> name;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.name = name;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMonth</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> month;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMonth</span><span class="params">(<span class="keyword">int</span> month)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.month = month;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getSpecies</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> species;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSpecies</span><span class="params">(String species)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.species = species;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> <span class="string">"[姓名："</span> + name + <span class="string">", 年龄："</span> + month + <span class="string">", 品种："</span> + species + <span class="string">"]"</span>;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</span><br><span class="line">             <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">             result = prime * result + month;</span><br><span class="line">             result = prime * result + ((name == <span class="keyword">null</span>) ? <span class="number">0</span> : name.hashCode());</span><br><span class="line">             result = prime * result + ((species == <span class="keyword">null</span>) ? <span class="number">0</span> : species.hashCode());</span><br><span class="line">             <span class="keyword">return</span> result;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>{</span><br><span class="line">             <span class="comment">//先判断对象是否相等，相等则返回true，不用继续比较属性了。</span></span><br><span class="line">             <span class="keyword">if</span>(<span class="keyword">this</span>==obj)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">             <span class="comment">//判断&lt;u&gt;obj&lt;/u&gt;是否是Cat类的对象，如果是，强制转换，返回属性比较后的结果。</span></span><br><span class="line">             <span class="keyword">if</span>(obj.getClass()==Cat.class) {</span><br><span class="line">                    Cat cat=(Cat)obj;</span><br><span class="line">                    <span class="keyword">return</span> cat.getName().equals(name)&amp;&amp;(cat.getMonth()==month)&amp;&amp;(cat.getSpecies().equals(species));</span><br><span class="line">             }</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>CatText.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatTest</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             <span class="comment">// 定义宠物对象。</span></span><br><span class="line">             Cat huahua = <span class="keyword">new</span> Cat(<span class="string">"花花"</span>, <span class="number">12</span>, <span class="string">"英国短毛猫"</span>);</span><br><span class="line">             Cat fanfan = <span class="keyword">new</span> Cat(<span class="string">"凡凡"</span>, <span class="number">3</span>, <span class="string">"中华田园猫"</span>);</span><br><span class="line">             <span class="comment">// 将宠物猫对象放入HashSet中。</span></span><br><span class="line">             Set set = <span class="keyword">new</span> HashSet();</span><br><span class="line">             set.add(huahua);</span><br><span class="line">             set.add(fanfan);</span><br><span class="line">             <span class="comment">// 显示宠物猫信息。</span></span><br><span class="line">             Iterator it = set.iterator();</span><br><span class="line">             <span class="keyword">while</span> (it.hasNext()) {</span><br><span class="line">                    System.out.println(it.next());</span><br><span class="line">             }</span><br><span class="line">             <span class="comment">// 再添加一个与花花属性一样的猫。</span></span><br><span class="line">             Cat huahua01 = <span class="keyword">new</span> Cat(<span class="string">"花花"</span>, <span class="number">12</span>, <span class="string">"英国短毛猫"</span>);</span><br><span class="line">             set.add(huahua01);</span><br><span class="line">             System.out.println(<span class="string">"*************************"</span>);</span><br><span class="line">             System.out.println(<span class="string">"*************************"</span>);</span><br><span class="line">             it = set.iterator();</span><br><span class="line">             <span class="keyword">while</span> (it.hasNext()) {</span><br><span class="line">                    System.out.println(it.next());</span><br><span class="line">             }</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h5 id="单选题-2"><a href="#单选题-2" class="headerlink" title="单选题"></a>单选题</h5><p>定义一个Worker类，关于hashCode()方法的说法正确的是？（选择一项）</p>
<p>A.  在Worker类中，hashCode()方法必须被重写<br>B.  如果hashCode的值相同，则两个Worker类的对象就认为是相等的<br>C.  hashCode的值不同时，则两个对象必定不同<br>D.  以上说法均正确</p>
<p>正确答案： C</p>
<p><strong>参考解析：</strong><br>本题考查hashCode()方法的重写，C选项正确。<br>A选项错误，hashCode方法不重写也没关系。<br>B选项错误，如果hashCode()值相同，还需要根据equals()方法判断是否为同一个对象。</p>
<h4 id="查找宠物猫信息"><a href="#查找宠物猫信息" class="headerlink" title="查找宠物猫信息"></a>查找宠物猫信息</h4><p>本章节代码后期补充的，可能有所出入，有待重新校对。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatTest</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             <span class="comment">// 定义宠物对象。</span></span><br><span class="line">             Cat huahua = <span class="keyword">new</span> Cat(<span class="string">"花花"</span>, <span class="number">12</span>, <span class="string">"英国短毛猫"</span>);</span><br><span class="line">             Cat fanfan = <span class="keyword">new</span> Cat(<span class="string">"凡凡"</span>, <span class="number">3</span>, <span class="string">"中华田园猫"</span>);</span><br><span class="line">             <span class="comment">// 将宠物猫对象放入HashSet中。</span></span><br><span class="line">             Set&lt;Cat&gt; set = <span class="keyword">new</span> HashSet&lt;Cat&gt;();</span><br><span class="line">             set.add(huahua);</span><br><span class="line">             set.add(fanfan);</span><br><span class="line">             <span class="comment">// 显示宠物猫信息。</span></span><br><span class="line">             Iterator&lt;Cat&gt; it = set.iterator();</span><br><span class="line">             <span class="keyword">while</span> (it.hasNext()) {</span><br><span class="line">                    System.out.println(it.next());</span><br><span class="line">             }</span><br><span class="line">             <span class="comment">// 再添加一个与花花属性一样的猫。</span></span><br><span class="line">             Cat huahua01 = <span class="keyword">new</span> Cat(<span class="string">"花花"</span>, <span class="number">12</span>, <span class="string">"英国短毛猫"</span>);</span><br><span class="line">             set.add(huahua01);</span><br><span class="line">             System.out.println(<span class="string">"***********************"</span>);</span><br><span class="line">             System.out.println(<span class="string">"***********************"</span>);</span><br><span class="line">             it = set.iterator();</span><br><span class="line">             <span class="keyword">while</span> (it.hasNext()) {</span><br><span class="line">                    System.out.println(it.next());</span><br><span class="line">             }</span><br><span class="line">             System.out.println(<span class="string">"***********************"</span>);</span><br><span class="line">             <span class="comment">// 重新插入一个新宠物猫。</span></span><br><span class="line">             Cat huahua02 = <span class="keyword">new</span> Cat(<span class="string">"花花二代"</span>, <span class="number">2</span>, <span class="string">"英国短毛猫"</span>);</span><br><span class="line">             set.add(huahua02);</span><br><span class="line">             System.out.println(<span class="string">"添加花花二代后的宠物猫信息："</span>);</span><br><span class="line">             it = set.iterator();</span><br><span class="line">             <span class="keyword">while</span> (it.hasNext()) {</span><br><span class="line">                    System.out.println(it.next());</span><br><span class="line">             }</span><br><span class="line">             System.out.println(<span class="string">"***********************"</span>);</span><br><span class="line">             <span class="comment">// 在集合中查找花花的信息并输出。</span></span><br><span class="line">             <span class="comment">// 第一种查找方式：使用对象名去查找。</span></span><br><span class="line">             <span class="keyword">if</span> (set.contains(huahua)) {</span><br><span class="line">                    System.out.println(<span class="string">"花花找到了！"</span>);</span><br><span class="line">                    System.out.println(huahua);</span><br><span class="line">             } <span class="keyword">else</span> {</span><br><span class="line">                    System.out.println(<span class="string">"花花没找到！"</span>);</span><br><span class="line">             }</span><br><span class="line">             <span class="comment">// 第二种查找方式：在集合中使用名字查找花花的信息。</span></span><br><span class="line">             <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">             Cat c = <span class="keyword">null</span>;</span><br><span class="line">             it = set.iterator();</span><br><span class="line">             <span class="keyword">while</span> (it.hasNext()) {</span><br><span class="line">                    c = it.next();</span><br><span class="line">                    <span class="keyword">if</span> (c.getName().equals(<span class="string">"花花"</span>)) {</span><br><span class="line">                           flag = <span class="keyword">true</span>;<span class="comment">// 找到了。</span></span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                    }</span><br><span class="line">             }</span><br><span class="line">             <span class="keyword">if</span> (flag) {</span><br><span class="line">                    System.out.println(<span class="string">"花花找到了"</span>);</span><br><span class="line">                    System.out.println(c);</span><br><span class="line">             } <span class="keyword">else</span> {</span><br><span class="line">                    System.out.println(<span class="string">"花花没找到"</span>);</span><br><span class="line">             }</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h5 id="编程练习-2"><a href="#编程练习-2" class="headerlink" title="编程练习"></a>编程练习</h5><p>定义一个学生类，使用HashSet对学生类的对象进行管理：执行添加操作，然后解决重复数据的添加问题。<br>效果图：</p>
<p><img src="en-resource://database/3531:1" alt="2aa06db9eea5c1d4ce54067f09263d16.png"></p>
<p>任务</p>
<p>1、 定义一个学生类Student<br>（1）属性为：学号stuId（int），姓名name（String），成绩score（float）<br>（2）方法为：构造方法，getter和setter方法，toString方法<br>（3）重写hashCode()和equals()方法，equals方法的判断依据是学号和姓名相等<br>2、定义三个Student类的对象，添加到HashSet中<br>3、显示HashSet中元素的内容<br>4、添加一个重复数据到Set中，观察输出结果</p>
<p><strong>原题</strong></p>
<p><strong>StudentTest.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">//定义三个Student类的对象及一个HashSet类的对象</span></span><br><span class="line">        </span><br><span class="line">		<span class="comment">//将Student类的对象添加到集合中</span></span><br><span class="line">		     </span><br><span class="line">		<span class="comment">//使用迭代器显示Student类的对象中的内容  </span></span><br><span class="line">    </span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>Student.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>{</span><br><span class="line">   <span class="comment">//根据需求完成Student类的定义</span></span><br><span class="line">   </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答</strong><br><strong>StudentTest.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">//定义三个Student类的对象及一个HashSet类的对象</span></span><br><span class="line">        Set set = <span class="keyword">new</span> HashSet();</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="number">1</span>, <span class="string">"Tom"</span>, <span class="number">87</span>);</span><br><span class="line">	    Student s2 = <span class="keyword">new</span> Student(<span class="number">2</span>, <span class="string">"Lucy"</span>, <span class="number">95</span>);</span><br><span class="line">	    Student s3 = <span class="keyword">new</span> Student(<span class="number">3</span>, <span class="string">"William"</span>, <span class="number">65</span>);</span><br><span class="line">		<span class="comment">//将Student类的对象添加到集合中</span></span><br><span class="line">		set.add(s1);</span><br><span class="line">		set.add(s2);</span><br><span class="line">		set.add(s3);</span><br><span class="line">		<span class="comment">//使用迭代器显示Student类的对象中的内容</span></span><br><span class="line">	    Iterator it = set.iterator();</span><br><span class="line">	    <span class="keyword">while</span>(it.hasNext()){</span><br><span class="line">	        System.out.println(it.next());</span><br><span class="line">	    }</span><br><span class="line">        System.out.println(<span class="string">"========================"</span>);</span><br><span class="line">        <span class="comment">//添加一个重复数据到Set中，观察输出结果</span></span><br><span class="line">        System.out.println(<span class="string">"添加一个重复数据到Set中的结果："</span>);</span><br><span class="line">        Student s5 = <span class="keyword">new</span> Student(<span class="number">1</span>, <span class="string">"Tom"</span>, <span class="number">87</span>);</span><br><span class="line">        it = set.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext()){</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        }</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>Student.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>{</span><br><span class="line">   <span class="comment">//根据需求完成Student类的定义</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> stuId;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">float</span> score;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>{</span><br><span class="line">       </span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> stuId, String name, <span class="keyword">float</span> score)</span></span>{</span><br><span class="line">       <span class="keyword">this</span>.setStuId(stuId);</span><br><span class="line">       <span class="keyword">this</span>.setName(name);</span><br><span class="line">       <span class="keyword">this</span>.setScore(score);</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStuId</span><span class="params">()</span></span>{</span><br><span class="line">       <span class="keyword">return</span> stuId;</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStuId</span><span class="params">(<span class="keyword">int</span> stuId)</span></span>{</span><br><span class="line">       <span class="keyword">this</span>.stuId = stuId;</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>{</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>{</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getScore</span><span class="params">()</span></span>{</span><br><span class="line">       <span class="keyword">return</span> score;</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">float</span> score)</span></span>{</span><br><span class="line">       <span class="keyword">this</span>.score = score;</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>{</span><br><span class="line">       <span class="keyword">if</span>(<span class="keyword">this</span> == obj){</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">if</span>(obj.getClass() == Student.class){</span><br><span class="line">           Student std = (Student)obj;</span><br><span class="line">           <span class="keyword">return</span> std.getName().equals(name) &amp;&amp; std.getStuId() == stuId;</span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>{</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"[学号："</span> +  stuId + <span class="string">",姓名："</span> + name + <span class="string">",成绩:"</span> + score + <span class="string">"]"</span>;</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="删除宠物猫信息"><a href="#删除宠物猫信息" class="headerlink" title="删除宠物猫信息"></a>删除宠物猫信息</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatTest</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             <span class="comment">// 定义宠物对象。</span></span><br><span class="line">             Cat huahua = <span class="keyword">new</span> Cat(<span class="string">"花花"</span>, <span class="number">12</span>, <span class="string">"英国短毛猫"</span>);</span><br><span class="line">             Cat fanfan = <span class="keyword">new</span> Cat(<span class="string">"凡凡"</span>, <span class="number">3</span>, <span class="string">"中华田园猫"</span>);</span><br><span class="line">             <span class="comment">// 将宠物猫对象放入HashSet中。</span></span><br><span class="line">             Set&lt;Cat&gt; set = <span class="keyword">new</span> HashSet&lt;Cat&gt;();</span><br><span class="line">             set.add(huahua);</span><br><span class="line">             set.add(fanfan);</span><br><span class="line">             <span class="comment">// 显示宠物猫信息。</span></span><br><span class="line">             Iterator&lt;Cat&gt; it = set.iterator();</span><br><span class="line">             <span class="keyword">while</span> (it.hasNext()) {</span><br><span class="line">                    System.out.println(it.next());</span><br><span class="line">             }</span><br><span class="line">             <span class="comment">// 再添加一个与花花属性一样的猫。</span></span><br><span class="line">             Cat huahua01 = <span class="keyword">new</span> Cat(<span class="string">"花花"</span>, <span class="number">12</span>, <span class="string">"英国短毛猫"</span>);</span><br><span class="line">             set.add(huahua01);</span><br><span class="line">             System.out.println(<span class="string">"***********************"</span>);</span><br><span class="line">             System.out.println(<span class="string">"***********************"</span>);</span><br><span class="line">             it = set.iterator();</span><br><span class="line">             <span class="keyword">while</span> (it.hasNext()) {</span><br><span class="line">                    System.out.println(it.next());</span><br><span class="line">             }</span><br><span class="line">             System.out.println(<span class="string">"***********************"</span>);</span><br><span class="line">             <span class="comment">// 重新插入一个新宠物猫。</span></span><br><span class="line">             Cat huahua02 = <span class="keyword">new</span> Cat(<span class="string">"花花二代"</span>, <span class="number">2</span>, <span class="string">"英国短毛猫"</span>);</span><br><span class="line">             set.add(huahua02);</span><br><span class="line">             System.out.println(<span class="string">"添加花花二代后的宠物猫信息："</span>);</span><br><span class="line">             it = set.iterator();</span><br><span class="line">             <span class="keyword">while</span> (it.hasNext()) {</span><br><span class="line">                    System.out.println(it.next());</span><br><span class="line">             }</span><br><span class="line">             System.out.println(<span class="string">"***********************"</span>);</span><br><span class="line">             <span class="comment">// 在集合中查找花花的信息并输出。</span></span><br><span class="line">             <span class="comment">// 第一种查找方式：使用对象名去查找。</span></span><br><span class="line">             <span class="keyword">if</span> (set.contains(huahua)) {</span><br><span class="line">                    System.out.println(<span class="string">"花花找到了！"</span>);</span><br><span class="line">                    System.out.println(huahua);</span><br><span class="line">             } <span class="keyword">else</span> {</span><br><span class="line">                    System.out.println(<span class="string">"花花没找到！"</span>);</span><br><span class="line">             }</span><br><span class="line">             <span class="comment">// 第二种查找方式：在集合中使用名字查找花花的信息。</span></span><br><span class="line">             <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">             Cat c = <span class="keyword">null</span>;</span><br><span class="line">             it = set.iterator();</span><br><span class="line">             <span class="keyword">while</span> (it.hasNext()) {</span><br><span class="line">                    c = it.next();</span><br><span class="line">                    <span class="keyword">if</span> (c.getName().equals(<span class="string">"花花"</span>)) {</span><br><span class="line">                           flag = <span class="keyword">true</span>;<span class="comment">// 找到了。</span></span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                    }</span><br><span class="line">             }</span><br><span class="line">             <span class="keyword">if</span> (flag) {</span><br><span class="line">                    System.out.println(<span class="string">"花花找到了"</span>);</span><br><span class="line">                    System.out.println(c);</span><br><span class="line">             } <span class="keyword">else</span> {</span><br><span class="line">                    System.out.println(<span class="string">"花花没找到"</span>);</span><br><span class="line">             }</span><br><span class="line">             <span class="comment">// 如果只有一条满足条件的，删除花花二代的信息并重新输出，跳出即可。</span></span><br><span class="line"><span class="comment">//           for (Cat cat : set) {</span></span><br><span class="line"><span class="comment">//                  if ("花花二代".equals(cat.getName())) {</span></span><br><span class="line"><span class="comment">//                         set.remove(cat);</span></span><br><span class="line"><span class="comment">//                         break;</span></span><br><span class="line"><span class="comment">//                  }</span></span><br><span class="line"><span class="comment">//           }</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">//如果由多条满足添加，则添加到集合当中。</span></span><br><span class="line">             Set&lt;Cat&gt; set1=<span class="keyword">new</span> HashSet&lt;Cat&gt;();</span><br><span class="line">             <span class="keyword">for</span>(Cat cat:set) {</span><br><span class="line">                    <span class="keyword">if</span>(cat.getMonth()&lt;<span class="number">5</span>) {</span><br><span class="line">                           <span class="comment">//set.remove(cat);</span></span><br><span class="line">                           set1.add(cat);</span><br><span class="line">                    }</span><br><span class="line">             }</span><br><span class="line">             System.out.println(<span class="string">"***********************"</span>);</span><br><span class="line">             System.out.println(<span class="string">"删除花花二代后的数据"</span>);</span><br><span class="line">             <span class="keyword">for</span> (Cat cat : set) {</span><br><span class="line">                    System.out.println(cat);</span><br><span class="line">             }</span><br><span class="line">             <span class="comment">// 删除集合中的所有宠物猫信息。</span></span><br><span class="line">             System.out.println(<span class="string">"************************"</span>);</span><br><span class="line">             <span class="keyword">boolean</span> flag1 = set.removeAll(set);</span><br><span class="line">             <span class="keyword">if</span> (flag1) {</span><br><span class="line">                    System.out.println(<span class="string">"猫都不见了···"</span>);</span><br><span class="line">             } <span class="keyword">else</span> {</span><br><span class="line">                    System.out.println(<span class="string">"猫还在···"</span>);</span><br><span class="line">             }</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h5 id="多选题"><a href="#多选题" class="headerlink" title="多选题"></a>多选题</h5><p>下列相关迭代器描述正确的是（）（选择三项）</p>
<p>A、Iterator接口可以以统一的方式对各种集合元素进行遍历。<br>B、hasNext（）是Iterator接口的一个方法，是用来检测集合中是否还有下一个元素。<br>C、next（）是Iterator接口的一个方法，是用来返回集合中的下一个元素。<br>D、hasNext（）是Iterator接口的一个方法，是用来返回集合中的下一个元素。</p>
<p>正确答案： A,B,C</p>
<p><strong>参考解析：</strong><br>本题考查的是迭代器的描述以及使用方法，D选项的描述是错误的，hasNext（）是Iterator接口的一个方法，是用来检测集合中是否还有下一个元素。</p>
<h3 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h3><h4 id="Map概述"><a href="#Map概述" class="headerlink" title="Map概述"></a>Map概述</h4><ul>
<li>Map中的数据是以键值对（key-value）的形式存储的。</li>
<li>key-value以Entry类型的对象实例存在。</li>
<li>可以通过key值快速地查找value。</li>
<li>一个映射不能包含重复的键。</li>
<li>每个键最多只能映射到一个值。</li>
</ul>
<p><strong>HashMap</strong></p>
<ul>
<li>基于哈希表的Map接口的实现。</li>
<li>允许使用null值和null键。</li>
<li>key值不允许重复。</li>
<li>HashMap中的Entry对象是无序排列的。</li>
</ul>
<h5 id="单选题-3"><a href="#单选题-3" class="headerlink" title="单选题"></a>单选题</h5><p>HashMap的数据是以key-value的形式存储的，以下关于HashMap的说法正确的是？（选择一项）</p>
<p>A.  HashMap中的键不能为null<br>B.  HashMap中的Entry对象是有序排列的<br>C.  key值不允许重复<br>D.  value值不允许重复</p>
<p>正确答案： C</p>
<p><strong>参考解析：</strong><br> 本题考查HashMap的基本概念，C选项正确。<br>A选项错误，HashMap中可以有null值和null键。<br>B选项错误，HashMap中的Entry对象是无序排列的。<br>D选项错误，HashMap中的value值可以重复。</p>
<h4 id="案例：在字典中添加内容并显示"><a href="#案例：在字典中添加内容并显示" class="headerlink" title="案例：在字典中添加内容并显示"></a>案例：在字典中添加内容并显示</h4><p><strong>完成一个类似字典的功能</strong></p>
<ul>
<li>将单词以及单词的注释储存到HashMap中。</li>
<li>显示HashMap中的内容。</li>
<li>查找某个单词的注释并显示。</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DictionaryDemo</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             Map&lt;String,String&gt;animal=<span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">             System.out.println(<span class="string">"请输入三组单词对应的注释，并存放到HashMap中"</span>);</span><br><span class="line">             Scanner console=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">             <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">             <span class="keyword">while</span>(i&lt;<span class="number">3</span>) {</span><br><span class="line">                    System.out.println(<span class="string">"请输入key值（单词）："</span>);</span><br><span class="line">                    String key=console.next();</span><br><span class="line">                    System.out.println(<span class="string">"请输入value值（注释）："</span>);</span><br><span class="line">                    String value=console.next();</span><br><span class="line">                    animal.put(key,value);</span><br><span class="line">                    i++;</span><br><span class="line">             }</span><br><span class="line">             <span class="comment">//打印输出value的值（直接使用迭代器）。</span></span><br><span class="line">             System.out.println(<span class="string">"****************************"</span>);</span><br><span class="line">             System.out.println(<span class="string">"使用迭代器输出所有的value"</span>);</span><br><span class="line">             Iterator&lt;String&gt; it=animal.values().iterator();</span><br><span class="line">             <span class="keyword">while</span>(it.hasNext()) {</span><br><span class="line">                    System.out.print(it.next()+<span class="string">" "</span>);</span><br><span class="line">             }</span><br><span class="line">             System.out.println();</span><br><span class="line">             System.out.println(<span class="string">"****************************"</span>);</span><br><span class="line">             <span class="comment">//打印输出key和value的值。</span></span><br><span class="line">             <span class="comment">//通过entrySet方法。</span></span><br><span class="line">             System.out.println(<span class="string">"通过entrySet方法得到key-value:"</span>);</span><br><span class="line">             Set&lt;Entry&lt;String,String&gt;&gt; entrySet=animal.entrySet();</span><br><span class="line">             <span class="keyword">for</span>(Entry&lt;String,String&gt;entry:entrySet) {</span><br><span class="line">                    System.out.println(entry.getKey()+<span class="string">"-"</span>);</span><br><span class="line">                    System.out.println(entry.getValue());</span><br><span class="line">             }</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h5 id="编程练习-3"><a href="#编程练习-3" class="headerlink" title="编程练习"></a>编程练习</h5><p>已知如下数据：世界杯冠军及夺冠年份。</p>
<table>
<thead>
<tr>
<th>年份</th>
<th>冠军</th>
</tr>
</thead>
<tbody><tr>
<td>2014</td>
<td>德国</td>
</tr>
<tr>
<td>2010</td>
<td>西班牙</td>
</tr>
<tr>
<td>2006</td>
<td>意大利</td>
</tr>
<tr>
<td>2002</td>
<td>巴西</td>
</tr>
<tr>
<td>1998</td>
<td>法国</td>
</tr>
</tbody></table>
<p>将夺冠年份作为key值，冠名队名作为value值，存储至少三条数据到HashMap中，并循环打印输出。<br>效果图：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">使用迭代器方式进行输出：</span><br><span class="line">意大利  德国  西班牙</span><br><span class="line">使用EntrySet进行输出：</span><br><span class="line"><span class="number">2006</span>-意大利</span><br><span class="line"><span class="number">2014</span>-德国</span><br><span class="line"><span class="number">2010</span>-西班牙</span><br></pre></td></tr></tbody></table></figure></div>
<p>任务</p>
<p>1、将夺冠年份和冠军队名以key-value形式存储到HashMap中。<br>2、使用迭代器和EntrySet两种方式遍历输出HashMap中的key和value。</p>
<p><strong>原题</strong><br><strong>FootballDemo.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FootballDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">//定义HashMap的对象并添加数据</span></span><br><span class="line">       </span><br><span class="line">		<span class="comment">//使用迭代器的方式遍历</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//使用EntrySet同时获取key和value</span></span><br><span class="line">	</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答</strong><br><strong>FootballDemo.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FootballDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">//定义HashMap的对象并添加数据</span></span><br><span class="line">		Map &lt;String,String&gt;winner=<span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">		winner.put(<span class="string">"2014"</span>, <span class="string">"德国"</span>);</span><br><span class="line">		winner.put(<span class="string">"2010"</span>, <span class="string">"西班牙"</span>);</span><br><span class="line">		winner.put(<span class="string">"2006"</span>, <span class="string">"意大利"</span>);</span><br><span class="line">		winner.put(<span class="string">"2002"</span>, <span class="string">"巴西"</span>);</span><br><span class="line">		winner.put(<span class="string">"1998"</span>, <span class="string">"法国"</span>);</span><br><span class="line">		<span class="comment">//使用迭代器的方式遍历</span></span><br><span class="line">		System.out.println(<span class="string">"使用迭代器方式进行输出"</span>);</span><br><span class="line">		Iterator it=winner.values().iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext()) {</span><br><span class="line">			System.out.print(it.next()+<span class="string">" "</span>);</span><br><span class="line">		}</span><br><span class="line">		System.out.println();</span><br><span class="line">		System.out.println(<span class="string">"使用EntrySet进行输出"</span>);</span><br><span class="line">		<span class="comment">//使用EntrySet同时获取key和value</span></span><br><span class="line">		Set&lt;Entry&lt;String,String&gt;&gt; entrySet=winner.entrySet();</span><br><span class="line">		<span class="keyword">for</span>(Entry&lt;String, String&gt; entry:entrySet) {</span><br><span class="line">			System.out.println(entry.getKey()+<span class="string">"-"</span>+entry.getValue());	</span><br><span class="line">		}</span><br><span class="line">		System.out.println(<span class="string">"使用字典输出"</span>);</span><br><span class="line">		System.out.println(winner.entrySet());</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="案例：对字典进行查询"><a href="#案例：对字典进行查询" class="headerlink" title="案例：对字典进行查询"></a>案例：对字典进行查询</h4><p><strong>Goods.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DictionaryDemo</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             Map&lt;String,String&gt;animal=<span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">             System.out.println(<span class="string">"请输入三组单词对应的注释，并存放到HashMap中"</span>);</span><br><span class="line">             Scanner &lt;u&gt;console&lt;/u&gt;=new Scanner(System.in);</span><br><span class="line">             <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">             <span class="keyword">while</span>(i&lt;<span class="number">3</span>) {</span><br><span class="line">                    System.out.println(<span class="string">"请输入key值（单词）："</span>);</span><br><span class="line">                    String key=console.next();</span><br><span class="line">                    System.out.println(<span class="string">"请输入value值（单词）："</span>);</span><br><span class="line">                    String value=console.next();</span><br><span class="line">                    animal.put(key,value);</span><br><span class="line">                    i++;</span><br><span class="line">             }</span><br><span class="line">             <span class="comment">//打印输出value的值（直接使用迭代器）。</span></span><br><span class="line">             System.out.println(<span class="string">"****************************"</span>);</span><br><span class="line">             System.out.println(<span class="string">"使用迭代器输出所有的value"</span>);</span><br><span class="line">             Iterator&lt;String&gt; it=animal.values().iterator();</span><br><span class="line">             <span class="keyword">while</span>(it.hasNext()) {</span><br><span class="line">                    System.out.print(it.next()+<span class="string">" "</span>);</span><br><span class="line">             }</span><br><span class="line">             System.out.println();</span><br><span class="line">             System.out.println(<span class="string">"****************************"</span>);</span><br><span class="line">             <span class="comment">//打印输出key和value的值。</span></span><br><span class="line">             <span class="comment">//通过entrySet方法。</span></span><br><span class="line">             System.out.println(<span class="string">"通过entrySet方法得到key-value:"</span>);</span><br><span class="line">             Set&lt;Entry&lt;String,String&gt;&gt; entrySet=animal.entrySet();</span><br><span class="line">             <span class="keyword">for</span>(Entry&lt;String,String&gt;entry:entrySet) {</span><br><span class="line">                    System.out.println(entry.getKey()+<span class="string">"-"</span>);</span><br><span class="line">                    System.out.println(entry.getValue());</span><br><span class="line">             }</span><br><span class="line">             <span class="comment">//通过单词找到注释并输出。</span></span><br><span class="line">             <span class="comment">//使用keySet方法。</span></span><br><span class="line">             System.out.println(<span class="string">"请输入要查找的单词："</span>);</span><br><span class="line">             String strSearch=console.next();</span><br><span class="line">             <span class="comment">//1、取得keySet。</span></span><br><span class="line">             Set&lt;String&gt; keySet=animal.keySet();</span><br><span class="line">             <span class="comment">//2、遍历keySet。</span></span><br><span class="line">             <span class="keyword">for</span>(String key:keySet) {</span><br><span class="line">                    <span class="keyword">if</span>(strSearch.equals(key)) {</span><br><span class="line">                           System.out.println(<span class="string">"找到了！"</span>+<span class="string">"键值对为："</span>+key+<span class="string">"-"</span>+animal.get(key));</span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                    }</span><br><span class="line">             }</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h5 id="单选题-4"><a href="#单选题-4" class="headerlink" title="单选题"></a>单选题</h5><p>已知HashMap对象，横线处应添加的语句是？（选择一项）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">Map&lt;String,String&gt; hashMap=<span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">hashMap.put(<span class="string">"1"</span>,<span class="string">"stu01"</span>);</span><br><span class="line">hashMap.put(<span class="string">"2"</span>,<span class="string">"stu02"</span>);</span><br><span class="line">Set&lt;String&gt; keySet=hashMap.keySet();</span><br><span class="line"><span class="keyword">for</span>(String key:keySet){</span><br><span class="line">    <span class="comment">//根据key值输出value的值</span></span><br><span class="line">    System.out.println(________________)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>A.  hashMap.get(key);<br>B.  hasMap.getValue();<br>C.  hashMap.getKey();<br>D.  hashMap.Value();</p>
<p>正确答案： A</p>
<p><strong>参考解析：</strong><br> 本题考查HashMap中常用方法的使用，通过key值获取value值使用hashMap.get(key);，故A选项正确。</p>
<h4 id="商品信息管理－Goods类"><a href="#商品信息管理－Goods类" class="headerlink" title="商品信息管理－Goods类"></a>商品信息管理－Goods类</h4><p><strong>案例二：商品信息管理</strong></p>
<ul>
<li>使用HashMap对商品信息进行管理。<ul>
<li>其中key为商品编号，value为商品对象。</li>
</ul>
</li>
<li>对HasMap中的商品信息进行增、删、改、查操作。</li>
</ul>
<p><strong>分析商品信息类</strong><br><strong>属性</strong></p>
<ul>
<li>商品编号：id</li>
<li>商品名称：name</li>
<li>商品价格：price</li>
</ul>
<p><strong>方法</strong></p>
<ul>
<li>构造方法。</li>
<li>获取和设置属性值的方法。</li>
<li>其他方法。</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> </span>{</span><br><span class="line">       <span class="keyword">private</span> String id;<span class="comment">//商品编号。</span></span><br><span class="line">       <span class="keyword">private</span> String name;<span class="comment">//商品名称。</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">double</span> price;<span class="comment">//商品价格。</span></span><br><span class="line">      </span><br><span class="line">       <span class="comment">//构造方法。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Goods</span><span class="params">(String id,String name,<span class="keyword">double</span> price)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.id=id;</span><br><span class="line">             <span class="keyword">this</span>.name=name;</span><br><span class="line">             <span class="keyword">this</span>.price=price;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment">//getter和setter方法。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> id;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.id = id;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> name;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.name = name;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> price;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>.price = price;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> <span class="string">"商品编号："</span>+id+<span class="string">",商品名称："</span>+price;</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="商品信息添加"><a href="#商品信息添加" class="headerlink" title="商品信息添加"></a>商品信息添加</h4><p><strong>GoodsTest.java</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsTest</span> </span>{</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		Scanner console = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="comment">// 定义HashMap对象。</span></span><br><span class="line">		Map&lt;String, Goods&gt; goodsMap = <span class="keyword">new</span> HashMap&lt;String, Goods&gt;();</span><br><span class="line">		System.out.println(<span class="string">"请输入三条商品信息："</span>);</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (i &lt; <span class="number">3</span>) {</span><br><span class="line">			System.out.println(<span class="string">"请输入第"</span> + (i + <span class="number">1</span>) + <span class="string">"条商品信息："</span>);</span><br><span class="line">			System.out.println(<span class="string">"请输入商品编号："</span>);</span><br><span class="line">			String goodsId = console.next();</span><br><span class="line">			System.out.println(<span class="string">"请输入商品名称："</span>);</span><br><span class="line">			String goodsName = console.next();</span><br><span class="line">			System.out.println(<span class="string">"请输入商品价格："</span>);</span><br><span class="line">			<span class="keyword">double</span> goodsPrice = console.nextDouble();</span><br><span class="line"></span><br><span class="line">			Goods goods = <span class="keyword">new</span> Goods(goodsId, goodsName, goodsPrice);</span><br><span class="line">			<span class="comment">// 将商品信息添加到HashMap中</span></span><br><span class="line">			goodsMap.put(goodsId, goods);</span><br><span class="line">			i++;</span><br><span class="line">		}</span><br><span class="line">		<span class="comment">// 遍历Map，输入商品信息。</span></span><br><span class="line">		System.out.println(<span class="string">"商品的全部信息为："</span>);</span><br><span class="line">		Iterator&lt;Goods&gt; itGoods = goodsMap.values().iterator();</span><br><span class="line">		<span class="keyword">while</span> (itGoods.hasNext()) {</span><br><span class="line">			System.out.println(itGoods.next());</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="商品信息添加优化"><a href="#商品信息添加优化" class="headerlink" title="商品信息添加优化"></a>商品信息添加优化</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsTest</span> </span>{</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">             <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">             Scanner &lt;u&gt;console&lt;/u&gt; = new Scanner(System.in);</span><br><span class="line">             <span class="comment">// 定义HashMap对象。</span></span><br><span class="line">             Map&lt;String, Goods&gt; goodsMap = <span class="keyword">new</span> HashMap&lt;String, Goods&gt;();</span><br><span class="line">             System.out.println(<span class="string">"请输入三条商品信息："</span>);</span><br><span class="line">             <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">             <span class="keyword">while</span> (i &lt; <span class="number">3</span>) {</span><br><span class="line">                    System.out.println(<span class="string">"请输入第"</span> + (i + <span class="number">1</span>) + <span class="string">"条商品信息："</span>);</span><br><span class="line">                    System.out.println(<span class="string">"请输入商品编号："</span>);</span><br><span class="line">                    String goodsId = console.next();</span><br><span class="line">                    <span class="comment">// 判断商品编号id是否存在。</span></span><br><span class="line">                    <span class="keyword">if</span> (goodsMap.containsKey(goodsId)) {</span><br><span class="line">                           System.out.println(<span class="string">"该商品编号已经存在！请重新输入！"</span>);</span><br><span class="line">                           <span class="keyword">continue</span>;</span><br><span class="line">                    }</span><br><span class="line">                    System.out.println(<span class="string">"请输入商品名称："</span>);</span><br><span class="line">                    String goodsName = console.next();</span><br><span class="line">                    System.out.println(<span class="string">"请输入商品价格："</span>);</span><br><span class="line">                    <span class="keyword">double</span> goodsPrice = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                           goodsPrice = console.nextDouble();</span><br><span class="line">                    } <span class="keyword">catch</span> (java.util.InputMismatchException e) {</span><br><span class="line">                           System.out.println(<span class="string">"商品价格的格式不正确，请输入数值型数据！"</span>);</span><br><span class="line">                           console.next();</span><br><span class="line">                           <span class="keyword">continue</span>;</span><br><span class="line">                    }</span><br><span class="line">                    Goods goods = <span class="keyword">new</span> Goods(goodsId, goodsName, goodsPrice);</span><br><span class="line">                    <span class="comment">// 将商品信息添加到HashMap中</span></span><br><span class="line">                    goodsMap.put(goodsId, goods);</span><br><span class="line">                    i++;</span><br><span class="line">             }</span><br><span class="line">             <span class="comment">// 遍历Map，输入商品信息。</span></span><br><span class="line">             System.out.println(<span class="string">"商品的全部信息为："</span>);</span><br><span class="line">             Iterator&lt;Goods&gt; itGoods = goodsMap.values().iterator();</span><br><span class="line">             <span class="keyword">while</span> (itGoods.hasNext()) {</span><br><span class="line">                    System.out.println(itGoods.next());</span><br><span class="line">             }</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>运行结果又异，不显示商品名称。需要调试。</p>
<h5 id="单选题-5"><a href="#单选题-5" class="headerlink" title="单选题"></a>单选题</h5><p>已知如下代码：执行代码，从键盘输入a5，则输出结果为：（选择一项）</p>
<p><img src="en-resource://database/3539:1" alt="05b549eee8d4a88f45aaa10c0e52ce69.png"></p>
<p>A.  a</p>
<p>B.  5</p>
<p>C.  a5</p>
<p>D.  抛出java.util.InputMismatchException异常</p>
<p>正确答案： D</p>
<p><strong>参考解析：</strong><br>本题考查Scanner类的使用，因为代码中是sc.nextInt()方法，而输入的数据是非整型，因此会抛出输入类型不匹配的java.util.InputMismatchException异常。故D选项正确。</p>
<h3 id="课程总结"><a href="#课程总结" class="headerlink" title="课程总结"></a>课程总结</h3><h4 id="集合总结"><a href="#集合总结" class="headerlink" title="集合总结"></a>集合总结</h4><p><img src="en-resource://database/3541:1" alt="cd889beef81a9665c922857ac7bfebf3.png"></p>
<p><strong>ArrayList</strong></p>
<ul>
<li>底层由数组实现。</li>
<li>元素有序可以重复。</li>
<li>可以动态增长，以满足应用程序的需求。</li>
<li>元素值可以为null。</li>
</ul>
<p><strong>HashSet</strong></p>
<ul>
<li>元素无序并且不可以重复。</li>
<li>只允许一个null元素。</li>
</ul>
<p><strong>HashMap</strong></p>
<ul>
<li>键不能重复。</li>
<li>允许使用null值和null键。</li>
<li>HashMap中的Entry对象是无序排列的。</li>
</ul>
<p><strong>Iterator（迭代器）</strong></p>
<ul>
<li>Iterator接口以统一的方式对各种集合元素进行遍历。</li>
</ul>
<p><img src="en-resource://database/3543:1" alt="aac0f7ce776665766215714bf86f89a4.png"></p>
<p><strong>hashCode</strong><br>根据一定的规则，将与对象相关的信息映射成一个数值。</p>
<p><img src="en-resource://database/3545:1" alt="b15aabfd1fd19ad917583b9c34819c7e.png"></p>
<p><strong>equals()</strong></p>
<p><img src="en-resource://database/3547:1" alt="8b4a19952034071a1c61acfdf1a9f822.png"></p>
<p>如果两个对象hashCode的值是不相等的，那么这两个对象就不用去判断equals方法了，它们肯定是不相等的；如果两个对象hashCode的值相等，则需要进一步用equals方法去判断它们两的属性是否相等。</p>
<h4 id="5-2-选择题"><a href="#5-2-选择题" class="headerlink" title="5-2 选择题"></a>5-2 选择题</h4><p>单选题<br>以下关于Set和List的说法，正确的是？（选择一项）</p>
<p>A.  Set中的元素是可以重复的。<br>B.  List中的元素是无序的。<br>C.  HashSet中只允许有一个null元素。<br>D.  List中的元素是不可以重复的。</p>
<p>正确答案： C</p>
<p><strong>参考解析：</strong><br>本题考查List和Set的基本概念，C选项正确。<br>A选项错误，Set中的元素是不可以重复的。<br>B选项错误，List中的元素在一片连续的内存空间上顺序存储的。<br>D选项错误，List中的元素是可以重复的。</p>
</body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java基础通识1.2.5 多态</title>
    <url>/posts/1373238186/</url>
    <content><![CDATA[<html><head></head><body><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>一、Java的编译基础</li>
<li>二、Java程序实际执行细节</li>
<li>三、使用eclipse开发Java程序</li>
</ul>
<a id="more"></a>

<h3 id="多态的概念"><a href="#多态的概念" class="headerlink" title="多态的概念"></a>多态的概念</h3><p>多态：允许不同类的对象对同一消息做出不同的响应。<br><img src="en-resource://database/5724:1" alt="6e12aeb73a8e3d8f658fe2670b88fa6d.png"></p>
<ul>
<li>编译时多态：<br>也称为设计时多态通过方法重载实现。</li>
<li>运行时多态：<br>是在程序运行时动态决定调用哪个方法。<ul>
<li>直到java程序运行的时候，系统才能够根据调用方法的实例的类型来去决定具体调用哪个方法。</li>
</ul>
</li>
</ul>
<p>必要条件：</p>
<ul>
<li>满足继承关系。</li>
<li>父类引用指向子类对象。</li>
</ul>
<h3 id="多态的实现"><a href="#多态的实现" class="headerlink" title="多态的实现"></a>多态的实现</h3><h4 id="案例场景描述及实体类编写"><a href="#案例场景描述及实体类编写" class="headerlink" title="案例场景描述及实体类编写"></a>案例场景描述及实体类编写</h4><p>Animal.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.animal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>{</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * private：只允许在本类中进行访问。</span></span><br><span class="line"><span class="comment">	 * public:允许在任意位置访问。</span></span><br><span class="line"><span class="comment">	 * protected：允许在当前类、同包子类/非子类、跨包子类调用；跨包非子类不允许。</span></span><br><span class="line"><span class="comment">	 * 默认允许在当前类、同包子类/非子类调用；跨包子类。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> String name;<span class="comment">//昵称</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> month;<span class="comment">//月份</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//无参构造。父类构造不允许被继承、也不允许被重写。但是会影响子类实例化过程。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>{</span><br><span class="line">	</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name,<span class="keyword">int</span> month)</span></span>{</span><br><span class="line">		<span class="keyword">this</span>.setMonth(month);</span><br><span class="line">		<span class="keyword">this</span>.setName(name);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">//get/set方法。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	}</span><br><span class="line">	       </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMonth</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">return</span> month;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMonth</span><span class="params">(<span class="keyword">int</span> month)</span> </span>{</span><br><span class="line">		<span class="keyword">this</span>.month = month;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">//吃东西</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>{</span><br><span class="line">		System.out.println(<span class="string">"动物都有吃东西的能力"</span>);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Cat.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.animal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>{</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> weight;<span class="comment">//体重</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//无参构造。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>{</span><br><span class="line">		</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name,<span class="keyword">int</span> month,<span class="keyword">double</span> weight)</span> </span>{</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 子类构造默认用父类无参构造方法,</span></span><br><span class="line"><span class="comment">		 * 可以通过super()调用父类允许被访问的其他构造方法。</span></span><br><span class="line"><span class="comment">		 * super()必须放在子类构造方法有效代码的第一行。</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">super</span>(name,month);<span class="comment">//this.setName(name);this.setMonth(month);</span></span><br><span class="line">		<span class="keyword">this</span>.weight=weight;</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//get/set方法。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWeight</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">return</span> weight;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeight</span><span class="params">(<span class="keyword">double</span> weight)</span></span>{</span><br><span class="line">		<span class="keyword">this</span>.weight=weight;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">//跑动的方法。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">		System.out.println(<span class="string">"小猫快乐的奔跑"</span>);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">//方法吃东西（重写父类方法）</span></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">		System.out.println(<span class="string">"猫吃鱼~~"</span>);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Dog.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.animal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>{</span><br><span class="line">	<span class="keyword">private</span> String sex;<span class="comment">//性别</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//无参构造。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">//带参构造</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name,<span class="keyword">int</span> month,String sex)</span></span>{</span><br><span class="line">		<span class="keyword">this</span>.setName(name);</span><br><span class="line">		<span class="keyword">this</span>.setMonth(month);</span><br><span class="line">		<span class="keyword">this</span>.setSex(sex);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">//get/set方法。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">return</span> sex;</span><br><span class="line">	}</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>{</span><br><span class="line">		<span class="keyword">this</span>.sex=sex;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 方法重载：</span></span><br><span class="line"><span class="comment">	 * 1、同一个类中。</span></span><br><span class="line"><span class="comment">	 * 2、方法名相同，参数列表不同（参数顺序、个数、类型）</span></span><br><span class="line"><span class="comment">	 * 3、方法返回值、访问修饰符任意。</span></span><br><span class="line"><span class="comment">	 * 4、与方法的参数名无关。</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * 方法重写：</span></span><br><span class="line"><span class="comment">	 * 1、有继承关系的子类中。</span></span><br><span class="line"><span class="comment">	 * 2、方法名相同，参数列表相同（参数顺序、个数、类型）方法返回值相同。</span></span><br><span class="line"><span class="comment">	 * 3、访问修饰符，访问范围需要大于等于父类的访问范围。</span></span><br><span class="line"><span class="comment">	 * 4、与方法的参数名是无关的。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="comment">//睡觉的方法。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>{</span><br><span class="line">		System.out.println(<span class="string">"小狗要午睡。"</span>);</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//子类重写父类吃东西的方法。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">		System.out.println(<span class="string">"小狗吃肉~"</span>);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.animal.Animal;</span><br><span class="line"><span class="keyword">import</span> com.imooc.animal.Cat;</span><br><span class="line"><span class="keyword">import</span> com.imooc.animal.Dog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		Animal one=<span class="keyword">new</span> Animal();</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 向上转型、隐式转型、自动转型。</span></span><br><span class="line"><span class="comment">		 * 父类引用指向子类实例，可以调用子类重写父类的方法以及父类派生的方法，无法调用子类独有的方法。</span></span><br><span class="line"><span class="comment">		 * 小类转型为大类。</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		Animal two=<span class="keyword">new</span> Cat();<span class="comment">//向上转型、隐式转型、自动转型。</span></span><br><span class="line">		Animal three=<span class="keyword">new</span> Dog();</span><br><span class="line"></span><br><span class="line">		one.eat();</span><br><span class="line">		two.eat();</span><br><span class="line">		three.eat();</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h4><p>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"><span class="keyword">import</span> com.imooc.animal.Animal;</span><br><span class="line"><span class="keyword">import</span> com.imooc.animal.Cat;</span><br><span class="line"><span class="keyword">import</span> com.imooc.animal.Dog;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{              </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Animal one=<span class="keyword">new</span> Animal();<span class="comment">//编码方式1</span></span><br><span class="line">        <span class="comment">/* 向上转型、隐式转型、自动转型--》              </span></span><br><span class="line"><span class="comment">        父类引用指向子类实例，可以调用子类重写父类的方法以及父类派生的方法，无法调用子类独有方法</span></span><br><span class="line"><span class="comment">        注意：父类中的静态方法无法被子类重写，所以向上转型之后，只能调用到父类原有的静态方法</span></span><br><span class="line"><span class="comment">        小类转型为大类 </span></span><br><span class="line"><span class="comment">        */</span> </span><br><span class="line">        Animal two=<span class="keyword">new</span> Cat();<span class="comment">//编码方式2</span></span><br><span class="line">        Animal three=<span class="keyword">new</span> Dog();<span class="comment">//编码方式3</span></span><br><span class="line">        one.eat();</span><br><span class="line">        two.eat() ;</span><br><span class="line">        two.setMonth(<span class="number">2</span>);</span><br><span class="line">        two.getMonth();</span><br><span class="line">        <span class="comment">//two.run();</span></span><br><span class="line">        three.eat();       </span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>参考文档</strong>（图片未整理入内）</p>
<blockquote>
<p>《向上转型和动态绑定机制》<br><strong>知识梳理</strong><br><strong>1. 向上转型的概念：</strong><br>向上转型又叫自动转型、隐式转型。向上转型就是父类引用指向子类实例，也就是子类的对象可以赋值给父类的对象。<br>如：</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">Animal dog=<span class="keyword">new</span> Dog( ); <span class="comment">//Dog 类是 Animal 类的子类</span></span><br></pre></td></tr></tbody></table></figure></div>
<blockquote>
<p>注：向上转型是安全的，因为任何子类都继承并接受了父类的方法。从例子中也可以理解，所有的狗狗都属于狗的父类——动物，这是可行的，但是向下转型则不行，若说所有的动物都是狗狗就不成立了。（所以向下转型要通过强制类型转换，后续章节中会讲解）<br><strong>2、向上转型的应用</strong><br>1）当一个子类对象向上转型父类类型以后，就被当成了父类的对象，所能调用的方法会减少，只能调用子类重写了父类的方法以及父类派生的方法（如 set()、get()方法），而不能调用子类独有的方法。<br>例如：<br><img src="en-resource://database/5983:1" alt="af2952831949ffea52297e59059775de.png"><br>对象实例化：</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">Pen pc=<span class="keyword">new</span> Pencil();<span class="comment">//向上转型。</span></span><br></pre></td></tr></tbody></table></figure></div>
<blockquote>
<p>此时，调用方法调用时<br><img src="en-resource://database/5985:1" alt="81239b30a517bbc884e113103566ceff.png"><br>可以调用子类重写父类的方法 writing(),但调用子类独有的方法 show()时就是无效的<br>2）父类中的静态方法是不允许被子类重写的。<br>如父类 Pen 中含有静态方法 draw( )</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>{</span><br><span class="line">    System.out.println(<span class="string">"笔可以用来画画"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<blockquote>
<p>当子类 Pencil 中也定义同名方法时，此时 draw( )算 Pencil 类自己独有的方法：</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>{</span><br><span class="line">    System.out.println(<span class="string">"铅笔用来画素描"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<blockquote>
<p>测试类中调用时：</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">Pen pc=<span class="keyword">new</span> Pencil();<span class="comment">//向上转型。</span></span><br><span class="line">pc.draw();</span><br></pre></td></tr></tbody></table></figure></div>
<blockquote>
<p>返回结果为：</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="code"><pre><span class="line">笔可以用来画画。</span><br></pre></td></tr></tbody></table></figure></div>
<blockquote>
<p>也就是实际上调用的是父类的静态方法 draw( )<br><strong>知识扩展</strong><br>多态的实现可以通过向上转型和动态绑定机制来完成，向上转型实现了将子类对象向上转型为父类类型，而动态绑定机制能识别出对象转型前的类型，从而自动调用该类的方法，两者相辅相成。<br><strong>动态绑定：</strong><br>绑定就是将一个方法调用同一个方法所在的类连接到一起就是绑定。绑定分为静态绑定和动态绑定两种。<br><strong>静态绑定：</strong><br>在程序运行之前进行绑定（由编译器和链接程序完成的），也叫做前期绑定。<br><strong>动态绑定：</strong><br>在程序运行期间由 JVM 根据对象的类型自动的判断应该调用哪个方法，也叫做后期绑定。<br><strong>静态绑定的例子：</strong><br>如有一类 Human,它派生出来三个子类 Chinese 类、American 类和 British 类，三个子类中都重写了父类中的方法 speak( )：void,在测试类中用静态绑定的方式调用方法speak( )。</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">Chinese c=<span class="keyword">new</span> Chinese();</span><br><span class="line">c.speak();</span><br><span class="line">American a=<span class="keyword">new</span> American();</span><br><span class="line">a.speak();</span><br><span class="line">British b=<span class="keyword">new</span> British();</span><br><span class="line">b.speak();</span><br></pre></td></tr></tbody></table></figure></div>
<blockquote>
<p>这种调用方式是在代码里指定的，编译时编译器就知道 c 调用的是 Chinese 的 speak( ),a调用的是 American 的 speak( )。<br><strong>动态绑定的例子：</strong><br>如果我们在测试类中做以下改动：</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//生成父类对象数组，数组长度为5。</span></span><br><span class="line">Human[] human=<span class="keyword">new</span> Human[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;human.length;i++){</span><br><span class="line">	n=(<span class="keyword">int</span>)(Math.random()*<span class="number">3</span>);<span class="comment">//随机产生从0-2中一个数</span></span><br><span class="line">	<span class="keyword">switch</span>(n){</span><br><span class="line">		<span class="keyword">case</span> <span class="number">0</span>:human[i]=<span class="keyword">new</span> Chinese();<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:human[i]=<span class="keyword">new</span> American();<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:human[i]=<span class="keyword">new</span> British();<span class="keyword">break</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//循环输出，循环体中每个对象分别调用speak()方法。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;human.length;i++){</span><br><span class="line">	human[i].speak();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<blockquote>
<p>此时，Human 类中随机生成 Chinese 类、American 类和 British 类的对象，编译器不能根据代码直接确定调用哪个类中的 speak( )方法，直到运行时才能根据产生的随机数 n 的值来确定 human[i]到底代表哪一个子类的对象，这样才能最终确定调用的是哪个类中的speak( )方法，这就是动态绑定。</p>
</blockquote>
<h5 id="选择练习"><a href="#选择练习" class="headerlink" title="选择练习"></a>选择练习</h5><p>下列代码的运行结果为：（）（选择一项）。<br><img src="en-resource://database/5728:1" alt="838be519473b67f6f91d7b7fde9a2e7d.png"><br>A.  我是动物<br>B.  编译错误<br>C.  <img src="en-resource://database/5730:1" alt="bb10a5fa5877f9b4b37bde8d67d2508d.png"><br>D.  我是动物 我是老虎 我是哈士奇<br>正确答案： C<br>参考解析：<br>本题考查向上转型，在向上转型的操作中，当父类引用指向子类实例时，可以调用子类重写父类的方法。故C选项正确。</p>
<h5 id="选择练习-1"><a href="#选择练习-1" class="headerlink" title="选择练习"></a>选择练习</h5><p>创建一个父类Animal，一个子类Cat，Animal three = new Cat();不是（）（选择一项）<br>A.  向上转型<br>B.  自动转型<br>C.  向下转型<br>D.  隐式转型<br>正确答案： C<br>参考解析：本题考查向上转型和向下转型的概念，该代码是把一个子类的对象转型为一个父类对象，故是向上转型，向上转型又名隐式转型、自动转型。故C选项错误。</p>
<h5 id="选择练习-2"><a href="#选择练习-2" class="headerlink" title="选择练习"></a>选择练习</h5><p>下列代码怎么修改可以使其成功运行：（）（选择一项）<br><img src="en-resource://database/5732:1" alt="19c2baede0d115632564a54ed090aede.png"><br>A.  删除掉标注3位置的one.fly( )<br>B.  标注1的Animal one=new Bird()修改为Animal one=new Animal()<br>C.  删除掉标注2位置的one.eat( )<br>D.  标注1的Animal one=new Bird()修改为Bird one=new Animal()</p>
<p>正确答案： A<br>参考解析：<br>本题考查<strong>向上转型，由父类引用指向子类对象，完成向上转型时，不能调用子类自己特有的方法，</strong> 故A选项正确。</p>
<h5 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h5><p>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.animal.Animal;</span><br><span class="line"><span class="keyword">import</span> com.imooc.animal.Cat;</span><br><span class="line"><span class="keyword">import</span> com.imooc.animal.Dog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Animal one=<span class="keyword">new</span> Animal();</span><br><span class="line">        Animal two=<span class="keyword">new</span> Cat();</span><br><span class="line">        Animal three=<span class="keyword">new</span> Dog();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 向下转型、强制类型转换</span></span><br><span class="line"><span class="comment">        * 子类引用指向父类对象，此处必须进行强转，可以调用子类特有的方法。</span></span><br><span class="line"><span class="comment">        * 必须满足转换条件才能强转。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Cat temp=(Cat)two;</span><br><span class="line">        temp.eat();</span><br><span class="line">        temp.run();</span><br><span class="line">        temp.getMonth();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Dog类与</span></span><br><span class="line">        Dog temp2=(Dog)two;</span><br><span class="line">        temp2.eat();</span><br><span class="line">        temp2.sleep();</span><br><span class="line">        temp2.getSex();</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h5 id="选择练习-3"><a href="#选择练习-3" class="headerlink" title="选择练习"></a>选择练习</h5><p>阅读以下代码，横线处填写（）无法在控制台输出‘无忧无虑哦！’。（选择两项）<br><img src="en-resource://database/5734:1" alt="a22b938dba4f8f3c8745a0d8af5936dc.png"><br>A.<img src="en-resource://database/5736:1" alt="2ce19c7e37647d73444e69b77b3ac596.jpeg"><br>B.<img src="en-resource://database/5738:1" alt="5e5acc73fe7530148bef507cbac2b167.png"><br>C.<img src="en-resource://database/5740:1" alt="31c7eea9661d596018d8d0ea238c86a5.png"><br>D.<img src="en-resource://database/5742:1" alt="6e3f72f492bab756eaeecbeb0431c837.png"></p>
<p>正确答案： C,D</p>
<p><strong>参考解析：</strong></p>
<p>本题考查向上转型，CD选项正确。A选项，子类引用指向子类的实例，可以调用该类自己的方法，输出”无忧无虑哦！”。B选项，父类引用指向子类的实例，（Roo）one又将子类的实例转换成子类Roo的对象，这是允许的，然后再调用子类的leap()方法，输出”无忧无虑哦！”C选项，Roo pet=new Animal();子类引用指向父类对象会出现编译错误。D选项，Roo roo= new (Roo)pet;这个语法不对，不应该有new，如果把new去掉，不会出现编译错误，但是运行时会出现异常</p>
<h5 id="instanceof运算符"><a href="#instanceof运算符" class="headerlink" title="instanceof运算符"></a>instanceof运算符</h5><p><img src="en-resource://database/5987:1" alt="8bd7316ce6b6ff8c67f3754f5a965dda.png"></p>
<p>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.animal.Animal;</span><br><span class="line"><span class="keyword">import</span> com.imooc.animal.Cat;</span><br><span class="line"><span class="keyword">import</span> com.imooc.animal.Dog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		Animal one=<span class="keyword">new</span> Animal();</span><br><span class="line">		Animal two=<span class="keyword">new</span> Cat();</span><br><span class="line">		Animal three=<span class="keyword">new</span> Dog();</span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 向下转型、强制类型转换</span></span><br><span class="line"><span class="comment">		 * 子类引用指向父类对象，此处必须进行强转，可以调用子类特有的方法。</span></span><br><span class="line"><span class="comment">		 * 必须满足转换条件才能强转。</span></span><br><span class="line"><span class="comment">		 * instanceof运算符：返回true/false</span></span><br><span class="line"><span class="comment">        * 提高向下转型安全性。</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">if</span>(two <span class="keyword">instanceof</span> Cat){<span class="comment">//可以判断左侧的对象是否满足右侧类型对象的特征。</span></span><br><span class="line">			Cat temp=(Cat)two;</span><br><span class="line">			temp.eat();</span><br><span class="line">			temp.run();</span><br><span class="line">			temp.getMonth();</span><br><span class="line">			System.out.println(<span class="string">"two可以转换为Cat类型"</span>);</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(two <span class="keyword">instanceof</span> Dog){</span><br><span class="line">			Dog temp2=(Dog)two;</span><br><span class="line">			temp2.eat();</span><br><span class="line">			temp2.sleep();</span><br><span class="line">			temp2.getSex();</span><br><span class="line">			System.out.println(<span class="string">"two可以转换为Dog类型"</span>);</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(two <span class="keyword">instanceof</span> Animal){</span><br><span class="line">			System.out.println(<span class="string">"Animal"</span>);</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (two <span class="keyword">instanceof</span> Object){</span><br><span class="line">			System.out.println(<span class="string">"Object"</span>);</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>运行结果：</strong><br><img src="en-resource://database/6013:1" alt="c5ed4bf3af3a4fb02458ce29582317bd.png"></p>
<ul>
<li>two之所以有Cat特征是因为，这个引用指向Cat实例。</li>
<li>而之所以有Animal的特征，是因为Animal是Cat父类。</li>
<li>之所以具有Object的特征，是因为Object是Animal的父类。</li>
</ul>
<blockquote>
<p><strong>《向下转型和 instanceof 运算符的应用》</strong><br><strong>知 识 梳 理</strong><br><strong>一：向下转型</strong><br><strong>1. 向下转型</strong><br>向下转型是与向上转型相对的概念，它是用子类引用指向父类实例。<br>如：下图，在进行转换是会报错<br><img src="en-resource://database/6015:1" alt="303d22509216029049bd0812a699357c.png"><br>这时就告诉我们向下转型不能自动转换，我们需要强转，所以向下转型又叫做强制类型转换。<br>正确的转换语句为：<br><img src="en-resource://database/6017:1" alt="7820b0ad5ddb80d8adfcaa2c3fed42b4.png"><br><strong>2. 向下转型后，可以调用子类自己独有的方法。</strong><br>例如：（承接上一文档例子）<br><img src="en-resource://database/6019:1" alt="734e5a9b699ce4cb56cafa8dd4d00e08.png"><br>测试类中通过强制类型转换后，可调用 Pencil 类中独有的方法 show( )了。<br><img src="en-resource://database/6021:1" alt="1ddac373e215053c638f8733859998d0.png"><br><strong>3. 兄弟类之间不能进行强制类型转换。</strong><br>如：父类 Pen 类派生出另一个子类 Brush。<br><img src="en-resource://database/6023:1" alt="bbba659bc34155988c73ccfa7cf9d026.png"><br>将指向 Brush 对象的父类引用 b 强制转换为 Brush 的兄弟类 Pencil 的对象，此时编译<br>器并没有报错，但在运行时会报出如下错误：<br><img src="en-resource://database/6025:1" alt="dc08f8525611d6de4e821fc55eb4121e.png"><br><strong>二：instanceof 运算符</strong><br><strong>1． 基本概念</strong><br>instanceof 运算符用来判断对象是否可满足某个特定类型实例特征。返回值为<br>true/false。一般用于 if 语句中。<br>表示方法为：<br><img src="en-resource://database/6027:1" alt="72c75a80190a291d9bfef710e983ce8a.png"><br>如：<br><img src="en-resource://database/6029:1" alt="5adad3838c01f5752dff2e8de5909fca.png"><br>如果左边对象是右边类的实例则返回 true,否则返回 false。<br><strong>2.instanceof 运算符的应用</strong><br>1）用 instanceof 运算符用来判断对象是否可满足某个特定类型实例特征<br>例子：<br>父类 Parents 类，Father 类和 Mother 类分别为它的两个子类：<br><img src="en-resource://database/6031:1" alt="4c6ae1069912a831e3ae683ac7bc1a8f.png"><br>运行结果为：<br><img src="en-resource://database/6033:1" alt="ca589eb91b53b2daa677411071ec3436.png"><br>注：java 中所有类都直接或间接继承于 Object 类。</p>
</blockquote>
<h5 id="选择练习-4"><a href="#选择练习-4" class="headerlink" title="选择练习"></a>选择练习</h5><p>阅读下列Java代码，横线处应该填写（）能在控制台正确输出“汪汪汪！”。(选择一项)<br><img src="en-resource://database/5744:1" alt="b705ccff3b64dea0f53ef75781330c12.png"></p>
<p>A、1处：(Dog)animal.shout();<br>2处：Animal animal = new Dog();</p>
<p>B、1处：<img src="en-resource://database/5746:3" alt="f472fa822c0cd93dacd744fe12e95e2b.png"></p>
<p>2处：Animal animal = new Animal();</p>
<p>C、1处：<img src="en-resource://database/5746:3" alt="f472fa822c0cd93dacd744fe12e95e2b.png"></p>
<p>2处：Animal animal = new Dog();</p>
<p>D、1处：<img src="en-resource://database/5746:3" alt="f472fa822c0cd93dacd744fe12e95e2b.png"></p>
<p>2处：Animal animal = new Roo();</p>
<p>正确答案： C</p>
<p>参考解析：本题考查多态及instanceof运算符的使用。可以通过instanceof运算符判断类型后，使用向下转型将父类引用转换成子类实例，调用子类特有的方法。同时，在类型转换时，需要注意括号的使用。如果仅仅是(Dog)animal.shout();表示的是，调用shout()方法后的结果转换为Dog类型。当((Dog)animal).shout();时表示的是将animal转换为Dog类型后，调用shout()方法。故C选项是正确的。</p>
<h5 id="选择练习-5"><a href="#选择练习-5" class="headerlink" title="选择练习"></a>选择练习</h5><p>下列关于instanceof说法不正确的是（）。（选择一项）<br>A.  instanceof 的返回值为true和false<br>B.  instanceof可以用来判断对象是否可满足某个特定类型<br>C.  可以通过“A instanceof B"表示 A 类可以转型为B类<br>D.  instanceof可放在if语句的条件表达式中<br>正确答案： C<br>参考解析：本题考查instanceof运算符的使用，A instanceof B语句表示左边对象引用类型是否可满足右边类型实例特征，A不是类，C选项的描述是错误的，故选C。</p>
<h5 id="选择练习-6"><a href="#选择练习-6" class="headerlink" title="选择练习"></a>选择练习</h5><p>已知父类Person,子类Man。判断类Person的对象person1是否满足类Man的实例特征，正确的语句为（）（选择一项）<br><img src="en-resource://database/5748:1" alt="ae5894b6a41bb0fd4c342460a6388383.png"><br>A.  if (person1  instanceof  Man)<br>B.  if (man1  instanceof  Person)<br>C.  if (Person  instanceof  man1)<br>D.  if (Man  instanceof  person1)<br>正确答案： A<br>参考解析：本题考查instanceof运算符的使用，正确的表示方法为，<br>所以本题中左边的对象为person1右边为Man类。故A选项正确。</p>
<h4 id="类型转换总结"><a href="#类型转换总结" class="headerlink" title="类型转换总结"></a>类型转换总结</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//向上转型</span></span><br><span class="line">Animal two=<span class="keyword">new</span> Cat();</span><br><span class="line"><span class="comment">//分解</span></span><br><span class="line">two=cat;</span><br><span class="line">Animal three=<span class="keyword">new</span> Dog();</span><br></pre></td></tr></tbody></table></figure></div>
<p>如果父类方法当中含有static关键字，那么它是不允许被重写的。</p>
<p>父类中的静态方法无法被子类重写，所以向上转型之后，只能调用到父类原有的静态方法。</p>
<p>如果非要用子类自己的方法，需要再向下转型。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line">Animal two=<span class="keyword">new</span> Cat();</span><br><span class="line">two.say();</span><br><span class="line">Cat cat=(Cat)two;<span class="comment">//向下转型。</span></span><br><span class="line">cat.say();</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="类型转换案例（上）"><a href="#类型转换案例（上）" class="headerlink" title="类型转换案例（上）"></a>类型转换案例（上）</h4><p>Master.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.animal;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Master</span> </span>{</span><br><span class="line"><span class="comment">/*喂宠物。        </span></span><br><span class="line"><span class="comment">* 喂猫咪：吃完东西后，主人会带去玩线球。        </span></span><br><span class="line"><span class="comment">* 喂狗狗：吃完东西后，主人会带着狗狗去睡觉。        </span></span><br><span class="line"><span class="comment">* 养兔子、养鹦鹉、养乌龟。。。        </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//方案一：编写方法，传入不同类型的动物，调用各自的方法。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">feed</span><span class="params">(Cat cat)</span> </span>{</span><br><span class="line">cat.eat();</span><br><span class="line">cat.playBall();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">feed</span><span class="params">(Dog dog)</span> </span>{</span><br><span class="line">dog.eat();</span><br><span class="line">dog.sleep();</span><br><span class="line">}</span><br><span class="line"><span class="comment">//方案二：编写方法传入动物的父类，方法中通过类型转换，调用指定子类的方法。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">feed</span><span class="params">(Animal obj)</span> </span>{</span><br><span class="line"><span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Cat) {</span><br><span class="line">    Cat temp=(Cat)obj;</span><br><span class="line">    temp.eat();</span><br><span class="line">    temp.playBall();</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Dog) {</span><br><span class="line">    Dog temp=(Dog)obj;</span><br><span class="line">    temp.eat();</span><br><span class="line">    temp.sleep();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>MasterTest.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"><span class="keyword">import</span> com.imooc.animal.Cat;</span><br><span class="line"><span class="keyword">import</span> com.imooc.animal.Dog;</span><br><span class="line"><span class="keyword">import</span> com.imooc.animal.Master;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MasterTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Master master=<span class="keyword">new</span> Master();</span><br><span class="line">        Cat one=<span class="keyword">new</span> Cat();</span><br><span class="line">        Dog two=<span class="keyword">new</span> Dog();</span><br><span class="line">        master.feed(one);</span><br><span class="line">        master.feed(two);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="类型转换案例（下）"><a href="#类型转换案例（下）" class="headerlink" title="类型转换案例（下）"></a>类型转换案例（下）</h4><p>Master.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.animal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Master</span> </span>{</span><br><span class="line">    <span class="comment">/* 喂宠物。</span></span><br><span class="line"><span class="comment">     * 喂猫咪：吃完东西后，主人会带着去玩线球。</span></span><br><span class="line"><span class="comment">     * 喂狗狗：吃完东西后，主人会带着去睡觉。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//方案一：编写方法，传入不同类型的动物，调用各自的方法。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">feed</span><span class="params">(Cat cat)</span></span>{</span><br><span class="line">        cat.eat();</span><br><span class="line">        cat.playBall();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">feed</span><span class="params">(Dog dog)</span></span>{</span><br><span class="line">        dog.eat();</span><br><span class="line">        dog.sleep();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**    方案2：编写方法传入动物的父类，方法中通过类型转换，调用指定子类的方法。</span></span><br><span class="line"><span class="comment">     * 优势：一个方法解决了各种问题。如果新增宠物类型不多，且相对比较固话的话有一定优势。</span></span><br><span class="line"><span class="comment">     * 劣势：在新增类型判断的时候，需要在方法体内破坏已有的封装，增加新的功能。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">feed</span><span class="params">(Animal obj)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Cat){</span><br><span class="line">            Cat temp=(Cat)obj;</span><br><span class="line">            temp.eat();</span><br><span class="line">            temp.playBall();</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Dog){</span><br><span class="line">            Dog temp=(Dog)obj;</span><br><span class="line">            temp.eat();</span><br><span class="line">            temp.sleep();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 饲养何种宠物</span></span><br><span class="line"><span class="comment">     * 空闲时间多：养狗狗。</span></span><br><span class="line"><span class="comment">     * 空闲时间少：养猫咪。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//方案1：</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">hasManyTime</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"主人空闲时间比较充足，适合养狗狗。"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Dog();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">hasLittleTime</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"主人平时比较忙碌，适合养猫咪。"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方案2：</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">raise</span><span class="params">(<span class="keyword">boolean</span> isManyTime)</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (isManyTime){</span><br><span class="line">            System.out.println(<span class="string">"主人休闲时间比较充足，适合养狗狗。"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Dog();</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            System.out.println(<span class="string">"主人休闲时间比较充足，适合养猫咪"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>MasterTest.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"><span class="keyword">import</span> com.imooc.animal.Animal;</span><br><span class="line"><span class="keyword">import</span> com.imooc.animal.Dog;</span><br><span class="line"><span class="keyword">import</span> com.imooc.animal.Cat;</span><br><span class="line"><span class="keyword">import</span> com.imooc.animal.Master;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MasterTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        Master master=<span class="keyword">new</span> Master();</span><br><span class="line">        Cat one=<span class="keyword">new</span> Cat();</span><br><span class="line">        Dog two=<span class="keyword">new</span> Dog();</span><br><span class="line">        master.feed(one);</span><br><span class="line">        master.feed(two);</span><br><span class="line">        System.out.println(<span class="string">"=================="</span>);</span><br><span class="line">        <span class="keyword">boolean</span> isManyTime=<span class="keyword">false</span>;</span><br><span class="line">        Animal temp=master.raise(isManyTime);</span><br><span class="line"><span class="comment">//        if (isManyTime){</span></span><br><span class="line"><span class="comment">//            temp=master.hasManyTime();</span></span><br><span class="line"><span class="comment">//        }else{</span></span><br><span class="line"><span class="comment">//            temp=master.hasLittleTime();</span></span><br><span class="line"><span class="comment">//        }</span></span><br><span class="line">        System.out.println(temp);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h5 id="选择练习-7"><a href="#选择练习-7" class="headerlink" title="选择练习"></a>选择练习</h5><p>在Java中，多态的实现不仅能减少编码的工作量，还能大大提高程序的可维护性及可扩展性，那么实现多态的步骤包括以下几个方面除了（ ）。（选择一项）<br>A.  子类重写父类的方法<br>B.  子类方法设置为final类型<br>C.  定义方法时，把父类类型作为参数类型；调用方法时，把父类或子类的对象作为参数传入方法<br>D.  运行时，根据实际创建的对象类型动态决定使用哪个方法</p>
<p>正确答案： B<br>参考解析：本题考查多态的概念，final修饰的方法是不允许子类重写的，与多态实现无关，故选B。</p>
<h5 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h5><p>应用继承和多态的思想，编写动物类，成员方法是动物叫声。写三个具体的类（猫、狗、羊），它们都是动物类的子类，并重写父类的成员方法。编写测试类，随机产生三种具体动物，调用叫声这个方法。<br>程序参考运行效果如图所示：<br><img src="en-resource://database/5750:1" alt="c647628b62ce86d54d2f8954692885f5.png"></p>
<p><strong>任务</strong><br><strong>任务分析：</strong></p>
<ol>
<li><pre><code> 定义一个父类Animal类属性：kind(种类)方法：创建带参（kind为参数）构造方法            创建cry():void方法
</code></pre>
</li>
<li><pre><code> 编写三个具体的子类Cat类、Dog类、Sheep类分别重写父类中的 cry() 方法，输出信息分别为Cat类：小猫的叫声：喵喵喵~\~~Dog类：小狗的叫声：汪汪汪~\~~Sheep类：小羊的叫声：咩咩咩~~~
</code></pre>
</li>
<li><pre><code> 编写测试类，首先生成长度为5的父类对象数组，然后通过循环依次向数组中存入数据，现设定存储规则为：
</code></pre>
</li>
</ol>
<p>a)      每次随机产生一个0~2的正整数<br>b)     若数值为 0，则生成一个 Cat 类的对象，存入数组<br>c)      若数值为 1，则生成一个 Dog 类的对象，存入数组<br>d)     若数值为 2，则生成一个 Sheep 类的对象，存入数组最后循环输出数组成员，并分别调用 cry() 方法。  </p>
<p>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"><span class="comment">//生成父类对象数组,数组长度为5 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//产生随机数，随机产生三种具体子类的实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//循环输出，循环体中每个对象分别调用cry()方法。</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Animal.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>{</span><br><span class="line"><span class="comment">//属性：kind(种类)    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span></span>{</span><br><span class="line">}</span><br><span class="line"><span class="comment">//创建带参（kind为参数）构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//应用封装实现对私有属性的get/set操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建成员方法cry():void    </span></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Cat.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>{    </span><br><span class="line"><span class="comment">//重写父类cry()方法，输出信息为“小猫的叫声：喵喵喵~~~”  </span></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Dog.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>{</span><br><span class="line"><span class="comment">//重写父类cry()方法：输出信息为“小狗的叫声：汪汪汪~~~”</span></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Sheep.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>{</span><br><span class="line"><span class="comment">//重写父类的方法cry(),要求输出信息“小羊的叫声：咩咩咩~~~”</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>作答<br>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		Animal[] n = <span class="keyword">new</span> Animal[<span class="number">5</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n.length; i++) {</span><br><span class="line">			<span class="keyword">int</span> temp = (<span class="keyword">int</span>) (Math.random() * <span class="number">3</span>);</span><br><span class="line">			<span class="keyword">switch</span> (temp) {</span><br><span class="line">			<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">				n[i] = <span class="keyword">new</span> Cat();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				n[i] = <span class="keyword">new</span> Dog();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				n[i] = <span class="keyword">new</span> Sheep();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			}</span><br><span class="line">			n[i].cry();</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Animal.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>{</span><br><span class="line">    <span class="comment">//属性：kind(种类)</span></span><br><span class="line">    <span class="keyword">private</span> String kind;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span></span>{}</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建带参（kind为参数）构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String kind)</span></span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//应用封装实现对私有属性的get/set操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKind</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> kind;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKind</span><span class="params">(String kind)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.kind=kind;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建成员方法cry():void</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"动物的叫声。"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Cat.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>{</span><br><span class="line">    <span class="comment">//重写父类cry()方法，输出信息为“小猫的叫声：喵喵喵~~~”</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span> </span>{	</span><br><span class="line">		System.out.println(<span class="string">"小猫的叫声：喵喵喵~~~"</span>);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Dog.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>{</span><br><span class="line">    <span class="comment">//重写父类cry()方法：输出信息为“小狗的叫声：汪汪汪~~~”</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span> </span>{	</span><br><span class="line">		System.out.println(<span class="string">"小狗的叫声：汪汪汪~~~"</span>);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Sheep.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>{</span><br><span class="line">    <span class="comment">//重写父类的方法cry(),要求输出信息“小羊的叫声：咩咩咩~~~”</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span> </span>{	</span><br><span class="line">		System.out.println(<span class="string">"小羊的叫声：咩咩咩~~~"</span>);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>也可以在最后写一个循环，遍历数组调用cry()方法。降低耦合度，提升灵活性。</p>
<h5 id="选择练习-8"><a href="#选择练习-8" class="headerlink" title="选择练习"></a>选择练习</h5><p>下面代码运行测试后，出现的结果是（）(选择一项)<br><img src="en-resource://database/5752:1" alt="354fd4d480a190696c8a1264588a8afb.png"><br>A.  编译错误，错误位置在第一行<br>B.  编译错误，错误位置在第二行<br>C.  第一行和第二行都运行成功，输出结果为儿子女儿<br>D.  编译成功，但运行报错，错误位置在第二行<br>正确答案： D<br>参考解析：本题考查类型转换，不能进行兄弟类间的强制类型转换，若编写该语法，则编译不会报错，但运行过程会报错。故D选项正确。</p>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><h4 id="抽象类-1"><a href="#抽象类-1" class="headerlink" title="抽象类"></a>抽象类</h4><p><strong>关键字：</strong>abstract<br><strong>抽象类：</strong><br>不允许实例化，可以通过向上转型，指向子类实例。<br><strong>应用场景：</strong><br>某个父类只是知道其子类应该包含怎样的方法，但无法准确知道这些子类如何实现这些方法。</p>
<p><img src="en-resource://database/6039:1" alt="39c74acfc62aae9dc2dfb3c11f6f1910.png"></p>
<h4 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h4><ul>
<li>不允许包含方法体；</li>
<li>子类中需要重写父类的抽象方法，否则，子类也是</li>
</ul>
<p><strong>抽象类使用规则：</strong></p>
<ul>
<li>abstract定义抽象类。</li>
<li>抽象类不能直接实例化，只能被继承，可以通过向上转型完成对象实例。</li>
<li>abstract定义抽象方法，不需要具体实现。</li>
<li>包含抽象方法的类是抽象类。</li>
<li>抽象类中可以没有抽象方法。</li>
<li>static、final、private不能与abstract并存。</li>
</ul>
<blockquote>
<p>《抽象类和抽象方法》<br>一：知识梳理<br><strong>1.基本概念：</strong><br>在面向对象的概念中，所有的对象都是通过类来描述的，但并不是说所有的类都是用来描述对象的，当一个类中没有包含足够的信息以描绘一个具体的对象时，这样的类就是抽象类。<br>例：形状就是一个抽象的概念。不同的子类计算形状面积的方法是不一样的。可提供抽象方法来被不同的子类所实现。<br><img src="en-resource://database/6041:1" alt="c6d4991bf2e9af98a5a399ae181812f1.png"><br>从例子中可看出，抽象了是用关键字 abstract 修饰的。抽象类中有一种特殊方法，即用abstract 关键字来修饰的方法，称为“抽象方法”。<br><strong>2.抽象类和抽象方法的声明格式：</strong><br><img src="en-resource://database/6043:1" alt="2026b851945107e545da111ed31429a0.png"><br><strong>3.抽象类和抽象方法的特点：</strong><br>（1）抽象方法不允许直接实例化，换句话说抽象类不能创建对象，它只能作为其他类的父类。 但可以通过向上转型，指向实例化。<br>（2）抽象方法只有声明，不能有实现，也就是仅有方法头，而没有方法体和操作实现。如：abstract double area( );<br><strong>4.定义抽象类的意义在于：</strong><br>（1）为其子类提供一个公共的类型（父类引用指向子类对象）；<br>（2）封装子类中的重复内容（成员变量和方法）;<br>（3）将父类设计成抽象类后，既可借由父子继承关系限制子类的设计随意性，在一定程度上避免了无意义父类的实例化。<br><strong>二．重点注意</strong><br><strong>含有抽象方法的类，只能被定义成抽象类。</strong><br>如下面，不定义为抽象类时会报错：<br><img src="en-resource://database/6045:1" alt="ea9c79c31b7f7b1ba2e4396c5e84fe6a.png"><br>正确的代码为：<br><img src="en-resource://database/6047:1" alt="26ba3263a72b2789f7869500fc744f64.png"><br><strong>抽象类不一定包含抽象方法。</strong><br>例子：<br><img src="en-resource://database/6049:1" alt="f9d6bc86c0fd950f0a73c160713a0ca9.png"><br><strong>在抽象类中的成员方法可以包括一般方法和抽象方法</strong><br><img src="en-resource://database/6051:1" alt="169e8332ff9133234871665242b21e11.png"><br><strong>抽象类不能被实例化，即使抽象类里不包含抽象方法，这个抽象类也不能创建实例。</strong><br><strong>抽象类的构造方法主要是用于被其子类调用。</strong><br>例子：<br>Shape 抽象类中不含抽象方法：<br><img src="en-resource://database/6053:1" alt="086458c6443ea1c5a66be4662b7e7288.png"><br>测试类中实例化 Shape,编译器会报错：<br><img src="en-resource://database/6055:1" alt="e6de920c580884497180ad0d858e06c2.png"><br><strong>一个类继承抽象类后，必须实现其所有抽象方法，否则也是抽象类，不同的子类对<br>父类的抽象方法可以有不同的实现。</strong><br>如父类为：<br><img src="en-resource://database/6057:1" alt="d2cff76ee3bc72e8c7c791ed9b6b3682.png"><br>则其子类 Circle 有两种做法：<br>方案一：重写抽象方法 area( ),使方法得以实现。<br><img src="en-resource://database/6059:1" alt="5e0667f1a3ee88feeab4b3ff4e061317.png"><br>方案二：子类 Circle 类也定义为抽象类。<br><img src="en-resource://database/6061:1" alt="23e5add6dfe4ce670de65fbfcfcad696.png"><br><strong>即使父类是具体的，但其子类也可以是抽象的。如 Object 是具体的，但可以创建<br>抽象子类。</strong><br><strong>abstract 方法不能用 static 和 private 修饰；对于类，不能同时用 final 和 abstract 修<br>饰，因为 final 关键字使得类不可继承，而 abstract 修饰的类如果不可以继承将没有<br>任何意义。两者放在一起，会起冲突</strong><br>如以下用法都会引起编译器报错：<br><img src="en-resource://database/6063:1" alt="60cc7174acb1fca420949e9485f4fa79.png"><br><strong>三：一个完整准确的抽象类例子</strong><br>声明一个抽象类 Shape,有抽象成员方法 area()。Shape 派生出两个子类圆 Circle 类和<br>矩形 Rectangle 类。Shape 里声明了抽象方法 area(),该方法分别在两个子类里得到实<br>现。<br>代码如下：</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.shape;</span><br><span class="line"><span class="comment">//抽象类父类Shape</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>;<span class="comment">//抽象方法。</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类圆Circle类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>{</span><br><span class="line">    <span class="comment">//属性：圆的半径r</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">double</span> r;</span><br><span class="line">    Circle (){</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//创建带参构造函数（参数为r）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span> <span class="params">(<span class="keyword">double</span> r)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.r=r;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">double</span> <span class="title">getR</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setR</span><span class="params">(<span class="keyword">double</span> r)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.r=r;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//重写父类中area()方法。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">double</span>)(<span class="number">3.14</span>*r*r);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//子类矩形类Rectangle</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>{</span><br><span class="line">    <span class="comment">//属性：矩形的长length、宽wide。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> length;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> wide;</span><br><span class="line"></span><br><span class="line">    Rectangle(){</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建带参构造方法（以length和wide为参数）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">Rectangle</span><span class="params">(<span class="keyword">double</span> length,<span class="keyword">double</span> wide)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.length=length;</span><br><span class="line">        <span class="keyword">this</span>.wide=wide;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//get/set方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getLength</span><span class="params">()</span></span>{</span><br><span class="line">            <span class="keyword">return</span> length;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">setLength</span><span class="params">(<span class="keyword">double</span> length)</span></span>{</span><br><span class="line">            <span class="keyword">this</span>.length=length;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWide</span><span class="params">()</span></span>{</span><br><span class="line">            <span class="keyword">return</span> wide;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">setWide</span><span class="params">(<span class="keyword">double</span> wide)</span></span>{</span><br><span class="line">            <span class="keyword">this</span>.wide=wide;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//重写父类的area()方法。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>{</span><br><span class="line">            <span class="keyword">return</span> length*wide;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.imooc.shape.Circle;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        <span class="comment">//创建类的实例，将圆的半径设为3.5，矩形的长度分别是6和5</span></span><br><span class="line">        Circle c=<span class="keyword">new</span> Circle(<span class="number">3.5</span>);</span><br><span class="line">        Rectangle re=<span class="keyword">new</span> Rectangle(<span class="number">6</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//调用area()方法，输出结果。</span></span><br><span class="line">        System.out.println(<span class="string">"圆的面积为"</span>+c.area());</span><br><span class="line">        System.out.println(<span class="string">"矩形的面积为"</span>+re.area());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h5 id="4-3-选择练习"><a href="#4-3-选择练习" class="headerlink" title="4-3 选择练习"></a>4-3 选择练习</h5><p>下面代码怎么修改可以编译时不报错（）（选择两项）<br><img src="en-resource://database/5754:1" alt="311ef34c11220ef84a8419555d5b2839.png"><br>A.  在位置一处将SpeedBike类设为抽象类，同时将位置2处的speedup也设为抽象方法<br>B.  将位置一中的public改为final<br>C.  将位置二中speedup()方法改为抽象方法<br>D.  将位置二中speedup()方法中加入方法的实现<br>正确答案： A,D<br>参考解析：本题考查抽象类的定义，若一个类中包含了抽象方法，那么该类应该定义为抽象类。故AD选项正确。</p>
<h5 id="4-4-编程练习"><a href="#4-4-编程练习" class="headerlink" title="4-4 编程练习"></a>4-4 编程练习</h5><p>定义一个抽象类图形Shape类，由该派生出两个子类圆Circle类和矩形Rectangle类。Shape里声明了抽象方法area()，该方法分别在两个子类里得到实现。<br>程序参考运行效果图如下：<br>圆的面积为：38.465<br>矩形的面积为：30.0</p>
<p><strong>任务</strong><br><strong>任务分析：</strong><br>1、定义一个抽象类Shape，在它里面创建抽象方法area（）方法。<br>2、它的子类Circle类和Rectangle类。</p>
<p><strong>子类Circle类：</strong><br>属性： r（圆的半径）<br>方法：<br>创建带参构造函数（参数为r）<br>重写area()方法，要求在里面返回圆的面积。<br>PS：圆面积计算中，圆周率可以用3.14，也可以用 Math.PI 表示，Math类中常量 PI 也表示圆周率。</p>
<p><strong>Rectangle类：</strong><br>属性：length（长）和wide(宽)<br>方法：<br>创建带参（length和wide为参数）构造方法<br>重写area()方法，要求在里面返回矩形的面积。</p>
<p>3、编写测试类，分别创建Circle类的对象和Rectangle类的对象，设置圆的半径以及矩形的长宽，输出圆的面积和矩形的面积。（具体输出结果以具体设定参数为准）</p>
<p>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建类的实例，并分别对圆的半径和矩形的长宽进行赋值</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用area（）方法，输出结果</span></span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Rectangle.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>{    </span><br><span class="line">    <span class="comment">//属性：矩形的长lenghth、宽wide    </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建带参构造方法以及无参构造方法      </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建针对长、宽的赋值和取值方法    </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//重写父类的area（）方法</span></span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Circle.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//子类圆Circle类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>{    </span><br><span class="line">    <span class="comment">//属性：圆的半径r    </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建带参构造方法以及无参构造方法         </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建针对半径的赋值和取值方法    </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//重写父类中area()方法</span></span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Shape.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//抽象类Shape，里面含抽象方法area( )</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span>{    </span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>作答<br>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		  <span class="comment">//创建类的实例，并分别对圆的半径和矩形的长宽进行赋值</span></span><br><span class="line">		Shape shape1=<span class="keyword">new</span> Rectangle(<span class="number">6.0</span>,<span class="number">5.0</span>);</span><br><span class="line">		Shape shape2=<span class="keyword">new</span> Circle(<span class="number">3.5</span>);</span><br><span class="line">		<span class="comment">//调用area（）方法，输出结果</span></span><br><span class="line">        System.out.println(<span class="string">"圆的面积为"</span>+shape2.area());</span><br><span class="line">        System.out.println(<span class="string">"矩形的面积为"</span>+shape1.area());</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Rectangle.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>{</span><br><span class="line">    <span class="comment">//属性：矩形的长lenghth、宽wide</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> length,wide;</span><br><span class="line">	<span class="comment">//创建带参构造方法以及无参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(<span class="keyword">double</span> length,<span class="keyword">double</span> wide)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.setLength(length);</span><br><span class="line">        <span class="keyword">this</span>.setWide(wide);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">()</span></span>{</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//创建针对长、宽的赋值和取值方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">double</span> length)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.length=length;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getLength</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWide</span><span class="params">(<span class="keyword">double</span> wide)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.wide=wide;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWide</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> wide;</span><br><span class="line">    }</span><br><span class="line">	<span class="comment">//重写父类的area（）方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>{</span><br><span class="line">		<span class="keyword">double</span> s=length*wide;</span><br><span class="line">		<span class="keyword">return</span> s;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Circle.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//子类圆Circle类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>{</span><br><span class="line">  <span class="comment">//属性：圆的半径r</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> r;</span><br><span class="line">  <span class="comment">//创建带参构造方法以及无参构造方法</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">()</span></span>{</span><br><span class="line">       </span><br><span class="line">   }</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> r)</span></span>{</span><br><span class="line">       <span class="keyword">this</span>.setR(r);</span><br><span class="line">   }</span><br><span class="line">  <span class="comment">//创建针对半径的赋值和取值方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setR</span><span class="params">(<span class="keyword">double</span> r)</span></span>{</span><br><span class="line">      <span class="keyword">this</span>.r=r;</span><br><span class="line">  }</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getr</span><span class="params">()</span></span>{</span><br><span class="line">      <span class="keyword">return</span> r;</span><br><span class="line">  }</span><br><span class="line">	<span class="comment">//重写父类中area()方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>{</span><br><span class="line">	  <span class="keyword">double</span> S=r*r*<span class="number">3.14</span>;</span><br><span class="line">	  <span class="keyword">return</span> S;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Shape.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//抽象类Shape，里面含抽象方法area( )</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span>{</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h5 id="4-5-选择练习"><a href="#4-5-选择练习" class="headerlink" title="4-5 选择练习"></a>4-5 选择练习</h5><p>下列选项中，关于Java的抽象类和抽象方法说法不正确的是（）。（选择一项）<br>A.  抽象类和抽象方法都通过abstract关键字来修饰<br>B.  抽象类中必须包含抽象方法<br>C.  抽象方法只有方法声明，没有方法实现<br>D.  子类如果不重写父类所有的抽象方法，则必须设置为抽象类</p>
<p>正确答案： B</p>
<p><strong>参考解析：</strong><br>本题考查抽象类，抽象类中可以不包含抽象方法，故B选项的说法不正确。</p>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="问题引发的思考"><a href="#问题引发的思考" class="headerlink" title="问题引发的思考"></a>问题引发的思考</h4><ul>
<li>Java中只支持单继承。</li>
<li>如何解决一个类型中需要兼容多种类型特征的问题？</li>
<li>以及多个不同类型具有相同特征的问题呢？</li>
</ul>
<p>Telphone.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.tel;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原始手机。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Telphone</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//无参构造。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Telphone</span><span class="params">()</span></span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get/set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBrand</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrand</span><span class="params">(String brand)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    }</span><br><span class="line">	<span class="comment">//打电话</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"手机可以打电话。"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>SecondPhone.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.tel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondPhone</span> <span class="keyword">extends</span> <span class="title">Telphone</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">message</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"手机可以发短信。"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>ThirdPhone.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.tel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThirdPhone</span> <span class="keyword">extends</span> <span class="title">SecondPhone</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">video</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"手机可以看视频。"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">music</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"手机可以听音乐。"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>FourthPhone.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.tel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FourthPhone</span> <span class="keyword">extends</span> <span class="title">ThirdPhone</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">photo</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"手机额可以拍照"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">network</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"手机可以上网。"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">game</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"手机可以玩游戏。"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>PhoneTest.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.tel.FourthPhone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        FourthPhone phone=<span class="keyword">new</span> FourthPhone();</span><br><span class="line">        phone.call();</span><br><span class="line">        phone.message();</span><br><span class="line">        phone.video();</span><br><span class="line">        phone.music();</span><br><span class="line">        phone.photo();</span><br><span class="line">        phone.network();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Computer.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.tel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">photo</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"电脑可以拍照"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">network</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"电脑可以上网。"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">game</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"电脑可以玩游戏。"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">video</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"电脑可以看视频。"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">music</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"电脑可以听音乐。"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>SmartWatch.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.tel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmartWatches</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">network</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"智能手表可以上网。"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">video</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"智能手表可以看视频。"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">music</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"智能手表可以听音乐。"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Camera.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.tel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Camera</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">video</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"相机可以拍照。"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="定义接口并测试"><a href="#定义接口并测试" class="headerlink" title="定义接口并测试"></a>定义接口并测试</h4><p>IPhoto.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.tel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPhoto</span> </span>{</span><br><span class="line">    <span class="comment">//具有拍照的能力</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">photo</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Camera.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.tel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Camera</span> <span class="keyword">implements</span> <span class="title">IPhoto</span></span>{</span><br><span class="line"><span class="comment">//    public void photo(){</span></span><br><span class="line"><span class="comment">//        System.out.println("相机额可以拍照");</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">photo</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"相机可以拍照。"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>FourthPhtne.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.tel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FourthPhone</span> <span class="keyword">extends</span> <span class="title">ThirdPhone</span> <span class="keyword">implements</span> <span class="title">IPhoto</span></span>{</span><br><span class="line"><span class="comment">//    public void photo(){</span></span><br><span class="line"><span class="comment">//        System.out.println("手机额可以拍照");</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">network</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"手机可以上网。"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">game</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"手机可以玩游戏。"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">photo</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"手机额可以拍照"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>PhoneTest.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.tel.Camera;</span><br><span class="line"><span class="keyword">import</span> com.imooc.tel.FourthPhone;</span><br><span class="line"><span class="keyword">import</span> com.imooc.tel.IPhoto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line"><span class="comment">//        FourthPhone phone=new FourthPhone();</span></span><br><span class="line"><span class="comment">//        phone.call();</span></span><br><span class="line"><span class="comment">//        phone.message();</span></span><br><span class="line"><span class="comment">//        phone.video();</span></span><br><span class="line"><span class="comment">//        phone.music();</span></span><br><span class="line"><span class="comment">//        phone.photo();</span></span><br><span class="line"><span class="comment">//        phone.network();</span></span><br><span class="line"><span class="comment">//        System.out.println("============================");</span></span><br><span class="line">        IPhoto ip=<span class="keyword">new</span> FourthPhone();<span class="comment">//手机调用接口。</span></span><br><span class="line">        ip.photo();</span><br><span class="line">        ip=<span class="keyword">new</span> Camera();<span class="comment">//相机调用接口。</span></span><br><span class="line">        ip.photo();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p><img src="en-resource://database/6065:1" alt="fa1606750e8563cdc9ea37d53d2f87ec.png"></p>
<h4 id="接口成员–抽象方法-amp-常量"><a href="#接口成员–抽象方法-amp-常量" class="headerlink" title="接口成员–抽象方法&amp;常量"></a>接口成员–抽象方法&amp;常量</h4><ul>
<li>接口定义了某一批类所需要遵守的规范</li>
<li>接口不关心这些类的内部数据，也不关心这些类里方法的实现细节，它只规定这些类里必须提供某些方法。</li>
</ul>
<p>INet.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.tel;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口访问修饰符：public 默认。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">INet</span> </span>{</span><br><span class="line">    <span class="comment">/**接口中抽象方法可以不写abstract关键字</span></span><br><span class="line"><span class="comment">     * 访问修饰符默认public。</span></span><br><span class="line"><span class="comment">     * 当类实现接口时，需要去实现接口中的所有抽象方法，否则需要将该类设置为抽象类。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">network</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">connection</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接口中可以包含常量，默认public、static、final</span></span><br><span class="line">    <span class="keyword">int</span> TEMP=<span class="number">20</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Computer.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.tel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> <span class="keyword">implements</span> <span class="title">INet</span></span>{</span><br><span class="line"><span class="comment">//    public void network(){</span></span><br><span class="line"><span class="comment">//        System.out.println("电脑可以上网。");</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">photo</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"电脑可以拍照"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">game</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"电脑可以玩游戏。"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">video</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"电脑可以看视频。"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">music</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"电脑可以听音乐。"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">network</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"电脑可以上网。"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connection</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>SmartWatch.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.tel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmartWatches</span> <span class="keyword">implements</span> <span class="title">INet</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TEMP=<span class="number">30</span>;</span><br><span class="line"><span class="comment">//    public void network(){</span></span><br><span class="line"><span class="comment">//        System.out.println("智能手表可以上网。");</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">video</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"智能手表可以看视频。"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">music</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"智能手表可以听音乐。"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">network</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"智能手表可以上网。"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connection</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>PhoneTest.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.tel.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line"><span class="comment">//        FourthPhone phone=new FourthPhone();</span></span><br><span class="line"><span class="comment">//        phone.call();</span></span><br><span class="line"><span class="comment">//        phone.message();</span></span><br><span class="line"><span class="comment">//        phone.video();</span></span><br><span class="line"><span class="comment">//        phone.music();</span></span><br><span class="line"><span class="comment">//        phone.photo();</span></span><br><span class="line"><span class="comment">//        phone.network();</span></span><br><span class="line"><span class="comment">//        System.out.println("============================");</span></span><br><span class="line"><span class="comment">//        IPhoto ip=new FourthPhone();//手机调用接口。</span></span><br><span class="line"><span class="comment">//        ip.photo();</span></span><br><span class="line"><span class="comment">//        ip=new Camera();//相机调用接口。</span></span><br><span class="line"><span class="comment">//        ip.photo();</span></span><br><span class="line"><span class="comment">//        System.out.println("============================");</span></span><br><span class="line">        System.out.println(INet.TEMP);</span><br><span class="line">        INet net= (INet) <span class="keyword">new</span> SmartWatches();</span><br><span class="line">        System.out.println(net.TEMP);</span><br><span class="line">        SmartWatches sw=<span class="keyword">new</span> SmartWatches();</span><br><span class="line">        System.out.println(sw.TEMP);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h5 id="5-4-选择练习"><a href="#5-4-选择练习" class="headerlink" title="5-4 选择练习"></a>5-4 选择练习</h5><p>阅读下面的Java代码，能够填写在横线处的语句是（）。（选择一项）<br><img src="en-resource://database/5756:1" alt="d5d1996770892fee26a0ce567cd1f22e.png"><br>A.  private int MAX_LOG_SIZE = 1000;<br>B.<img src="en-resource://database/5758:1" alt="d50244a83ed7631a4c2cc47efcb67219.png"><br>C.  private Boolean saveToFile(String fileNmae);<br>D.  int getSize();<br>正确答案： D<br>参考解析：本题考查接口定义，接口中常量前的访问修饰符为public。接口中抽象方法前的访问修饰符为public且抽象方法只有方法的声明，没有方法的具体实现，故D选项正确，int getSize();默认为公共的抽象的方法。A选项错误，常量的访问修改符应为public。B选项错误，不应该有方法体。C选项错误，访问修饰符应该为public</p>
<h5 id="5-5-选择练习"><a href="#5-5-选择练习" class="headerlink" title="5-5 选择练习"></a>5-5 选择练习</h5><p>下列关于Java中接口的说法不正确的是（） (选择一项)<br>A.  接口中方法的访问修饰符默认为public<br>B. 接口中的方法如果写成void test();的形式，默认是抽象方法<br>C.  实现接口的类中在重写接口中方法时访问修饰符可以为protected<br>D.  当类实现接口时，需要实现接口中所有的抽象方法，否则需要将该类设置为抽象类<br>正确答案： C<br>参考解析：本题考查接口中的方法。接口中的方法的访问修饰符默认为public，而方法重写时重写方法的访问权限应该大于等于父类的访问权限，故C选项的说法是不正确的。</p>
<h5 id="5-6-选择练习"><a href="#5-6-选择练习" class="headerlink" title="5-6 选择练习"></a>5-6 选择练习</h5><p>运行下列代码时，哪个位置会发生编译报错（）(选择一项)<br><img src="en-resource://database/5760:1" alt="11447f042ea2621729247cfc75c3a30f.png"><br>A.  位置1<br>B.  位置2<br>C.  位置3<br>D.  不存在错误<br>正确答案： B<br>参考解析：本题考查接口定义，<strong>接口中定义的常量在定义时必须初始化，</strong> 故B选项正确。</p>
<h4 id="接口成员–默认方法-amp-静态方法"><a href="#接口成员–默认方法-amp-静态方法" class="headerlink" title="接口成员–默认方法&amp;静态方法"></a>接口成员–默认方法&amp;静态方法</h4><p>INet.javap</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.tel;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口访问修饰符：public 默认。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">INet</span> </span>{</span><br><span class="line">    <span class="comment">/**接口中抽象方法可以不写abstract关键字</span></span><br><span class="line"><span class="comment">     * 访问修饰符默认public。</span></span><br><span class="line"><span class="comment">     * 当类实现接口时，需要去实现接口中的所有抽象方法，否则需要将该类设置为抽象类。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">network</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接口中可以包含常量，默认public、static、final</span></span><br><span class="line">    <span class="keyword">int</span> TEMP=<span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//default:默认方法 可以带方法体。jdk1.8后新增。</span></span><br><span class="line">    <span class="comment">//可以在实现类中重写，并可以通过接口的引用调用。</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">connection</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"我是接口中的默认链接"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//static：静态方法，可以带方法体。jdk1.8后新增。</span></span><br><span class="line">    <span class="comment">// 不可以在实现类中重写，可以同接口名调用。只能被子类继承，无法被方法重写。</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"我是接口中的静态方法"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>SmartWatches.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.tel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmartWatches</span> <span class="keyword">implements</span> <span class="title">INet</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TEMP=<span class="number">30</span>;</span><br><span class="line"><span class="comment">//    public void network(){</span></span><br><span class="line"><span class="comment">//        System.out.println("智能手表可以上网。");</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">video</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"智能手表可以看视频。"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">music</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"智能手表可以听音乐。"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">network</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"智能手表可以上网。"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connection</span><span class="params">()</span> </span>{</span><br><span class="line">        INet.<span class="keyword">super</span>.connection();<span class="comment">//调用接口中默认的方法。</span></span><br><span class="line"><span class="comment">//        INet.只能调用当前接口中的静态成员。如果想要访问待实现接口中的默认成员的话，则要通过INet.super调用。</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>PhoneTest.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.tel.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line"><span class="comment">//        FourthPhone phone=new FourthPhone();</span></span><br><span class="line"><span class="comment">//        phone.call();</span></span><br><span class="line"><span class="comment">//        phone.message();</span></span><br><span class="line"><span class="comment">//        phone.video();</span></span><br><span class="line"><span class="comment">//        phone.music();</span></span><br><span class="line"><span class="comment">//        phone.photo();</span></span><br><span class="line"><span class="comment">//        phone.network();</span></span><br><span class="line"><span class="comment">//        System.out.println("============================");</span></span><br><span class="line"><span class="comment">//        IPhoto ip=new FourthPhone();//手机调用接口。</span></span><br><span class="line"><span class="comment">//        ip.photo();</span></span><br><span class="line"><span class="comment">//        ip=new Camera();//相机调用接口。</span></span><br><span class="line"><span class="comment">//        ip.photo();</span></span><br><span class="line"><span class="comment">//        System.out.println("============================");</span></span><br><span class="line">        System.out.println(INet.TEMP);</span><br><span class="line">        INet net= (INet) <span class="keyword">new</span> SmartWatches();</span><br><span class="line">        System.out.println(net.TEMP);</span><br><span class="line">        net.connection();</span><br><span class="line">        INet.stop();<span class="comment">//静态方法调用需要通过接口名调用。</span></span><br><span class="line"><span class="comment">//        SmartWatches sw=new SmartWatches();</span></span><br><span class="line"><span class="comment">//        System.out.println(sw.TEMP);</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h5 id="5-8-选择练习"><a href="#5-8-选择练习" class="headerlink" title="5-8 选择练习"></a>5-8 选择练习</h5><p>在实现类中的划线处加入下列哪条代码可以调用 IAa 接口中默认的方法（）（选择一项）<br><img src="en-resource://database/5762:1" alt="c766b6125f804349e3a300f9c6993b85.png"><br>A.IAa.show();<br>B.super.show();<br>C.IAa.super.show();<br>D.B.super.show();<br>正确答案： C<br>参考解析：本题考查接口的默认方法，实现类在重写接口中的默认方法时调用接口默认方法的语句为：&lt;接口名&gt;.super.&lt;默认方法名&gt;故C选项正确。</p>
<h4 id="关于多接口中重名默认方法处理的解决方案"><a href="#关于多接口中重名默认方法处理的解决方案" class="headerlink" title="关于多接口中重名默认方法处理的解决方案"></a>关于多接口中重名默认方法处理的解决方案</h4><p>IPhoto.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.tel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPhoto</span> </span>{</span><br><span class="line">    <span class="comment">//具有拍照的能力</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">photo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span>  <span class="keyword">void</span> <span class="title">connection</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"我是IPhoto的connection"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>INet.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.tel;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口访问修饰符：public 默认。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">INet</span> </span>{</span><br><span class="line">    <span class="comment">/**接口中抽象方法可以不写abstract关键字</span></span><br><span class="line"><span class="comment">     * 访问修饰符默认public。</span></span><br><span class="line"><span class="comment">     * 当类实现接口时，需要去实现接口中的所有抽象方法，否则需要将该类设置为抽象类。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">network</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接口中可以包含常量，默认public、static、final</span></span><br><span class="line">    <span class="keyword">int</span> TEMP=<span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//default:默认方法 可以带方法体。jdk1.8后新增。</span></span><br><span class="line">    <span class="comment">//可以在实现类中重写，并可以通过接口的引用调用。</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">connection</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"我是接口中的默认链接"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//static：静态方法，可以带方法体。jdk1.8后新增。</span></span><br><span class="line">    <span class="comment">// 不可以在实现类中重写，可以同接口名调用。只能被子类继承，无法被方法重写。</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"我是接口中的静态方法"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>ThirdPhone.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.tel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThirdPhone</span> <span class="keyword">extends</span> <span class="title">SecondPhone</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">video</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"手机可以看视频。"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">music</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"手机可以听音乐。"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connection</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"我是三代手机中的connection"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>FourthPhone</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.tel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FourthPhone</span> <span class="keyword">extends</span> <span class="title">ThirdPhone</span> <span class="keyword">implements</span> <span class="title">IPhoto</span>,<span class="title">INet</span></span>{</span><br><span class="line"><span class="comment">//    public void photo(){</span></span><br><span class="line"><span class="comment">//        System.out.println("手机额可以拍照");</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">network</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"手机可以上网。"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">game</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"手机可以玩游戏。"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">photo</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"手机可以拍照"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connection</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"我是四代中的connection"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>SmartWatches.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.tel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmartWatches</span> <span class="keyword">implements</span> <span class="title">INet</span>,<span class="title">IPhoto</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TEMP=<span class="number">30</span>;</span><br><span class="line"><span class="comment">//    public void network(){</span></span><br><span class="line"><span class="comment">//        System.out.println("智能手表可以上网。");</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">video</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"智能手表可以看视频。"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">music</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"智能手表可以听音乐。"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">network</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"智能手表可以上网。"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connection</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"智能手表中的connection"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">photo</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>PhoneTest.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.tel.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line"></span><br><span class="line">          INet net2=<span class="keyword">new</span> SmartWatches();</span><br><span class="line">          net2.connection();</span><br><span class="line">          IPhoto ip2=<span class="keyword">new</span> SmartWatches();</span><br><span class="line">          ip2.connection();</span><br><span class="line">          System.out.println(<span class="string">"============================"</span>);</span><br><span class="line">          <span class="comment">//如果本类中定义了connection方法，则指向本类中的connection方法。没有定义，则默认指向继承父类中的connection方法。</span></span><br><span class="line">          <span class="comment">//如果本类中定义空的connection方法，则默认调用接口中connection方法。</span></span><br><span class="line">          INet net3=<span class="keyword">new</span> FourthPhone();</span><br><span class="line">          net3.connection();</span><br><span class="line">          IPhoto ip3=<span class="keyword">new</span> FourthPhone();</span><br><span class="line">          ip3.connection();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="关于多接口中重名常量处理的解决方案"><a href="#关于多接口中重名常量处理的解决方案" class="headerlink" title="关于多接口中重名常量处理的解决方案"></a>关于多接口中重名常量处理的解决方案</h4><p><img src="en-resource://database/6067:1" alt="5885a1f9098d5adb222d56f69539a96d.png"></p>
<ul>
<li>以上代码能否正常运行？</li>
<li>如果可以正常运行输出结果是什么？</li>
<li>如果不能正常运行，在各自的第几行有错误，原因是什么？</li>
</ul>
<h4 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h4><ul>
<li>接口也可以实现继承，并可以继承多个接口。</li>
</ul>
<p>《接口和抽象类的比较》</p>
<blockquote>
<p><strong>概念比较：</strong></p>
</blockquote>
<table>
<thead>
<tr>
<th>–</th>
<th>抽象类</th>
<th>接口</th>
</tr>
</thead>
<tbody><tr>
<td>相同点</td>
<td>均可以包含抽象方法</td>
<td>均可以包含抽象方法</td>
</tr>
<tr>
<td>相同点</td>
<td>都不能被实例化</td>
<td>都不能被实例化</td>
</tr>
<tr>
<td>相同点</td>
<td>都是引用数据类型，抽象类的子类或接口的实现类都可以向上转型</td>
<td>都是引用数据类型，抽象类的子类或接口的实现类都可以向上转型</td>
</tr>
<tr>
<td>不同点</td>
<td>一个类只能继承一个抽象类，即单继承</td>
<td>一个类可以实现多个接口</td>
</tr>
<tr>
<td>不同点</td>
<td>抽象类可以包含抽象方法、静态方法、构造方法等，且抽象方法前必须加 abstract关键字修饰。</td>
<td>接口中可以有抽象方法、默认方法、静态方法。接口中的抽象方法默认为public abstract，在实际编程中可以省略。接口中的默认方法和静态方法可以包含方法体。</td>
</tr>
<tr>
<td>不同点</td>
<td>抽象类中可以定义实例属性，也可以定义静态常量属性</td>
<td>接口中只能定义静态常量属性，且定义时就初始化</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>代码层面比较：</strong><br>我们应该何时选用抽象类，何时使用接口呢？我们通过一个具体例子来理解一下。比如超人 Superman 类继承自父类 People 类，People 类中除了包含超人，还包括一般人、蜘蛛侠、绿巨人等，这时便可以将People类声明为一个抽象类。而超人Superman不仅是拥有 People 走路和跑步的功能，他还拥有一般人类没有的功能“飞”，而很多东西都具有飞的功能，比如鸟飞、气球飞、飞机飞…而这些东西都抽象不出来一个公共的父类，所以就将“飞”这个功能定义为一个接口，以便其它生物如鸟去调用飞的功能。<br>具体代码：</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//接口：fly</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IFly</span></span>{</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//父类：people类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span></span>{</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类superman类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Superman</span> <span class="keyword">extends</span> <span class="title">People</span> <span class="keyword">implements</span> <span class="title">IFly</span></span>{</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> walk{</span><br><span class="line">		system.out.println(<span class="string">"超人可以走路"</span>);</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> run{</span><br><span class="line">		system.out.println(<span class="string">"超人可以奔跑"</span>);</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> fly{</span><br><span class="line">		system.out.println(<span class="string">"超人可以飞行"</span>);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h5 id="5-12-选择练习"><a href="#5-12-选择练习" class="headerlink" title="5-12 选择练习"></a>5-12 选择练习</h5><p>下列代码的运行结果是（）。(选择一项)<br><img src="en-resource://database/5764:1" alt="45a47c59d787307e26a83023ba55bd75.png"><br>A.  10temp<br>B.  temp10<br>C.  1010<br>D.  temptemp<br>正确答案： A<br>参考解析：本题考查接口中的常量。测试方法中用接口引用指向实现类，再调用TEMP，调用的是对应接口中的TEMP值，因此A选项正确。</p>
<h5 id="编程练习-1"><a href="#编程练习-1" class="headerlink" title="编程练习"></a>编程练习</h5><p>使用接口的知识， 定义接口IFly,创建三个类Plane类、Bird类、Balloon类，分别重写接口中的fly( )方法，然后再测试类中进行调用。<br>程序运行参考效果如图所示：<br><img src="en-resource://database/5766:1" alt="a12a285d73918a904cffc3639b10742f.png"></p>
<p><strong>任务</strong><br>任务分析：<br>1、创建接口IFly( )     方法：创建抽象方法 fly() 方法。<br>2、创建子类：Plane     方法：实现接口中的方法fly( )，输出信息“飞机在天上飞”     创建子类：Bird     方法：实现接口中的方法fly( )，输出信息“小鸟在天空翱翔”     创建子类：Balloon(气球)     方法：实现接口中的方法fly( )，输出信息“气球飞上天空”。<br>3、创建测试类，分别创建Plane、Bird、Balloon类的对象，调用 fly( ) 方法，输出效果参考效果图。<br><strong>原题</strong><br>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//测试类public class Test {    public static void main(String[] args) {          //对象实例化                   //分别调用fly()方法            }}</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>Balloon.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//创建类Balloon并实现接口IFlypublic class   Balloon           {     //重写方法fly()}</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>Bird.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//创建类Bird并实现接口IFlypublic class  Bird                 {     //重写fly()方法    }</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>Plane.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//创建类Plane并实现接口IFlypublic class  Plane                {    //重写fly方法     }</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>IFly.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//定义接口IFlypublic   IFly{     //创建方法fly()}</span></span><br></pre></td></tr></tbody></table></figure></div>
<p><strong>作答</strong><br>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">//对象实例化</span></span><br><span class="line">		IFly i1 = <span class="keyword">new</span> Plane();	</span><br><span class="line">		IFly i2 = <span class="keyword">new</span> Bird();</span><br><span class="line">		IFly i3 = <span class="keyword">new</span> Balloon();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分别调用fly()方法</span></span><br><span class="line">		i1.fly();</span><br><span class="line">		i2.fly();</span><br><span class="line">		i3.fly();</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Balloon.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//创建类Balloon并实现接口IFly</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Balloon</span> <span class="keyword">implements</span> <span class="title">IFly</span></span>{</span><br><span class="line">	<span class="comment">//重写方法fly()</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>{</span><br><span class="line">		System.out.println(<span class="string">"气球飞上天空"</span>);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Bird.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//创建类Bird并实现接口IFly</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">implements</span> <span class="title">IFly</span></span>{</span><br><span class="line">	<span class="comment">//重写fly()方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>{</span><br><span class="line">		System.out.println(<span class="string">"小鸟在天空翱翔"</span>);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Plane.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//创建类Plane并实现接口IFly</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Plane</span> <span class="keyword">implements</span> <span class="title">IFly</span></span>{</span><br><span class="line">	<span class="comment">//重写fly方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>{</span><br><span class="line">		System.out.println(<span class="string">"飞机在天上飞"</span>);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>IFly.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//定义接口IFly</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IFly</span></span>{</span><br><span class="line">	<span class="comment">//创建方法fly()</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul>
<li><p>在Java中，可以将一个类定义在另一个类里面或者一个方法里面，这样的类称为内部类。</p>
</li>
<li><p>与之对应，包含内部类的类被称为外部类。<br><img src="en-resource://database/6069:1" alt="8f2674e7ae6523e3522523ea427a1dd8.png"></p>
</li>
<li><p>当实际操作的时候，内部类的信息获取需要借助外部类去访问的。</p>
</li>
<li><p>内部类提供了更好的封装手段，可以将内部类隐藏在外部类之内，不允许其他的类随意的进行访问，从而更好的实现信息隐藏。</p>
</li>
<li><p>内部类的分类：</p>
<ul>
<li>成员内部类</li>
<li>静态内部类</li>
<li>方法内部类</li>
<li>匿名内部类<h4 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h4></li>
</ul>
</li>
</ul>
<p>内部类中最常见的就是成员内部类，也称为普通内部类。<br><img src="en-resource://database/6071:1" alt="825128958d8c4d0bc4c6d239db34a265.png"></p>
<p>Person.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Heart <span class="title">getHeart</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Heart();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"人会吃东西"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员内部类</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、内部类在外部使用时，无法直接实例化，需要借由外部类信息才能完成实例化。</span></span><br><span class="line"><span class="comment">     * 2、内部类的访问修饰符，可以任意，但是访问范围会受到影响。</span></span><br><span class="line"><span class="comment">     * 3、内部类可以直接访问外部类的成员；如果出现同名属性，有限访问内部类中定义的。</span></span><br><span class="line"><span class="comment">     * 4、可以使用外部类.this.成员的方式，访问外部类中同名的信息。</span></span><br><span class="line"><span class="comment">     * 5、外部类访问内部类信息，需要通过内部类实例，无法直接访问。</span></span><br><span class="line"><span class="comment">     * 6、内部类编译后.class文件命名:外部类$内部类.class。</span></span><br><span class="line"><span class="comment">     * 7、内部类中是否可以包含于外部类相同方法签名的方法。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Heart</span></span>{</span><br><span class="line">        <span class="keyword">int</span> age=<span class="number">13</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">beat</span><span class="params">()</span></span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"心脏在跳动"</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>PeopleTest</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.person;</span><br><span class="line"><span class="comment">//外部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">        Person lili=<span class="keyword">new</span> Person();</span><br><span class="line">        lili.age=<span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取内部类对象实例，方式1：new 外部类.new 内部类。</span></span><br><span class="line">        Person.Heart myHeart=<span class="keyword">new</span> Person().<span class="function">new <span class="title">Heart</span><span class="params">()</span></span>;</span><br><span class="line">        System.out.println(myHeart.beat());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取内部类对象实例，方式2：new 外部类.new 内部类。</span></span><br><span class="line">        myHeart=lili.n<span class="function">ew <span class="title">Heart</span><span class="params">()</span></span>;</span><br><span class="line">        System.out.println(myHeart.beat());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取内部类对象实例，方式3：外部类对象.获取方式。</span></span><br><span class="line">        myHeart=lili.getHeart();</span><br><span class="line">        System.out.println(myHeart.beat());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h5 id="选择练习-9"><a href="#选择练习-9" class="headerlink" title="选择练习"></a>选择练习</h5><p>已知外部类Out中含有成员内部类Inner，在主方法中怎么获取内部类Inner的实例化对象inner（）（选择两项）<br>A.<img src="en-resource://database/5768:1" alt="03420f9eee85089218cf5691f0608804.png"><br>B.<img src="en-resource://database/5770:1" alt="1dfaacba20541864ad1e49b77494a9a6.png"><br>C.<img src="en-resource://database/5772:1" alt="f12cf3fd895bab660ce95c5f14ee8e8e.png"><br>D.<img src="en-resource://database/5774:1" alt="2f884056a039c144916e2a8f2f7f1938.png"></p>
<p>正确答案： B,D<br>参考解析：本题考查内部类对象的创建。有以下三种方法可以获取内部类对象实例：方式一：new 外部类 . new 内部类方式二：外部类对象 . new 内部类方式三：外部类对象 . 获取方法因此BD选项正确。</p>
<h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p>静态内部类对象可以不依赖与外部类对象，直接创建。<br>Person.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Heart <span class="title">getHeart</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Heart();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"人会吃东西"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员内部类</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、内部类在外部使用时，无法直接实例化，需要借由外部类信息才能完成实例化。</span></span><br><span class="line"><span class="comment">     * 2、内部类的访问修饰符，可以任意，但是访问范围会受到影响。</span></span><br><span class="line"><span class="comment">     * 3、内部类可以直接访问外部类的成员；如果出现同名属性，有限访问内部类中定义的。</span></span><br><span class="line"><span class="comment">     * 4、可以使用外部类.this.成员的方式，访问外部类中同名的信息。</span></span><br><span class="line"><span class="comment">     * 5、外部类访问内部类信息，需要通过内部类实例，无法直接访问。</span></span><br><span class="line"><span class="comment">     * 6、内部类编译后.class文件命名:外部类$内部类.class。</span></span><br><span class="line"><span class="comment">     * 7、内部类中是否可以包含于外部类相同方法签名的方法。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    class Heart{</span></span><br><span class="line"><span class="comment">//        int age=13;</span></span><br><span class="line"><span class="comment">//        int temp=22;</span></span><br><span class="line"><span class="comment">//        public String beat(){</span></span><br><span class="line"><span class="comment">//            eat();</span></span><br><span class="line"><span class="comment">//            return Person.this.age+"心脏在跳动";</span></span><br><span class="line"><span class="comment">//        }</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态内部类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、静态内部类中，只能直接访问外部类的静态成员，如果需要调用非静态成员，可以通过对象实例。</span></span><br><span class="line"><span class="comment">     * 2、静态内部列对象实例时，可以不依赖于外部类对象。</span></span><br><span class="line"><span class="comment">     * 3、可以通过外部类.内部类.静态成员的方式，访问内部类中的静态成员。</span></span><br><span class="line"><span class="comment">     * 4、当内部类属性与外部类属性同名时，默认直接调用内部类的成员。</span></span><br><span class="line"><span class="comment">     *    如果需要访问外部类中的非静态属性，则可以通过 new 外部类().属性  的方式。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Heart</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">13</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>{</span><br><span class="line">            System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">beat</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">new</span> Person().eat();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Person().age + <span class="string">"岁的心脏在跳动"</span>;<span class="comment">//</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>PeopleTest.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.person;</span><br><span class="line"><span class="comment">//外部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">        Person lili=<span class="keyword">new</span> Person();</span><br><span class="line">        lili.age=<span class="number">12</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //获取内部类对象实例，方式1：new 外部类.new 内部类。</span></span><br><span class="line"><span class="comment">        Person.Heart myHeart=new Person().new Heart();</span></span><br><span class="line"><span class="comment">        System.out.println(myHeart.beat());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //获取内部类对象实例，方式2：new 外部类.new 内部类。</span></span><br><span class="line"><span class="comment">        myHeart=lili.new Heart();</span></span><br><span class="line"><span class="comment">        System.out.println(myHeart.beat());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //获取内部类对象实例，方式3：外部类对象.获取方式。</span></span><br><span class="line"><span class="comment">        myHeart=lili.getHeart();</span></span><br><span class="line"><span class="comment">        System.out.println(myHeart.beat());</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//获取静态内部列对象实例。</span></span><br><span class="line">        Person.Heart myHeart=<span class="keyword">new</span> Person.Heart();</span><br><span class="line">        myHeart.beat();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="方法内部类"><a href="#方法内部类" class="headerlink" title="方法内部类"></a>方法内部类</h4><ul>
<li>定义在外部类方法中的内部类，也称局部内部类。<ul>
<li><p>方法内定义的局部变量只能在方法里使用。</p>
</li>
<li><p>方法内不能定义静态成员。</p>
</li>
<li><p>不能通过public，private，protected访问修饰符进行访问设定。</p>
<h5 id="选择练习-10"><a href="#选择练习-10" class="headerlink" title="选择练习"></a>选择练习</h5></li>
</ul>
</li>
</ul>
<p>关于下列代码，说法正确的是（）（选择一项）<br><img src="en-resource://database/5776:1" alt="f77700d060d8c87145cf8b8d40a57221.png"></p>
<p>A代码编译成功<br>B代码编译错误，错误发生在位置1<br>C代码编译错误，错误发生在位置2<br>D代码编译错误，错误发生在位置3</p>
<p>正确答案： C</p>
<p>参考解析：本题考查方法内部类，方法内部类中class前不能添加public、private、protected、static关键字，因此C选项正确。</p>
<h5 id="匿名内部类（上）"><a href="#匿名内部类（上）" class="headerlink" title="匿名内部类（上）"></a>匿名内部类（上）</h5><p>匿名内部类适用场景：</p>
<ul>
<li>只用到类的一个实例。</li>
<li>类再定义后马上用到。</li>
<li>给类命名并不会导致代码更容易被理解。</li>
</ul>
<p>Person.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.anonymous;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>Man.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.anonymous;</span><br><span class="line"></span><br><span class="line"><span class="comment">//public class Man extends Person{</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public void read(){</span></span><br><span class="line"><span class="comment">//        System.out.println("男生喜欢看科幻类书籍。");</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line"><span class="comment">//}</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>Woman.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.anonymous;</span><br><span class="line"></span><br><span class="line"><span class="comment">//public class Woman extends Person{</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public void read(){</span></span><br><span class="line"><span class="comment">//        System.out.println("女生喜欢读言情小说。");</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line"><span class="comment">//}</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>PersonTest.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.test;</span><br><span class="line"></span><br><span class="line"><span class="comment">//import com.imooc.anonymous.Man;</span></span><br><span class="line"><span class="keyword">import</span> com.imooc.anonymous.Person;</span><br><span class="line"><span class="comment">//import com.imooc.anonymous.Woman;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>{</span><br><span class="line">    <span class="comment">//根据传入的不同的人的类型，调用对应的read方法。</span></span><br><span class="line">    <span class="comment">//方案1：</span></span><br><span class="line"><span class="comment">//    public void getRead(Man man){</span></span><br><span class="line"><span class="comment">//        man.read();</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line"><span class="comment">//    public void getRead(Woman woman){</span></span><br><span class="line"><span class="comment">//        woman.read();</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方案2：</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getRead</span><span class="params">(Person person)</span></span>{</span><br><span class="line">        person.read();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>{</span><br><span class="line"><span class="comment">//        PersonTest test=new PersonTest();</span></span><br><span class="line"><span class="comment">//        Man one =new Man();</span></span><br><span class="line"><span class="comment">//        Woman two=new Woman();</span></span><br><span class="line"><span class="comment">//        test.getRead(one);</span></span><br><span class="line"><span class="comment">//        test.getRead(two);</span></span><br><span class="line"></span><br><span class="line">        PersonTest test=<span class="keyword">new</span> PersonTest();</span><br><span class="line">        <span class="comment">//方案3：匿名内部类。把man.java和woman.java以及导入语句都注释了。</span></span><br><span class="line">          <span class="comment">/* </span></span><br><span class="line"><span class="comment">         * 1、匿名内部类没有类型名称，实例对象名称。</span></span><br><span class="line"><span class="comment">         * 2、编译后的文件名：外部类$数字.class</span></span><br><span class="line"><span class="comment">         * 3、无法使用private、public、protected、abstract、static修饰。</span></span><br><span class="line"><span class="comment">         * 4、无法编写构造方法（），可以添加构造代码块。</span></span><br><span class="line"><span class="comment">         * 5、不能出现静态成员。</span></span><br><span class="line"><span class="comment">         * 6、匿名内部类可以实现接口也可以继承父类，但是不可兼得。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        test.getRead(<span class="keyword">new</span> Person(){</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>{</span><br><span class="line">                System.out.println(<span class="string">"男生喜欢看科幻类书籍。"</span>);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        test.getRead(<span class="keyword">new</span> Person(){</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>{</span><br><span class="line">                System.out.println(<span class="string">"女生喜欢读言情小说。"</span>);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h5 id="匿名内部类（下）"><a href="#匿名内部类（下）" class="headerlink" title="匿名内部类（下）"></a>匿名内部类（下）</h5><ul>
<li>匿名内部类没有类型名称、实例对象名称。</li>
<li>编译后的文件命名：外部类￥数字.class</li>
<li>无法使用private、public、protected、abstract、static修饰。</li>
<li>无法编写构造方法，可以添加构造代码块。</li>
<li>不能出现静态成员。</li>
<li>匿名内部类可以实现接口也可以继承父类，但是不可兼得。</li>
</ul>
<p>《匿名内部类详解》</p>
<p>《接口中的内部类》</p>
<h5 id="选择练习-11"><a href="#选择练习-11" class="headerlink" title="选择练习"></a>选择练习</h5><p>下面截取了一段匿名内部类的代码，关于这段代码，下面说法正确的是（）（选择两项）<br><img src="en-resource://database/5778:1" alt="c0dd9abba5eead907c2fb598ad8b923a.png"><br>A.  位置1有错误<br>B.  位置2有错误<br>C.  位置3有错误<br>D.  位置4有错误<br>正确答案： B,C<br>参考解析：本题考查匿名内部类，匿名内部类中不能出现抽象方法，也不能出现静态成员。故BC选项正确。</p>
<h5 id="编程练习-2"><a href="#编程练习-2" class="headerlink" title="编程练习"></a>编程练习</h5><p>分别通过成员内部类、方法内部类、匿名内部类完成接口Ball，在测试类BallTest中的调用。程序参考运行效果图如下：<br><img src="en-resource://database/5780:1" alt="8518b29311b3619f1ef5b410d30ef6e5.png"></p>
<p>任务<br>任务分析：</p>
<ol>
<li>   创建接口</li>
</ol>
<ul>
<li>Ball包含抽象方法play( )</li>
</ul>
<ol start="2">
<li>   创建外部类</li>
</ol>
<ul>
<li>BallTest定义方法 void playBall(Ball ball)，调用接口中的 play( ) 方法</li>
</ul>
<ol start="3">
<li>   分别通过成员内部类、方法内部类以及匿名内部类完成接口实现</li>
</ol>
<ul>
<li>在BallTest中，创建成员内部类 Inner_m 实现接口Ball，在类中重写 play( ) 方法，输出两条信息，分别为”成员内部类:”和”打篮球”</li>
<li>在BallTest中， 创建成员方法 info() ，在方法中创建方法内部类 Inner_f 实现Ball接口，重写 play( ) 方法，输出三条信息，分别为”<strong><strong>**</strong></strong>“，”方法内部类:” 和”打乒乓球”</li>
<li>在测试类Test中通过匿名内部类实现接口Ball，并重写 play( )方法，输出两条信息，分别为 “<strong><strong>**</strong></strong>“，”匿名内部类:”和”打排球”</li>
</ul>
<ol start="4">
<li>   创建测试类Test，通过创建BallTest类及相关内部类实例，调用相关方法，依次完成相关内部类测试。运行效果参见效果图</li>
</ol>
<p>原题</p>
<p>Test.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure></div>
<p>//测试类public class Test {    public static void main(String[] args) {        //完成成员内部类内部测试                //完成方法内部类测试            //完成匿名内部类测试        }}</p>
<p>BallTest.java</p>
<p>//创建类BallTestpublic class BallTest {    // 创建成员内部类Inner_m    // 创建方法内部类    // 定义一个方法void playBall(Ball ball)，调用play()方法}Ball.java//接口Ballpublic   Ball {    //创建抽象方法play()：void}作答Test.java//测试类public class Test {        public void getBall(Ball ball) {        ball.play();    }        public static void main(String[] args) {        //完成成员内部类内部测试        BallTest b = new BallTest();                BallTest.Inner_m m = new BallTest().new Inner_m();        m.play();                m = b.new Inner_m();        m.play();        b.playBall(m);                //完成方法内部类测试        b.info();                //完成匿名内部类测试        Test aTest = new Test();        aTest.getBall(new Ball() {            @Override            public void play() {                // TODO Auto-generated method stub                System.out.println("<strong><strong>**</strong></strong>\n匿名内部类：\n打排球");            }                    });    }}</p>
<p>BallTest.java</p>
<p>//创建类BallTestpublic class BallTest implements Ball{        public BallTest() {            }        @Override    public void play() {        // TODO Auto-generated method stub            }    //    public Inner_m getInner_m() {//        return new Inner_m();//    }        // 创建成员内部类Inner_m    public class Inner_m implements Ball{        @Override        public void play() {            System.out.println("成员内部类：\n打篮球");        }    }        // 创建方法内部类    public void info() {        class Inner_f implements Ball{            @Override            public void play() {                System.out.println("<strong><strong>**</strong></strong>\n方法内部类：\n打乒乓球");            }        }        Inner_f f = new Inner_f();        f.play();    }        // 定义一个方法void playBall(Ball ball)，调用play()方法    public void playBall(Ball ball) {        ball.play();    }}</p>
<p>Ball.java</p>
<p>//接口Ballpublic interface Ball {    //创建抽象方法play()：void     public abstract void play();    }</p>
<h4 id="7-2-项目作业"><a href="#7-2-项目作业" class="headerlink" title="7-2 项目作业"></a>7-2 项目作业</h4><p>请大家根据前面小节（7-1）视频中提供的项目需求，运用Java基础语法、面向对象的知识，完成马戏团节目管理系统开发。运行效果:     参见课程视频。任务描述一、语言和环境实现语言       Java语言环境要求及开发工具       JDK、Eclipse二、程序整体要求划分功能模块，根据题目要求设置不同的类，在类中实现相应功能的管理。类的标识要清楚易懂，代码结构要层次分明，代码编辑思路要清晰、整洁。要求Java代码书写、命名符合规范，属性所属数据类型要准确合理，在代码中添加必要的注释程序运行效果参考效果图要求，文字大小、颜色也不做统一要求结合演示效果，完成需求分析中的所有内容将作业项目形成压缩文件后上传三、需求分析：    1.  整个项目由三个环节组成：        -表演菜单展示        -选择表演者进行表演        -选择是否继续观看表演    2.  使用面向对象思想编程         对封装、继承和多态的使用         注意编码规范         注意循环的使用四、详细设计：      1.抽象父类：        - 动物（Animal）           属性：昵称（name）、年龄（age）           抽象方法：描述喜好（love）       2. 接口         -  表演（IAct）            抽象方法：描述技能（skill）、描述表演（act）            说明： 每个表演者的表演信息是通过调用act()方法输出的                      3. 实现类          - 棕熊（Bear）            继承自Animal实现IAct          -  狮子（Lion）             继承自Animal实现IAct             新增属性：颜色（color）、性别（sex）         -  猴子（Monkey）            继承自Animal实现IAct            新增属性：品种（Type）        -   鹦鹉（Parrot）            继承自Animal实现IAct            新增属性：品种（type）        -   小丑（Clown）            实现IAct            属性：名字（name）、艺龄（years）            新增方法：着装特点（dress）    也可参见课程视频。评分标准是什么？规范【10分】   每个类都封装在自己独立的 ".java"文件中；文件、class、成员变量命名规范；                   代码结构要层次分明；  Java代码规范及添加适量注释。程序整体运行效果【10分】程序正常运行效果，且满足效果图要求。抽象父类（动物Animal）【5分】能够描述动物昵称和年龄；设定抽象方法，返回对喜好的描述信息接口（表演IAct）【4分】设定方法描述特长，返回特长的描述信息；            设定表演的方法实现类【56分】棕熊类【7分】继承自Animal实现IAct接口，重写父类和接口中的方法狮子类【13分】继承自Animal实现IAct接口能够描述动物颜色和性别重写父类和接口中的方法         猴子类【12分】继承自Animal实现IAct接口能够描述品种重写父类和接口中的方法鹦鹉类【12分】继承自Animal实现IAct接口能够描述品种重写父类和接口中的方法小丑类【12分】实现Iact接口；能够描述名字、艺龄；重写接口中的方法；设定方法，描述着装特点测试类【15分】测试程序，设定表演菜单的方法，根据用户输入产生表演者，参照效果图输出信息作答：package com.imooc.polymorphic;import java.util.Scanner;public class Test {    public void notice() {        System.out.println("<strong><strong>**</strong></strong>欢迎来到tck马戏团*<strong><strong>**</strong></strong>");        System.out.println("<strong>****</strong>  请选择表演者*<strong><strong>**</strong></strong>");        System.out.println("<strong><strong>**</strong></strong>1、棕熊*<strong><strong>**</strong></strong>");        System.out.println("<strong><strong>**</strong></strong>2、狮子*<strong><strong>**</strong></strong>");        System.out.println("<strong><strong>**</strong></strong>3、猴子*<strong><strong>**</strong></strong>");        System.out.println("<strong><strong>**</strong></strong>4、鹦鹉*<strong><strong>**</strong></strong>");        System.out.println("<strong><strong>**</strong></strong>5、小丑*<strong><strong>**</strong></strong>");    }    public static void main(String[] args) {        // TODO Auto-generated method stub        Test test=new Test();        IAct actor=null;        int n,n1;        Scanner sc=new Scanner(System.in);        boolean a=true;        while(a) {            test.notice();            try {                n=sc.nextInt();            }catch(java.util.InputMismatchException e) {                System.out.println("输入的数据格式有误，不能有非数字,请重新输入!");                sc.next();                continue;            }            switch(n) {            case 1:                actor = new Bear("Bill", 1);                break;            case 2:                actor = new Lion("公狮", "灰色", "Lain", 2);                break;            case 3:                actor = new Monkey("Tom", 1, "金丝猴");                break;            case 4:                actor = new Parrot("Rose", 1, "牡丹鹦鹉");                break;            case 5:                actor = new Clown("Kahle", 5);                break;            default:                System.out.println("请输入1-5之间的数字!");                break;                             }            if((actor!=null)&amp;&amp;(n&gt;0&amp;&amp;n&lt;6)) {                System.out.println(actor.act());                System.out.println();                System.out.println("<strong>****</strong>是否继续观看（1/0）**<strong>**</strong>");                boolean flag=true;                while(flag==true) {                    try {                        n1=sc.nextInt();                    }catch(java.util.InputMismatchException e) {                        sc.next();                        continue;                    }                    switch(n1) {                    case 1:                        flag=false;                        break;                    case 0:                        System.out.println("欢迎下次光临tck马戏团");                        System.exit(0);                        break;                    default:                        System.out.println("输入不正确，请重新输入!");                        break;                    }                                     }            }        }    }}</p>
</body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
</search>
